{"version":3,"file":"0d25e9d45da1a97d0df23e6c13451afbee6577fb-4142a3d74823c9f97421.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/components/table/TableContainer.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/table/useHandleSortState.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/table/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/table/demos.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/icons/dnb/copy.tsx"],"sourcesContent":["import React from 'react'\nimport classnames from 'classnames'\nimport TableScrollView, { TableScrollViewProps } from './TableScrollView'\nimport { createSpacingClasses } from '../space/SpacingUtils'\n\nimport type { TableProps } from './Table'\nimport type { SpacingProps } from '../space/types'\nimport { validateDOMAttributes } from '../../shared/component-helper'\n\nexport type TableContainerProps = {\n  /**\n   * The content of the component.\n   */\n  children:\n    | [\n        React.ReactElement<TableContainerHeadProps>,\n        React.ReactElement<TableContainerBodyProps>,\n        React.ReactElement<TableContainerFootProps>\n      ]\n    | React.ReactElement<TableContainerBodyProps>\n}\n\nexport type TableContainerAllProps = TableContainerProps &\n  React.TableHTMLAttributes<HTMLTableRowElement> &\n  SpacingProps\n\ntype InternalTableContainerTableScrollView = Omit<\n  TableScrollViewProps,\n  'children'\n> & {\n  children: React.ReactNode\n}\n\nexport default function TableContainer(props: TableContainerAllProps) {\n  const { children, className, ...rest } = props\n  const spacingClasses = createSpacingClasses(props)\n\n  validateDOMAttributes(props, rest)\n\n  const ScrollView =\n    TableScrollView as React.FunctionComponent<InternalTableContainerTableScrollView>\n\n  const isArray = Array.isArray(children)\n  const content = isArray ? children : [children]\n\n  if (content[0]?.type !== TableContainer.Head) {\n    content.unshift(<TableContainer.Head key=\"head\" />)\n  }\n  if (content[2]?.type !== TableContainer.Foot) {\n    content.push(<TableContainer.Foot key=\"foot\" />)\n  }\n\n  return (\n    <section\n      className={classnames(\n        'dnb-table__container',\n        className,\n        spacingClasses\n      )}\n      {...rest}\n    >\n      <ScrollView>{content}</ScrollView>\n    </section>\n  )\n}\n\nexport type TableContainerBodyProps = {\n  /**\n   * The content of the component.\n   */\n  children:\n    | React.ReactElement<TableProps>\n    | Array<React.ReactElement<TableProps>>\n}\n\nexport function TableContainerBody(\n  props: TableContainerBodyProps & React.HTMLAttributes<HTMLDivElement>\n) {\n  const { children, className, ...rest } = props\n\n  return (\n    <div\n      className={classnames('dnb-table__container__body', className)}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport type TableContainerHeadProps = {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode\n}\n\nexport function TableContainerHead(\n  props: TableContainerHeadProps & React.HTMLAttributes<HTMLDivElement>\n) {\n  const { children, className, ...rest } = props\n\n  return (\n    <div\n      className={classnames(\n        'dnb-table__container__head',\n        !children && 'dnb-table__container__head--empty',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport type TableContainerFootProps = {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode\n}\n\nexport function TableContainerFoot(\n  props: TableContainerFootProps & React.HTMLAttributes<HTMLDivElement>\n) {\n  const { children, className, ...rest } = props\n\n  return (\n    <div\n      className={classnames(\n        'dnb-table__container__foot',\n        !children && 'dnb-table__container__foot--empty',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n\nTableContainer.Body = TableContainerBody\nTableContainer.Head = TableContainerHead\nTableContainer.Foot = TableContainerFoot\n","import React from 'react'\n\nexport type useHandleSortStateOptions = {\n  /**\n   * Defines if the current column should be active or not.\n   * Defaults to false.\n   */\n  active?: boolean\n\n  /**\n   * Define the sorting direction. Can be \"asc\", \"desc\" or \"off\".\n   * Defaults to \"off\".\n   */\n  direction?: useHandleSortStateDirection\n\n  /**\n   * Define the possible modes.\n   * Defaults to [\"asc\", \"desc\", \"off\"].\n   */\n  modes?: Array<useHandleSortStateMode>\n}\nexport type useHandleSortStateDirection = 'asc' | 'desc' | 'off'\nexport type useHandleSortStateMode = 'asc' | 'desc' | 'off'\nexport type useHandleSortStateName = string\nexport type useHandleSortStateConfig = Record<\n  useHandleSortStateName,\n  useHandleSortStateOptions\n>\nexport type SortState = Record<\n  useHandleSortStateName,\n  {\n    active: boolean\n    reversed: boolean\n    direction: useHandleSortStateDirection | 'off'\n  }\n>\nexport type SortEventHandler = () => void\nexport type SortHandler = Record<useHandleSortStateName, SortEventHandler>\n\ntype SortStateInternalStateOptions = Omit<\n  useHandleSortStateOptions,\n  'direction'\n> & { direction: useHandleSortStateDirection | 'off' }\ntype SortStateInternalState = SortStateInternalStateOptions & {\n  reversed: boolean\n  lastDirection: useHandleSortStateDirection\n}\ntype SortStateInternalEntry = Record<\n  useHandleSortStateName,\n  SortStateInternalStateOptions\n>\ntype GetNextMode = {\n  direction: useHandleSortStateDirection\n  opts: SortStateInternalStateOptions\n  defaults: useHandleSortStateOptions\n}\n\nexport function useHandleSortState(\n  config: useHandleSortStateConfig,\n  defaults: useHandleSortStateOptions = {\n    direction: 'off',\n    modes: ['asc', 'desc', 'off'],\n  }\n) {\n  const initialState = React.useMemo(() => {\n    return Object.entries(config).reduce((acc, [name, opts]) => {\n      acc[name] = { ...defaults, ...opts }\n\n      return acc\n    }, {})\n  }, [config, defaults])\n\n  const [internalState, setState] = React.useState<SortState>(initialState)\n\n  const sortHandler: SortHandler = React.useMemo(() => {\n    const list = Object.entries(internalState as SortStateInternalEntry)\n\n    return list.reduce((acc, [name, opts]) => {\n      acc[name] = () => {\n        const state = { ...internalState[name] } as SortStateInternalState\n\n        if (!state.active && state.lastDirection) {\n          state.direction = state.lastDirection\n          state.active = true\n          state.lastDirection = null\n        } else if (!state.active && state.direction !== 'off') {\n          state.active = true\n        } else {\n          state.direction = getNextMode({\n            direction: state.direction,\n            opts,\n            defaults,\n          })\n          state.active = state.direction !== 'off'\n        }\n\n        setState({\n          ...list.reduce((acc, [name, opts]) => {\n            acc[name] = opts\n            acc[name].active = false\n            if (opts.direction !== 'off') {\n              acc[name].lastDirection = opts.direction\n            }\n            return acc\n          }, {}),\n          [name]: state,\n        })\n      }\n\n      return acc\n    }, {})\n  }, [internalState]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  let activeSortName = null\n  const sortState: SortState = Object.entries(internalState).reduce(\n    (acc, [name, { active, direction }]) => {\n      const reversed =\n        direction === 'off' ? undefined : direction === 'desc'\n\n      if (active) {\n        activeSortName = name\n      } else {\n        active = false\n      }\n\n      acc[name] = { active, direction, reversed }\n\n      return acc\n    },\n    {}\n  )\n\n  return { sortState, sortHandler, activeSortName }\n\n  function getNextMode({ direction, opts, defaults }: GetNextMode) {\n    const modes = defaults.modes.filter((mode) => {\n      return opts.modes.includes(mode)\n    })\n\n    if (!modes.includes(direction)) {\n      direction = modes[0]\n    }\n\n    let next = direction\n\n    for (let i = 0, l = modes.length; i < l; i++) {\n      const mode = modes[i]\n\n      if (direction === mode) {\n        let c = i + 1\n        if (c >= l) {\n          c = 0\n        }\n        next = modes[c]\n        break\n      }\n    }\n\n    return next\n  }\n}\n\nexport default useHandleSortState\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport styled from '@emotion/styled'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { H2, P, Dl, Dt, Dd, Code, Anchor } from '@dnb/eufemia/src'\nimport { copy as copyIcon } from '@dnb/eufemia/src/icons'\nimport {\n  Button,\n  Pagination,\n  Checkbox,\n  Input,\n  Section,\n} from '@dnb/eufemia/src/components'\nimport { useCopyWithNotice } from '@dnb/eufemia/src/components/number-format/NumberUtils'\nimport Table from '@dnb/eufemia/src/components/table/Table'\nimport Th from '@dnb/eufemia/src/components/table/TableTh'\nimport Td from '@dnb/eufemia/src/components/table/TableTd'\nimport Tr from '@dnb/eufemia/src/components/table/TableTr'\nimport TableContainer from '@dnb/eufemia/src/components/table/TableContainer'\nimport useHandleSortState from '@dnb/eufemia/src/components/table/useHandleSortState'\n\nexport const TableVariantBasic = () => (\n  <ComponentBox\n    hideCode\n    data-visual-test=\"table-default\"\n    scope={{ useHandleSortState }}\n  >\n    {() => {\n      const BasicTable = () => {\n        const { sortState, sortHandler } = useHandleSortState({\n          column1: { direction: 'asc', active: true },\n          column2: { direction: 'desc', modes: ['asc', 'desc'] },\n        })\n\n        // Handle your \"column1\" logic\n        React.useEffect(() => {\n          switch (sortState.column1.direction) {\n            case 'asc':\n              break\n\n            case 'desc':\n              break\n\n            default:\n            case 'off':\n              break\n          }\n        }, [sortState.column1.direction])\n\n        return (\n          <Table.ScrollView>\n            <Table>\n              <caption className=\"dnb-sr-only\">A Table Caption</caption>\n              <thead>\n                <Tr>\n                  <Th>Column</Th>\n                  <Th>\n                    <Th.Horizontal>\n                      Help Button\n                      <Th.HelpButton>Help Content</Th.HelpButton>\n                    </Th.Horizontal>\n                  </Th>\n                  <Th\n                    sortable\n                    active={sortState.column1.active}\n                    reversed={sortState.column1.reversed}\n                  >\n                    <Th.SortButton\n                      text=\"Sortable Active\"\n                      title=\"Sort table column\"\n                      on_click={sortHandler.column1}\n                    />\n                  </Th>\n                  <Th\n                    sortable\n                    active={sortState.column2.active}\n                    reversed={sortState.column2.reversed}\n                    align=\"right\"\n                  >\n                    <Th.SortButton\n                      text=\"Sortable\"\n                      title=\"Sort table column\"\n                      on_click={sortHandler.column2}\n                    />\n                  </Th>\n                </Tr>\n              </thead>\n              <tbody>\n                <Tr>\n                  <Td>Row 1</Td>\n                  <Td>Row 1</Td>\n                  <Td>Row 1</Td>\n                  <Td align=\"right\">Row 1</Td>\n                </Tr>\n                <Tr>\n                  <Td>Row 2</Td>\n                  <Td>Row 2</Td>\n                  <Td>Row 2</Td>\n                  <Td align=\"right\">Row 2</Td>\n                </Tr>\n                <Tr>\n                  <Td>\n                    <P>Row 3 with paragraph</P>\n                  </Td>\n                  <Td>\n                    Row 3 with <Code>code</Code>\n                  </Td>\n                  <Td>\n                    <P>\n                      Row 3 with <b>medium paragraph</b>\n                    </P>\n                  </Td>\n                  <Td align=\"right\">\n                    Row 3 with <b>medium text</b>\n                  </Td>\n                </Tr>\n              </tbody>\n            </Table>\n          </Table.ScrollView>\n        )\n      }\n\n      return <BasicTable />\n    }}\n  </ComponentBox>\n)\n\nexport const TableSizeMedium = () => (\n  <ComponentBox hideCode data-visual-test=\"table-size-medium\">\n    <Table.ScrollView>\n      <Table size=\"medium\">\n        <caption className=\"dnb-sr-only\">A Table Caption</caption>\n        <thead>\n          <Tr>\n            <Th>Column</Th>\n            <Th sortable>\n              <Th.SortButton text=\"Sortable\" title=\"Sort table column\" />\n            </Th>\n            <Th align=\"right\">Column</Th>\n          </Tr>\n        </thead>\n        <tbody>\n          <Tr>\n            <Td>Row 1</Td>\n            <Td>Row 1</Td>\n            <Td align=\"right\">Row 1</Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <P>Row 2 with paragraph</P>\n            </Td>\n            <Td>\n              <P>\n                Row 2 with <b>medium paragraph</b>\n              </P>\n            </Td>\n            <Td align=\"right\">\n              Row 2 with <b>medium text</b>\n            </Td>\n          </Tr>\n        </tbody>\n      </Table>\n    </Table.ScrollView>\n  </ComponentBox>\n)\n\nexport const TableSizeSmall = () => (\n  <ComponentBox hideCode data-visual-test=\"table-size-small\">\n    <Table.ScrollView>\n      <Table size=\"small\">\n        <caption className=\"dnb-sr-only\">A Table Caption</caption>\n        <thead>\n          <Tr>\n            <Th>Column</Th>\n            <Th sortable>\n              <Th.SortButton text=\"Sortable\" title=\"Sort table column\" />\n            </Th>\n            <Th align=\"right\">Column</Th>\n          </Tr>\n        </thead>\n        <tbody>\n          <Tr>\n            <Td>Row 1</Td>\n            <Td>Row 1</Td>\n            <Td align=\"right\">Row 1</Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <P>Row 2 with paragraph</P>\n            </Td>\n            <Td>\n              <P>\n                Row 2 with <b>medium paragraph</b>\n              </P>\n            </Td>\n            <Td align=\"right\">\n              Row 2 with <b>medium text</b>\n            </Td>\n          </Tr>\n        </tbody>\n      </Table>\n    </Table.ScrollView>\n  </ComponentBox>\n)\n\nexport const TableVariantComplex = () => (\n  <ComponentBox hideCode data-visual-test=\"table-complex\">\n    <Table.ScrollView>\n      <Table border outline>\n        <caption>A Table Caption</caption>\n        <thead>\n          <Tr noWrap>\n            <Th />\n            <Th>\n              Column 2<br />\n              newline\n            </Th>\n            <Th colSpan={2}>Column 3 that spans</Th>\n          </Tr>\n        </thead>\n        <tbody>\n          <Tr variant=\"even\">\n            <Th scope=\"rowgroup\" rowSpan={2}>\n              Row 1+2 Header\n            </Th>\n            <Td rowSpan={2}>Row 1 that spans</Td>\n            <Td>Row 1</Td>\n            <Td>Row 1</Td>\n          </Tr>\n          <Tr variant=\"even\">\n            <Td>Row 2</Td>\n            <Td>Row 2</Td>\n          </Tr>\n          <Tr>\n            <Th scope=\"row\">\n              Row 3 Header <br />\n              newline\n            </Th>\n            <Td>Row 3</Td>\n            <Td spacing=\"horizontal\">\n              <Button variant=\"secondary\">Button</Button>\n            </Td>\n            <Td noSpacing align=\"right\">\n              <Code>noSpacing + align=\"right\"</Code>\n            </Td>\n          </Tr>\n          <Tr>\n            <Th scope=\"row\">Row 4 Header</Th>\n            <Td>Row 4</Td>\n            <Td colSpan={2}>Row 4</Td>\n          </Tr>\n        </tbody>\n      </Table>\n    </Table.ScrollView>\n  </ComponentBox>\n)\n\nexport const TableRowScopeOnly = () => (\n  <ComponentBox hideCode data-visual-test=\"table-row-scope-only\">\n    <Table.ScrollView>\n      <Table outline border>\n        <caption>A Table Caption</caption>\n        <tbody>\n          <Tr>\n            <Th scope=\"row\">Header A</Th>\n            <Td>Row 1</Td>\n            <Td>Row 1</Td>\n          </Tr>\n          <Tr>\n            <Th>Header B</Th>\n            <Td>Row 2</Td>\n            <Td>Row 2</Td>\n          </Tr>\n        </tbody>\n      </Table>\n    </Table.ScrollView>\n  </ComponentBox>\n)\n\nexport const TableVariantFixed = () => (\n  <ComponentBox hideCode data-visual-test=\"table-fixed\">\n    {() => {\n      const FixedTable = styled(Table)`\n        min-width: 70rem;\n\n        /* Define the width of the THs so they are aligned accross tables */\n        thead {\n          th:nth-of-type(1) {\n            width: 30%;\n          }\n          th:nth-of-type(2) {\n            width: 20%;\n          }\n          th:nth-of-type(3) {\n            width: 10%;\n          }\n          th:nth-of-type(4) {\n            width: 10%;\n          }\n          th:nth-of-type(5) {\n            width: 5%;\n          }\n          th:nth-of-type(6) {\n            width: 5%;\n          }\n          th:nth-of-type(7) {\n            width: 5%;\n          }\n          th:nth-of-type(8) {\n            width: 5%;\n          }\n        }\n      `\n      return (\n        <Table.ScrollView>\n          <FixedTable fixed>\n            <caption className=\"dnb-sr-only\">A Table Caption</caption>\n            <thead>\n              <Tr noWrap>\n                <Th>Column 1</Th>\n                <Th>Column 2</Th>\n                <Th>Column 3</Th>\n                <Th>Column 4</Th>\n                <Th>Column 5</Th>\n                <Th>Column 6</Th>\n                <Th>Column 7</Th>\n                <Th align=\"right\">Column 8</Th>\n              </Tr>\n            </thead>\n            <tbody>\n              <Tr>\n                <Td>Row 1</Td>\n                <Td>Row 1</Td>\n                <Td>Row 1</Td>\n                <Td>Row 1</Td>\n                <Td>Row 1</Td>\n                <Td>Row 1</Td>\n                <Td>Row 1</Td>\n                <Td align=\"right\">Row 1</Td>\n              </Tr>\n              <Tr>\n                <Td>Row 2</Td>\n                <Td>Row 2</Td>\n                <Td>Row 2</Td>\n                <Td>Row 2</Td>\n                <Td>Row 2</Td>\n                <Td>Row 2</Td>\n                <Td>Row 2</Td>\n                <Td align=\"right\">Row 2</Td>\n              </Tr>\n              <Tr>\n                <Td>Row 3</Td>\n                <Td>Row 3</Td>\n                <Td>Row 3</Td>\n                <Td>Row 3</Td>\n                <Td>Row 3</Td>\n                <Td>Row 3</Td>\n                <Td>Row 3</Td>\n                <Td align=\"right\">Row 3</Td>\n              </Tr>\n              <Tr>\n                <Td>Row 4</Td>\n                <Td>Row 4</Td>\n                <Td>Row 4</Td>\n                <Td>Row 4</Td>\n                <Td>Row 4</Td>\n                <Td>Row 4</Td>\n                <Td>Row 4</Td>\n                <Td align=\"right\">Row 4</Td>\n              </Tr>\n            </tbody>\n          </FixedTable>\n        </Table.ScrollView>\n      )\n    }}\n  </ComponentBox>\n)\n\nexport const TableStackedContainer = () => {\n  const isFullscreen = /data-visual-test|fullscreen/.test(\n    globalThis?.location?.href\n  )\n  return (\n    <ComponentBox\n      hideCode\n      data-visual-test=\"table-container\"\n      scope={{ TableContainer, isFullscreen }}\n    >\n      {() => {\n        const StyledContainer = styled(TableContainer)`\n          /* \n            Define the width of the THs so they are aligned accross tables.\n            A \"fixed\" table width is needed in order to align all tables to act with the same column widths.\n          */\n          &,\n          .dnb-table__scroll-view {\n            max-width: 70rem;\n          }\n          .dnb-table__container__body {\n            min-width: 800px;\n          }\n          table {\n            th:nth-of-type(1),\n            td:nth-of-type(1) {\n              width: 30%;\n            }\n            th:nth-of-type(2) {\n              width: 30%;\n            }\n            th:nth-of-type(3) {\n              width: 20%;\n            }\n            th:nth-of-type(4) {\n              width: 20%;\n            }\n          }\n        `\n        return (\n          <StyledContainer\n            aria-label=\"I contain two tables\"\n            bottom=\"large\"\n          >\n            <TableContainer.Head>\n              <H2>Header</H2>\n              <P top>Text</P>\n            </TableContainer.Head>\n\n            <TableContainer.Body>\n              <Table\n                fixed\n                border\n                sticky\n                stickyOffset={isFullscreen ? 0 : '3.5rem'}\n              >\n                <caption className=\"dnb-sr-only\">Table One</caption>\n                <thead>\n                  <Tr noWrap>\n                    <Th>\n                      I have a superscript{' '}\n                      <sup>\n                        <Anchor href=\"#unique-ref-id\">1</Anchor>\n                      </sup>\n                    </Th>\n                    <Th>Column 2</Th>\n                    <Th>Column 3</Th>\n                    <Th>Column 4</Th>\n                  </Tr>\n                </thead>\n                <tbody>\n                  <Tr>\n                    <Td>Row 1</Td>\n                    <Td>Row 1</Td>\n                    <Td>Row 1</Td>\n                    <Td>Row 1</Td>\n                  </Tr>\n                  <Tr>\n                    <Td>Row 2</Td>\n                    <Td>Row 2</Td>\n                    <Td>Row 2</Td>\n                    <Td>Row 2</Td>\n                  </Tr>\n                </tbody>\n              </Table>\n\n              <Table\n                fixed\n                border\n                sticky\n                stickyOffset={isFullscreen ? 0 : '3.5rem'}\n              >\n                <caption className=\"dnb-sr-only\">Table Two</caption>\n                <thead>\n                  <Tr noWrap>\n                    <Th>Column 1</Th>\n                    <Th>Column 2</Th>\n                    <Th>Column 3</Th>\n                    <Th>Column 4</Th>\n                  </Tr>\n                </thead>\n                <tbody>\n                  <Tr>\n                    <Td rowSpan={2}>Row 1</Td>\n                    <Td>Row 1</Td>\n                    <Td>Row 1</Td>\n                    <Td>Row 1</Td>\n                  </Tr>\n                  <Tr>\n                    <Td rowSpan={2}>Row 2</Td>\n                    <Td>Row 2</Td>\n                    <Td>Row 2</Td>\n                  </Tr>\n                  <Tr>\n                    <Td>Row 3</Td>\n                    <Td>Row 3</Td>\n                    <Td>Row 3</Td>\n                  </Tr>\n                </tbody>\n              </Table>\n\n              <Table fixed border>\n                <tbody>\n                  <Tr>\n                    <Th scope=\"rowgroup\" rowSpan={2}>\n                      Row Header Group\n                    </Th>\n                    <Td>Row 1</Td>\n                    <Td>Row 1</Td>\n                  </Tr>\n                  <Tr>\n                    <Td>Row 2</Td>\n                    <Td>Row 2</Td>\n                  </Tr>\n                </tbody>\n              </Table>\n            </TableContainer.Body>\n\n            <TableContainer.Foot>\n              <P id=\"unique-ref-id\">Footer</P>\n            </TableContainer.Foot>\n          </StyledContainer>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const TableContainerEmptyHeaderFooter = () => {\n  return (\n    <ComponentBox\n      hideCode\n      data-visual-test=\"table-container-empty\"\n      scope={{ TableContainer }}\n    >\n      {() => {\n        return (\n          <TableContainer bottom=\"large\">\n            <TableContainer.Body>\n              <Table border>\n                <thead>\n                  <Tr>\n                    <Th>Column 1</Th>\n                    <Th>Column 2</Th>\n                    <Th>Column 3</Th>\n                    <Th>Column 4</Th>\n                  </Tr>\n                </thead>\n                <tbody>\n                  <Tr>\n                    <Td>Row 1</Td>\n                    <Td>Row 1</Td>\n                    <Td>Row 1</Td>\n                    <Td>Row 1</Td>\n                  </Tr>\n                  <Tr>\n                    <Td>Row 2</Td>\n                    <Td>Row 2</Td>\n                    <Td>Row 2</Td>\n                    <Td>Row 2</Td>\n                  </Tr>\n                </tbody>\n              </Table>\n            </TableContainer.Body>\n          </TableContainer>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const TableClassHelpers = () => (\n  <ComponentBox hideCode data-visual-test=\"table-classes\">\n    <Table.ScrollView>\n      <table className=\"dnb-table\">\n        <thead>\n          <tr className=\"dnb-table__tr\">\n            <th className=\"dnb-table__th\">.dnb-table__th</th>\n            <th className=\"dnb-table__th dnb-table--sortable dnb-table--reversed\">\n              <Th.SortButton\n                text=\"dnb-table--reversed\"\n                title=\"dnb-table__th dnb-table--sortable dnb-table--reversed\"\n              />\n            </th>\n            <th className=\"dnb-table__th dnb-table--sortable dnb-table--active\">\n              <Th.SortButton\n                text=\"dnb-table--active\"\n                title=\"dnb-table__th dnb-table--sortable dnb-table--active\"\n              />\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr className=\"dnb-table__tr dnb-table__tr--even\">\n            <td colSpan={3} className=\"dnb-table__td\">\n              .dnb-table__tr--even{' > '}.dnb-table__td\n            </td>\n          </tr>\n          <tr className=\"dnb-table__tr dnb-table__tr--odd\">\n            <td colSpan={3} className=\"dnb-table__td\">\n              .dnb-table__tr--odd{' > '}.dnb-table__td\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </Table.ScrollView>\n  </ComponentBox>\n)\n\nexport const TableWithoutClasses = () => (\n  <ComponentBox hideCode data-visual-test=\"table-no-classes\">\n    <Table.ScrollView>\n      <table className=\"dnb-table\">\n        <thead>\n          <tr>\n            <th>Header</th>\n            <th className=\"dnb-table--sortable dnb-table--reversed\">\n              <Th.SortButton text=\"Sortable\" />\n            </th>\n            <th className=\"dnb-table--sortable dnb-table--active\">\n              <Th.SortButton text=\"Active\" />\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Row 1</td>\n            <td>Row 1</td>\n            <td>Row 1</td>\n          </tr>\n          <tr>\n            <td>Row 2</td>\n            <td>Row 2</td>\n            <td>Row 2</td>\n          </tr>\n          <tr>\n            <td>Row 3</td>\n            <td>Row 3</td>\n            <td>Row 3</td>\n          </tr>\n        </tbody>\n      </table>\n    </Table.ScrollView>\n  </ComponentBox>\n)\n\nexport const TableLongHeader = () => (\n  <ComponentBox hideCode data-visual-test=\"table-header\">\n    <Table.ScrollView>\n      <Table>\n        <caption className=\"dnb-sr-only\">A Table Caption</caption>\n        <thead>\n          <Tr>\n            <Th colSpan={2}>\n              Static long header senectus ornare convallis ut at erat\n              imperdiet commodo\n            </Th>\n            <Th sortable reversed>\n              <Th.SortButton\n                text=\"Sortable long header ridiculus laoreet turpis netus at vitae\"\n                title=\"Sort table column\"\n              />\n            </Th>\n            <Th align=\"right\" sortable active>\n              <Th.SortButton\n                text=\"Active and right aligned long header ridiculus laoreet turpis netus at vitae\"\n                title=\"Sort table column\"\n              />\n            </Th>\n          </Tr>\n        </thead>\n        <tbody>\n          <Tr>\n            <Td colSpan={4}>\n              <P>col span of 4</P>\n            </Td>\n          </Tr>\n        </tbody>\n      </Table>\n    </Table.ScrollView>\n  </ComponentBox>\n)\n\nexport const TableAccordion = () => (\n  <ComponentBox\n    hideCode\n    data-visual-test=\"table-accordion\"\n    scope={{ copyIcon, useCopyWithNotice }}\n  >\n    {() => {\n      const AccordionTable = ({ id, showCheckbox = false, ...props }) => {\n        const TdCheckbox = () => {\n          return <Checkbox label=\"Select row\" label_sr_only />\n        }\n        const TdInput = () => {\n          return <Input label=\"Label\" label_sr_only size={4} />\n        }\n        const Content = ({ shareId }) => {\n          const ref = React.useRef()\n          const { copy } = useCopyWithNotice()\n\n          const shareHandler = () => {\n            const url = new URL(location.href)\n            url.hash = '#' + shareId\n            copy(url.toString(), ref.current)\n          }\n\n          return (\n            <>\n              <Button top icon=\"bell\" variant=\"secondary\">\n                Ring the bell\n              </Button>\n\n              <Section top spacing>\n                <Dl>\n                  <Dt>Favorittfarge</Dt>\n                  <Dd>Grønn</Dd>\n                  <Dt>Favorittmat</Dt>\n                  <Dd>Taco</Dd>\n                </Dl>\n              </Section>\n\n              <Button\n                top\n                variant=\"tertiary\"\n                icon={copyIcon}\n                icon_position=\"left\"\n                on_click={shareHandler}\n                inner_ref={ref}\n              >\n                Copy link to this row\n              </Button>\n            </>\n          )\n        }\n\n        const Row = ({ nr }) => {\n          const shareId = id + '-' + nr\n          return (\n            <Tr id={shareId}>\n              <Td>{showCheckbox ? <TdCheckbox /> : 'Row ' + nr}</Td>\n              <Td>Row {nr}</Td>\n              <Td spacing=\"horizontal\">\n                <TdInput />\n              </Td>\n              <Td align=\"right\">Row {nr}</Td>\n\n              <Td.AccordionContent>\n                <Content shareId={shareId} />\n              </Td.AccordionContent>\n            </Tr>\n          )\n        }\n\n        return (\n          <Table accordion id={id} {...props}>\n            <caption className=\"dnb-sr-only\">A Table Caption</caption>\n\n            <thead>\n              <Tr>\n                <Th>Column A</Th>\n                <Th>Column B</Th>\n                <Th>Column C</Th>\n                <Th align=\"right\">Column D</Th>\n              </Tr>\n            </thead>\n\n            <tbody>\n              <Row nr=\"1\" />\n              <Row nr=\"2\" />\n              <Row nr=\"3\" />\n            </tbody>\n          </Table>\n        )\n      }\n\n      return (\n        <>\n          <Table.ScrollView>\n            <AccordionTable\n              id=\"table-1\"\n              showCheckbox\n              accordionChevronPlacement=\"end\"\n            />\n          </Table.ScrollView>\n\n          <Table.ScrollView top>\n            <AccordionTable id=\"table-2\" border outline size=\"medium\" />\n          </Table.ScrollView>\n        </>\n      )\n    }}\n  </ComponentBox>\n)\n\nexport const TableSticky = () => {\n  const isFullscreen = /data-visual-test|fullscreen/.test(\n    globalThis?.location?.href\n  )\n  const isVisualTest = globalThis.IS_TEST\n  return (\n    <ComponentBox hideCode scope={{ isFullscreen, isVisualTest }}>\n      <Table.ScrollView>\n        <Table\n          sticky={isVisualTest ? 'css-position' : true}\n          stickyOffset={isFullscreen ? 0 : '3.5rem'}\n        >\n          <caption className=\"dnb-sr-only\">A Table Caption</caption>\n          <thead>\n            <Tr>\n              <Th colSpan={2}>Header</Th>\n              <Th sortable reversed>\n                <Th.SortButton text=\"Sortable\" title=\"Sort table column\" />\n              </Th>\n              <Th sortable active>\n                <Th.SortButton text=\"Active\" title=\"Sort table column\" />\n              </Th>\n            </Tr>\n          </thead>\n          <tbody>\n            <Tr>\n              <Td>\n                <P>\n                  Row 1 <b>with p</b>\n                </P>\n              </Td>\n              <Td>\n                <Code>Row 1 with code</Code>\n              </Td>\n              <Td>\n                <span>Row 1 with span</span>\n              </Td>\n              <Td>Row 1</Td>\n            </Tr>\n            <Tr>\n              <Td colSpan={2}>Column which spans over two columns</Td>\n              <Td>Row 2</Td>\n              <Td>Row 2</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 3</Td>\n              <Td>Row 3</Td>\n              <Td>Row 3</Td>\n              <Td>Row 3</Td>\n            </Tr>\n          </tbody>\n          <tfoot>\n            <Tr>\n              <Td colSpan={3}>Footer</Td>\n              <Td>Sum</Td>\n            </Tr>\n          </tfoot>\n        </Table>\n      </Table.ScrollView>\n    </ComponentBox>\n  )\n}\n\nexport const TableStickyMaxHeight = () => {\n  return (\n    <ComponentBox hideCode data-visual-test=\"table-sticky\">\n      <Table.ScrollView style={{ maxHeight: '18rem' }}>\n        <Table sticky=\"css-position\">\n          <thead>\n            <Tr>\n              <Th>Column 1</Th>\n              <Th>Column 2</Th>\n              <Th>Column 3</Th>\n              <Th>Column 4</Th>\n            </Tr>\n          </thead>\n          <tbody>\n            <Tr>\n              <Td>Row 1</Td>\n              <Td>Row 1</Td>\n              <Td>Row 1</Td>\n              <Td>Row 1</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 2</Td>\n              <Td>Row 2</Td>\n              <Td>Row 2</Td>\n              <Td>Row 2</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 3</Td>\n              <Td>Row 3</Td>\n              <Td>Row 3</Td>\n              <Td>Row 3</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 4</Td>\n              <Td>Row 4</Td>\n              <Td>Row 4</Td>\n              <Td>Row 4</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 5</Td>\n              <Td>Row 5</Td>\n              <Td>Row 5</Td>\n              <Td>Row 5</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 6</Td>\n              <Td>Row 6</Td>\n              <Td>Row 6</Td>\n              <Td>Row 6</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 7</Td>\n              <Td>Row 7</Td>\n              <Td>Row 7</Td>\n              <Td>Row 7</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 8</Td>\n              <Td>Row 8</Td>\n              <Td>Row 8</Td>\n              <Td>Row 8</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 9</Td>\n              <Td>Row 9</Td>\n              <Td>Row 9</Td>\n              <Td>Row 9</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 10</Td>\n              <Td>Row 10</Td>\n              <Td>Row 10</Td>\n              <Td>Row 10</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 11</Td>\n              <Td>Row 11</Td>\n              <Td>Row 11</Td>\n              <Td>Row 11</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 12</Td>\n              <Td>Row 12</Td>\n              <Td>Row 12</Td>\n              <Td>Row 12</Td>\n            </Tr>\n          </tbody>\n        </Table>\n      </Table.ScrollView>\n    </ComponentBox>\n  )\n}\n\nexport function PaginationTable() {\n  return (\n    <ComponentBox hideCode>\n      {() => {\n        const TablePagination = () => {\n          const amountPerPage = 5\n          const [currentPage, setCurrentPage] = React.useState(1)\n          const [data] = React.useState(() => getDataFromAPI(0, 100))\n\n          return (\n            <Pagination\n              page_count={data.length / amountPerPage}\n              current_page={currentPage}\n              on_change={({ pageNumber }) => {\n                setCurrentPage(pageNumber)\n              }}\n            >\n              <MakeTable\n                currentPage={currentPage}\n                amountPerPage={amountPerPage}\n                data={data}\n              />\n            </Pagination>\n          )\n\n          function getDataFromAPI(offset, max) {\n            const list = []\n\n            for (let i = offset + 1, l = offset + max; i <= l; i++) {\n              list.push({\n                name: 'Row ' + i,\n              })\n            }\n\n            return list\n          }\n\n          function MakeTable({ currentPage, amountPerPage, data }) {\n            const offset = currentPage * amountPerPage - amountPerPage\n            const tableBody = data\n              .slice(offset, offset + amountPerPage)\n              .map(({ name }, i) => {\n                return (\n                  <Tr key={i}>\n                    <Td>{name}</Td>\n                  </Tr>\n                )\n              })\n\n            return (\n              <Table.ScrollView>\n                <Table>\n                  <thead>\n                    <Tr>\n                      <Th>Column</Th>\n                    </Tr>\n                  </thead>\n                  <tbody>{tableBody}</tbody>\n                </Table>\n              </Table.ScrollView>\n            )\n          }\n        }\n\n        return <TablePagination />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const TablesInOneContainer = () => (\n  <ComponentBox hideToolbar hidePreview scope={{ TableContainer }}>\n    <TableContainer>\n      <TableContainer.Head>\n        <H2>Heading</H2>\n      </TableContainer.Head>\n\n      <TableContainer.Body>\n        <Table>{'hei'}</Table>\n        <Table>{'hei'}</Table>\n      </TableContainer.Body>\n\n      <TableContainer.Foot>\n        <P>Footer</P>\n      </TableContainer.Foot>\n    </TableContainer>\n  </ComponentBox>\n)\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {TableVariantBasic, TableVariantComplex, TableRowScopeOnly, TableVariantFixed, TableStackedContainer, TableContainerEmptyHeaderFooter, TableClassHelpers, TableWithoutClasses, TableLongHeader, TableSticky, TableStickyMaxHeight, TableSizeMedium, TableSizeSmall, PaginationTable, TableAccordion, TablesInOneContainer} from 'Docs/uilib/components/table/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    strong: \"strong\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Basic table\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"NB:\"\n      }), \" In this example, the sort buttons do react on your input. But will not change the table data.\"]\n    }), \"\\n\", _jsx(TableVariantBasic, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Complex table\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can force a row to overwrite the automated odd/even counting by providing e.g. \", _jsx(_components.code, {\n        children: \"variant=\\\"even\\\"\"\n      }), \" to a \", _jsx(_components.code, {\n        children: \"<Tr />\"\n      }), \". You can use this in combination with \", _jsx(_components.code, {\n        children: \"rowSpan\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"NB:\"\n      }), \" The table header in the first column needs to have \", _jsx(_components.code, {\n        children: \"scope=\\\"row\\\"\"\n      }), \"!\"]\n    }), \"\\n\", _jsx(TableVariantComplex, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Row scope headers only\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This table has only \", _jsx(_components.code, {\n        children: \"scope=\\\"row\\\"\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"scope=\\\"rowgroup\\\"\"\n      }), \" headers – without the default \", _jsx(_components.code, {\n        children: \"scope=\\\"col\\\"\"\n      }), \".\"]\n    }), \"\\n\", _jsx(TableRowScopeOnly, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Fixed table\"\n    }), \"\\n\", _jsx(TableVariantFixed, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Medium and small sized\"\n    }), \"\\n\", _jsx(TableSizeMedium, {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"A \", _jsx(_components.code, {\n        children: \"small\"\n      }), \" sized table is only for special circumstances, where a lot of data needs to be shown on the screen at the same time.\"]\n    }), \"\\n\", _jsx(TableSizeSmall, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Table with accordion rows\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The second example uses both a \", _jsx(_components.code, {\n        children: \"border\"\n      }), \" and an \", _jsx(_components.code, {\n        children: \"outline\"\n      }), \".\"]\n    }), \"\\n\", _jsx(TableAccordion, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Table with sticky header\"\n    }), \"\\n\", _jsx(TableSticky, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Table with a max height\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A sticky table header with \", _jsx(_components.code, {\n        children: \"sticky=\\\"css-position\\\"\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"max-height\"\n      }), \" on the \", _jsx(_components.code, {\n        children: \"Table.ScrollView\"\n      }), \".\"]\n    }), \"\\n\", _jsx(TableStickyMaxHeight, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Several tables in one container\"\n    }), \"\\n\", _jsxs(\"details\", {\n      children: [_jsx(\"summary\", {\n        className: \"dnb-p\",\n        children: _jsx(_components.p, {\n          children: \"Show how the import and syntax is structured.\"\n        })\n      }), _jsx(TablesInOneContainer, {})]\n    }), \"\\n\", _jsx(TableStackedContainer, {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"With no (empty) \", _jsx(_components.code, {\n        children: \"head\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"foot\"\n      }), \" content.\"]\n    }), \"\\n\", _jsx(TableContainerEmptyHeaderFooter, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Table with long header text (wrapping)\"\n    }), \"\\n\", _jsx(TableLongHeader, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Table with pagination\"\n    }), \"\\n\", _jsx(PaginationTable, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Example usage without and with classes\"\n    }), \"\\n\", _jsx(TableWithoutClasses, {}), \"\\n\", _jsx(TableClassHelpers, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/** This file is auto generated by convertSvgToJsx.ts */\n\nimport React from 'react'\nconst copy = (props) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={16}\n    height={16}\n    fill=\"none\"\n    viewBox=\"0 0 16 16\"\n    {...props}\n  >\n    <path\n      stroke=\"#000\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={1.5}\n      d=\"m13.454 6.115-.909-.979m.91.98v1.017m0-1.018v1.018M5.134 15h7.32a1 1 0 0 0 1-1V7.133M6.53 1H3c-.552 0-1 .445-1 .998v9.85c0 .552.448.998 1 .998h6.364a1 1 0 0 0 1-1V4.962M6.53 1h.573a1 1 0 0 1 .723.309l2.26 2.363a1 1 0 0 1 .278.69v.6M6.53 1v2.962a1 1 0 0 0 1 1h2.834m3.09 2.17h-.909\"\n    />\n  </svg>\n)\nexport default copy\n"],"names":["TableContainer","props","spacingClasses","createSpacingClasses","validateDOMAttributes","ScrollView","content","Array","className","classnames","children","defaults","direction","modes","initialState","React","Object","acc","name","config","internalState","sortHandler","list","state","mode","opts","next","i","l","c","getNextMode","setState","activeSortName","reversed","active","TableVariantBasic","TableSizeMedium","TableSizeSmall","TableVariantComplex","TableRowScopeOnly","TableVariantFixed","TableStackedContainer","isFullscreen","test","globalThis","TableContainerEmptyHeaderFooter","TableClassHelpers","TableWithoutClasses","TableLongHeader","TableAccordion","TableSticky","isVisualTest","TableStickyMaxHeight","PaginationTable","TablesInOneContainer","_createMdxContent","_components","assign","h2","h3","p","strong","code","_provideComponents","components","_jsxs","_Fragment","_jsx","wrapper","MDXLayout","xmlns","width","height","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d"],"sourceRoot":""}