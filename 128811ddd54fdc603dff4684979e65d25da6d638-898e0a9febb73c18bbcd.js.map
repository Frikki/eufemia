{"version":3,"file":"128811ddd54fdc603dff4684979e65d25da6d638-898e0a9febb73c18bbcd.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/space/Examples.tsx"],"sourcesContent":["/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport styled from '@emotion/styled'\nimport { Space, Input, FormRow, Button, P, Code } from '@dnb/eufemia/src'\nimport { Provider } from '@dnb/eufemia/src/shared'\n\nexport const SpaceExamplesMethod1 = () => (\n  <TestStyles>\n    <ComponentBox\n      data-visual-test=\"spacing-method-space\"\n      scope={{ RedBox }}\n    >\n      <RedBox>\n        <Space top=\"large x-small\">\n          <Input label=\"Input:\" />\n        </Space>\n      </RedBox>\n    </ComponentBox>\n  </TestStyles>\n)\n\nexport const SpaceExamplesMethod2 = () => (\n  <TestStyles>\n    <ComponentBox data-visual-test=\"spacing-method-form-row\">\n      <FormRow>\n        <Input label=\"Input A:\" />\n      </FormRow>\n      <FormRow top=\"medium\">\n        <Input label=\"Input B:\" />\n      </FormRow>\n    </ComponentBox>\n  </TestStyles>\n)\n\nexport const SpaceExamplesMethod3 = () => (\n  <TestStyles>\n    <ComponentBox data-visual-test=\"spacing-method-component\">\n      <FormRow>\n        <Input label=\"Input A:\" right=\"small\" />\n        <Input label=\"Input B:\" />\n      </FormRow>\n    </ComponentBox>\n  </TestStyles>\n)\n\nexport const SpaceExampleMarginCollapse = () => (\n  <TestStyles>\n    <ComponentBox hideCode scope={{ RedBox, Vertical }}>\n      <Vertical>\n        <RedBox>\n          <Space bottom=\"small\">\n            <>\n              I have <code className=\"dnb-code\">bottom=\"small\"</code>\n            </>\n          </Space>\n        </RedBox>\n        <RedBox>\n          <Space top=\"large\">\n            <>\n              I have <code className=\"dnb-code\">top=\"large\"</code>\n            </>\n          </Space>\n        </RedBox>\n      </Vertical>\n    </ComponentBox>\n  </TestStyles>\n)\n\nexport const SpaceExampleMargins = () => (\n  <TestStyles>\n    <ComponentBox data-visual-test=\"spacing-margins\" hideCode>\n      <Space top=\"large x-small\" right=\"2.5\" bottom=\"2.5rem\" left=\"40px\">\n        <details>\n          <summary>\n            I have four <code className=\"dnb-code\">2.5rem</code> margins!\n          </summary>\n          And this are my CSS classes:{' '}\n          <code className=\"dnb-code\">\n            dnb-space dnb-space__top--large dnb-space__top--x-small\n            dnb-space__right--large dnb-space__right--x-small\n            dnb-space__bottom--large dnb-space__bottom--x-small\n            dnb-space__left--large dnb-space__left--x-small\n          </code>\n        </details>\n      </Space>\n    </ComponentBox>\n  </TestStyles>\n)\n\nexport const SpaceVisualTestPatterns = () => (\n  <TestStyles>\n    <ComponentBox\n      data-visual-test=\"spacing-patterns\"\n      scope={{ MagicBox, CustomStyle }}\n      hideCode\n    >\n      {() => {\n        const TestCase = (props) => {\n          return (\n            <CustomStyle {...props}>\n              {listOfBoxes.map((v) => (\n                <Space key={v} top={v}>\n                  <MagicBox />\n                </Space>\n              ))}\n            </CustomStyle>\n          )\n        }\n        const listOfBoxes = []\n        for (let i = 0, c = 0, l = 20; i <= l; i++) {\n          listOfBoxes.push(String(c))\n          c += 0.5\n        }\n        return (\n          <div className=\"spacing-patterns\">\n            <P bottom>\n              With <Code>dnb-core-style</Code>\n            </P>\n            <TestCase className=\"dnb-core-style\" />\n\n            <P top bottom>\n              Without\n            </P>\n            <TestCase />\n          </div>\n        )\n      }}\n    </ComponentBox>\n  </TestStyles>\n)\n\n/**\n * This test case exists because of the reset.css margin=0 for buttons\n */\nexport const SpaceVisualTestElements = () =>\n  !globalThis.IS_TEST ? null : (\n    <TestStyles>\n      <ComponentBox\n        data-visual-test=\"spacing-elements\"\n        scope={{ MagicBox, CustomStyle }}\n        hideCode\n      >\n        {() => {\n          const listOfBoxes = []\n          for (let i = 0, c = 0, l = 10; i <= l; i++) {\n            listOfBoxes.push(String(c))\n            c += 1\n          }\n          const TestCase = (props) => {\n            return (\n              <CustomStyle {...props}>\n                {listOfBoxes.map((v) => (\n                  <Button\n                    key={v}\n                    left=\"x-small\"\n                    top={v}\n                    size=\"small\"\n                    custom_content={<MagicBox />}\n                  />\n                ))}\n              </CustomStyle>\n            )\n          }\n          return (\n            <div className=\"spacing-elements\">\n              <P bottom>\n                With <Code>dnb-core-style</Code>\n              </P>\n              <TestCase className=\"dnb-core-style\" />\n\n              <P top bottom>\n                Without\n              </P>\n              <TestCase />\n            </div>\n          )\n        }}\n      </ComponentBox>\n    </TestStyles>\n  )\n\nexport const SpaceVisualTestReset = () =>\n  !globalThis.IS_TEST ? null : (\n    <ComponentBox data-visual-test=\"spacing-reset\">\n      {() => {\n        const BlueBox = styled.div`\n          display: inline-block;\n          padding: 0.5rem;\n          background: blue;\n          ul {\n            background: white;\n          }\n        `\n        return (\n          <BlueBox>\n            <ul className=\"dnb-space__reset dnb-space__top--small dnb-space__right--small dnb-space__bottom--small dnb-space__left--small\">\n              <li> </li>\n            </ul>\n          </BlueBox>\n        )\n      }}\n    </ComponentBox>\n  )\n\nconst TestStyles = styled.div`\n  /* make sure our input gets an explicit width, because of mac/linux rendering differences */\n  .dnb-input {\n    &__input {\n      width: 8rem;\n    }\n  }\n  [data-visual-test='spacing-margins'] {\n    display: flex;\n  }\n`\n\nconst CustomStyle = styled.div`\n  display: flex;\n  width: auto;\n  box-shadow: 0 0 0 1px var(--color-fire-red);\n  .dnb-input__input {\n    width: 10rem;\n  }\n`\nconst Vertical = styled.div`\n  display: inline-flex;\n  flex-direction: column;\n`\n\nconst RedBox = ({ children }) => {\n  return (\n    <CustomStyle>\n      <VisualSpace>{children}</VisualSpace>\n    </CustomStyle>\n  )\n}\nRedBox.propTypes = {\n  children: PropTypes.node,\n}\nRedBox.defaultProps = {\n  children: null,\n}\n\nconst Block = styled.div`\n  position: relative;\n\n  display: flex;\n  justify-content: center;\n\n  width: 1.5rem;\n  height: 1.5rem;\n\n  background-color: var(--color-mint-green);\n`\nconst Line = styled.div`\n  position: absolute;\n  bottom: 100%;\n\n  display: flex;\n  align-items: center;\n\n  width: 0.0625rem;\n  height: 100%;\n\n  background-color: var(--color-fire-red);\n  ${'' /* border-left: 0.0625rem dotted var(--color-fire-red); */}\n`\nconst MarginContainer = styled.div`\n  position: relative;\n`\nconst Margin = styled.div`\n  position: absolute;\n  bottom: 100%;\n\n  &.bottom {\n    top: 100%;\n    bottom: 0;\n  }\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 100%;\n  height: 100%;\n\n  background-color: rgba(213, 30, 149, 0.25);\n  ${'' /* border-left: 0.0625rem dotted var(--color-fire-red); */}\n`\nconst Label = styled.label`\n  display: block;\n  width: 1rem;\n  margin-left: 0.25rem;\n  font-size: calc(var(--font-size-basis) - 0.5rem);\n  text-align: center;\n  color: var(--color-black-80);\n`\n\nconst MagicBox = ({ label = null, ...rest }) => {\n  const ref = React.createRef<HTMLDivElement>()\n\n  const [spaceInRem, setLabel] = React.useState(label)\n  const [title, setTitle] = React.useState(null)\n\n  React.useEffect(() => {\n    let _isMounted = true\n    const init = () => {\n      if (_isMounted) {\n        try {\n          if (!label) {\n            const spaceInPixels = window\n              .getComputedStyle(ref.current.parentElement)\n              .getPropertyValue('margin-top')\n            const spaceInRem = `${parseFloat(spaceInPixels) / 16}`\n            setLabel(spaceInRem)\n\n            const title = ref.current.parentElement.getAttribute('class')\n            setTitle(title)\n          }\n        } catch (e) {\n          console.warn(e)\n        }\n      }\n    }\n\n    if (document.readyState === 'complete') {\n      init()\n    } else if (typeof window !== 'undefined') {\n      window.addEventListener('load', init)\n    }\n\n    return () => {\n      _isMounted = false\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('load', init)\n      }\n    }\n  }, [label, ref])\n\n  return (\n    <Block {...rest} ref={ref} title={title}>\n      <Line style={{ height: `${spaceInRem}rem` }} />\n      <Label>{spaceInRem}</Label>\n    </Block>\n  )\n}\nMagicBox.propTypes = {\n  label: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n    PropTypes.node,\n  ]),\n}\nMagicBox.defaultProps = {\n  label: null,\n}\n\nconst VisualSpace = ({ label = null, children, ...rest }) => {\n  const ref = React.createRef<HTMLDivElement>()\n\n  const [direction, setDirection] = React.useState('top')\n  const [spaceInRem, setLabel] = React.useState(label)\n  const [title, setTitle] = React.useState(null)\n\n  React.useEffect(() => {\n    if (!label) {\n      let _isMounted = true\n      const init = () => {\n        if (_isMounted) {\n          try {\n            const elem = ref.current\n            const style = window.getComputedStyle(elem.children[0])\n            const top = parseFloat(style.getPropertyValue('margin-top'))\n            const bottom = parseFloat(\n              style.getPropertyValue('margin-bottom')\n            )\n            let spaceInPixels = top\n\n            if (bottom > 0) {\n              spaceInPixels = bottom\n              setDirection('bottom')\n            }\n\n            const spaceInRem = `${spaceInPixels / 16}`\n            setLabel(spaceInRem)\n\n            const title = elem.parentElement.getAttribute('class')\n            setTitle(title)\n          } catch (e) {\n            console.warn(e)\n          }\n        }\n      }\n\n      if (document.readyState === 'complete') {\n        init()\n      } else if (typeof window !== 'undefined') {\n        window.addEventListener('load', init)\n      }\n\n      return () => {\n        _isMounted = false\n        if (typeof window !== 'undefined') {\n          window.removeEventListener('load', init)\n        }\n      }\n    }\n  }, [label, ref])\n\n  return (\n    <Space {...rest} title={title}>\n      <MarginContainer ref={ref}>\n        {children}\n        <Margin\n          style={{ height: `${spaceInRem}rem` }}\n          className={direction}\n        >\n          <Label>{spaceInRem}</Label>\n        </Margin>\n      </MarginContainer>\n    </Space>\n  )\n}\nVisualSpace.propTypes = {\n  label: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n    PropTypes.node,\n  ]),\n  children: PropTypes.node,\n}\nVisualSpace.defaultProps = {\n  label: null,\n  children: null,\n}\n\nexport { MagicBox, VisualSpace }\n\nexport const SpaceExamplesSameResult1 = () => (\n  <ComponentBox hidePreview hideToolbar>\n    {/* All of these methods will result in the same spacing */}\n    <Space top=\"large x-small\" right=\"2.5\" bottom=\"2.5rem\" left=\"40px\" />\n  </ComponentBox>\n)\n\nexport const SpaceExamplesSameResult2 = () => (\n  <ComponentBox hidePreview hideToolbar>\n    {/* All of these methods will result in the same spacing */}\n    <Space\n      space={{\n        top: 'large x-small',\n        right: '2.5',\n        bottom: '2.5rem',\n        left: '40px',\n      }}\n    />\n  </ComponentBox>\n)\n\nexport const SpaceExamplesComponents = () => (\n  <ComponentBox hidePreview hideToolbar>\n    <Button top=\"large x-small medium\" />\n    <Button space={{ top: 'large x-small medium' }} />\n  </ComponentBox>\n)\n\nexport const SpaceExamplesShorthand = () => (\n  <ComponentBox hidePreview hideToolbar>\n    {/* Equivalent to top=\"small\" */}\n    <Button top />\n    {/* Equivalent to top=\"small\" right=\"small\" bottom=\"small\" left=\"small\" */}\n    <Button space />\n  </ComponentBox>\n)\n\nexport const SpaceExamplesFourDirections = () => (\n  <ComponentBox hidePreview hideToolbar>\n    <Button space=\"large x-small medium\" />\n  </ComponentBox>\n)\n\nexport const SpaceExampleProvider = () => (\n  <ComponentBox scope={{ Provider }} hidePreview>\n    <Provider space={{ no_collapse: true }}>\n      <Space>I do not collapse</Space>\n      <Space>I do not collapse</Space>\n    </Provider>\n  </ComponentBox>\n)\n"],"names":["SpaceExamplesMethod1","SpaceExamplesMethod2","SpaceExamplesMethod3","SpaceExampleMarginCollapse","SpaceExampleMargins","SpaceVisualTestPatterns","SpaceVisualTestElements","globalThis","SpaceVisualTestReset","TestStyles","CustomStyle","Vertical","RedBox","children","Block","Line","MarginContainer","Margin","Label","MagicBox","label","ref","React","spaceInRem","title","_isMounted","init","spaceInPixels","window","parseFloat","setLabel","setTitle","console","document","style","height","VisualSpace","direction","elem","top","bottom","setDirection","className","SpaceExamplesSameResult1","SpaceExamplesSameResult2","SpaceExamplesComponents","SpaceExamplesShorthand","SpaceExamplesFourDirections","SpaceExampleProvider"],"sourceRoot":""}