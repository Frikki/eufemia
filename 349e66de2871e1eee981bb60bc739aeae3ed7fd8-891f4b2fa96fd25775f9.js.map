{"version":3,"file":"349e66de2871e1eee981bb60bc739aeae3ed7fd8-891f4b2fa96fd25775f9.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/icons/dnb/trash.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/form-row/FormRow.js","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/form-set/FormSet.js","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/radio/RadioGroupContext.js","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/radio/RadioGroup.js","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/radio/Radio.js","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/textarea/Textarea.js","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/toggle-button/ToggleButtonGroupContext.js","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/toggle-button/ToggleButtonGroup.js","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/toggle-button/ToggleButton.js"],"sourcesContent":["/** This file is auto generated by convertSvgToJsx.ts */\n\nimport React from 'react'\nconst trash = (props) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={16}\n    height={16}\n    fill=\"none\"\n    viewBox=\"0 0 16 16\"\n    {...props}\n  >\n    <path\n      stroke=\"#000\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={1.5}\n      d=\"M9.5 11.5v-5m-3 5v-5M1 3h14m-2.423 11.083a1 1 0 0 1-.997.917H4.42a1 1 0 0 1-.996-.917L2.5 3h11l-.923 11.083ZM9.5 1h-3a1 1 0 0 0-1 1v1h5V2a1 1 0 0 0-1-1Z\"\n    />\n  </svg>\n)\nexport default trash\n","/**\n * Web FormRow Component\n *\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {\n  extend,\n  extendPropsWithContextInClassComponent,\n  isTrue,\n  makeUniqueId,\n  validateDOMAttributes,\n} from '../../shared/component-helper'\nimport AlignmentHelper from '../../shared/AlignmentHelper'\n\nimport Context from '../../shared/Context'\nimport FormLabel from '../form-label/FormLabel'\nimport Section from '../section/Section'\nimport {\n  spacingPropTypes,\n  createSpacingClasses,\n} from '../space/SpacingHelper'\n\nexport const formRowPropTypes = {\n  id: PropTypes.string,\n  label: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n    PropTypes.node,\n  ]),\n  label_direction: PropTypes.oneOf(['vertical', 'horizontal']),\n  label_sr_only: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  label_id: PropTypes.string,\n  label_class: PropTypes.string,\n  no_label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  no_fieldset: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  locale: PropTypes.string,\n  wrap: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  direction: PropTypes.oneOf(['vertical', 'horizontal']),\n  vertical: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  centered: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  section_style: PropTypes.string,\n  section_spacing: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  globalStatus: PropTypes.shape({\n    id: PropTypes.string,\n    message: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  }),\n  responsive: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  skeleton: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  class: PropTypes.string,\n\n  skipContentWrapperIfNested: PropTypes.bool,\n\n  ...spacingPropTypes,\n\n  className: PropTypes.string,\n  children: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n    PropTypes.node,\n  ]),\n}\n\nexport const formRowDefaultProps = {\n  id: null,\n  label: null,\n  label_direction: null,\n  label_sr_only: null,\n  label_id: null,\n  label_class: null,\n  no_label: false,\n  no_fieldset: null,\n  locale: null,\n  wrap: null,\n  direction: null,\n  vertical: null,\n  centered: null,\n  section_style: null,\n  section_spacing: null,\n  globalStatus: null,\n  responsive: null,\n  disabled: null,\n  skeleton: null,\n  class: null,\n\n  skipContentWrapperIfNested: false,\n  className: null,\n  children: null,\n}\n\nexport default class FormRow extends React.PureComponent {\n  static contextType = Context\n\n  static propTypes = {\n    ...formRowPropTypes,\n  }\n\n  static defaultProps = {\n    ...formRowDefaultProps,\n  }\n\n  static getContent(props) {\n    let label = null\n    let children =\n      typeof props.children === 'function'\n        ? props.children(props)\n        : props.children\n\n    if (Array.isArray(props.children)) {\n      children = children.reduce((pV, cV) => {\n        if (cV && cV.type && cV.type.name === 'FormLabel') {\n          label = cV.props.children\n        } else {\n          pV.push(cV)\n        }\n        return pV\n      }, [])\n    }\n\n    return { label, children }\n  }\n\n  constructor(props) {\n    super(props)\n    this._id = props.id || makeUniqueId() // cause we need an id anyway\n\n    // We may consider to use this later to check if we are inside FormSet\n    // this.isInsideFormSet =\n    //   context.FormRow && context.FormRow.isInsideFormSet\n  }\n\n  render() {\n    // use only the props from context, who are available here anyway\n    const props = extendPropsWithContextInClassComponent(\n      this.props,\n      FormRow.defaultProps,\n      this.context.FormRow // nested FormRow\n    )\n\n    const {\n      label_direction,\n      label_sr_only,\n      label_id,\n      label_class,\n      no_fieldset,\n      no_label,\n      locale,\n      direction,\n      vertical,\n      centered,\n      section_style,\n      section_spacing,\n      globalStatus,\n      responsive,\n      disabled,\n      skeleton,\n      wrap,\n      className,\n      class: _className,\n      skipContentWrapperIfNested,\n\n      id: _id, // eslint-disable-line\n      label: _label, // eslint-disable-line\n\n      ...attributes\n    } = props\n\n    let { label } = props\n\n    const isNested =\n      this.context.FormRow && this.context.FormRow.itsMeAgain\n\n    // in case we have a label already, we split this out and use this one instead\n    const { label: nestedLabel, children } = FormRow.getContent(this.props)\n    if (!label && nestedLabel) {\n      label = nestedLabel\n    }\n    const hasLabel =\n      (typeof label === 'string' && label.length > 0) || label\n        ? true\n        : false\n\n    const id = this._id\n    const params = {\n      className: classnames(\n        'dnb-form-row',\n        (isTrue(vertical) || direction) &&\n          `dnb-form-row--${isTrue(vertical) ? 'vertical' : direction}`,\n        (isTrue(vertical) || label_direction) &&\n          `dnb-form-row--${\n            isTrue(vertical) ? 'vertical' : label_direction\n          }-label`, // <-- has label\n        centered && 'dnb-form-row--centered',\n        isNested && 'dnb-form-row--nested',\n        createSpacingClasses(props),\n        className,\n        _className\n      ),\n      ...attributes,\n    }\n\n    // also used for code markup simulation\n    validateDOMAttributes(this.props, params)\n\n    const providerContext = extend(this.context, {\n      locale: locale ? locale : this.context.locale,\n      FormRow: {\n        useId: () => {\n          if (this.isIsUsed) {\n            // make a new ID, as we used one\n            return makeUniqueId() // cause we need an id anyway\n          }\n          this.isIsUsed = true\n          return id\n        },\n        itsMeAgain: true,\n        hasLabel,\n        globalStatus,\n        direction,\n        vertical,\n        label_direction: isTrue(vertical) ? 'vertical' : label_direction,\n        responsive,\n        disabled,\n        skeleton,\n      },\n    })\n\n    const useFieldset = !isTrue(no_fieldset) && hasLabel\n\n    return (\n      <Context.Provider value={providerContext}>\n        <Fieldset useFieldset={useFieldset}>\n          <Section\n            style_type={section_style || 'transparent'}\n            spacing={section_spacing}\n            element=\"div\"\n            {...params}\n          >\n            <AlignmentHelper />\n\n            {label && (\n              <FormLabel\n                className={classnames('dnb-form-row__label', label_class)}\n                id={label_id ? label_id : id + '-label'}\n                for_id={useFieldset ? null : id} // we don't use for_id, because we don't have a single element to target to\n                text={label}\n                element={useFieldset ? 'legend' : 'label'}\n                label_direction={label_direction}\n                sr_only={label_sr_only}\n                disabled={disabled}\n                skeleton={skeleton}\n              />\n            )}\n\n            {isTrue(no_label) && (\n              <span\n                className=\"dnb-form-label dnb-form-row__label-dummy\"\n                aria-hidden\n              />\n            )}\n\n            {isNested && skipContentWrapperIfNested ? (\n              children\n            ) : (\n              <div\n                className={classnames(\n                  'dnb-form-row__content',\n                  isTrue(wrap) && 'dnb-form-row__content--wrap',\n                  label && !isTrue(vertical) && direction !== 'vertical',\n                  responsive && 'dnb-responsive-component'\n                )}\n              >\n                {children}\n              </div>\n            )}\n          </Section>\n        </Fieldset>\n      </Context.Provider>\n    )\n  }\n}\n\nconst Fieldset = ({\n  useFieldset,\n  children,\n  className = null,\n  ...props\n}) => {\n  if (useFieldset) {\n    return (\n      <fieldset\n        className={classnames('dnb-form-row__fieldset', className)}\n        {...props}\n      >\n        {children}\n      </fieldset>\n    )\n  }\n  return (\n    <div\n      className={classnames('dnb-form-row__fieldset', className)}\n      {...props}\n    >\n      {children}\n    </div>\n  )\n}\n\n// docs (or use ptd): https://github.com/facebook/prop-types#usage\nFieldset.propTypes = {\n  children: PropTypes.node,\n  useFieldset: PropTypes.bool,\n  className: PropTypes.string,\n}\nFieldset.defaultProps = {\n  children: null,\n  useFieldset: false,\n  className: null,\n}\n","/**\n * Web FormSet Component\n *\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {\n  isTrue,\n  makeUniqueId,\n  extend,\n  extendPropsWithContextInClassComponent,\n  validateDOMAttributes,\n  processChildren,\n  dispatchCustomElementEvent,\n} from '../../shared/component-helper'\nimport { createSpacingClasses } from '../space/SpacingHelper'\nimport Context from '../../shared/Context'\nimport { formRowDefaultProps, formRowPropTypes } from '../form-row/FormRow'\n\nexport default class FormSet extends React.PureComponent {\n  static contextType = Context\n\n  static propTypes = {\n    element: PropTypes.string,\n    no_form: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    skeleton: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    prevent_submit: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n    ]),\n\n    ...formRowPropTypes,\n\n    on_submit: PropTypes.func,\n  }\n\n  static defaultProps = {\n    element: 'form',\n    no_form: false,\n    disabled: null,\n    skeleton: null,\n    prevent_submit: false,\n\n    on_submit: null,\n  }\n\n  static getContent(props) {\n    return processChildren(props)\n  }\n\n  constructor(props) {\n    super(props)\n    this._id = props.id || makeUniqueId() // cause we need an id anyway\n  }\n\n  onSubmitHandler = (event) => {\n    const { prevent_submit } = this.props\n    if (isTrue(prevent_submit)) {\n      event.preventDefault()\n    }\n    dispatchCustomElementEvent(this, 'on_submit', { event })\n  }\n\n  render() {\n    // use only the props from context, who are available here anyway\n    const props = extendPropsWithContextInClassComponent(\n      this.props,\n      FormSet.defaultProps,\n      this.context.FormSet\n    )\n\n    const {\n      element,\n      locale,\n      no_form,\n      prevent_submit, // eslint-disable-line\n      id, // eslint-disable-line\n      className,\n      class: _className,\n\n      ...rest\n    } = props\n\n    const allowedProps = Object.entries(rest).reduce((acc, [k, v]) => {\n      if (\n        typeof formRowDefaultProps[k] !== 'undefined' &&\n        k !== 'id' &&\n        k !== 'children' &&\n        k !== 'label'\n      ) {\n        acc[k] = v\n      }\n      return acc\n    }, {})\n    const attributes = Object.entries(rest).reduce((acc, [k, v]) => {\n      if (typeof allowedProps[k] === 'undefined' && k !== 'children') {\n        acc[k] = v\n      }\n      return acc\n    }, {})\n\n    const params = {\n      className: classnames(\n        'dnb-form-set',\n        createSpacingClasses(this.props),\n        className,\n        _className\n      ),\n      ...attributes,\n    }\n\n    if (!isTrue(no_form)) {\n      params.onSubmit = this.onSubmitHandler\n    }\n\n    // also used for code markup simulation\n    validateDOMAttributes(this.props, params)\n\n    const content = FormSet.getContent(this.props)\n\n    const providerContext = extend(this.context, {\n      locale: locale ? locale : this.context.locale,\n      FormRow: allowedProps,\n      // isInsideFormSet: true // We may consider to use this later to check if we are inside FormSet\n    })\n\n    const Element = isTrue(no_form) ? 'div' : element\n\n    return (\n      <Context.Provider value={providerContext}>\n        <Element {...params}>{content}</Element>\n      </Context.Provider>\n    )\n  }\n}\n","/**\n * Web RadioGroup Context\n *\n */\n\nimport React from 'react'\n\nconst RadioGroupContext = React.createContext({})\n\nexport default RadioGroupContext\n","/**\n * Web RadioGroup Component\n *\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {\n  extendPropsWithContextInClassComponent,\n  makeUniqueId,\n  validateDOMAttributes,\n  getStatusState,\n  combineDescribedBy,\n  combineLabelledBy,\n  dispatchCustomElementEvent,\n} from '../../shared/component-helper'\nimport { includeValidProps } from '../form-row/FormRowHelpers'\nimport {\n  spacingPropTypes,\n  createSpacingClasses,\n} from '../space/SpacingHelper'\nimport AlignmentHelper from '../../shared/AlignmentHelper'\nimport FormRow from '../form-row/FormRow'\nimport FormStatus from '../form-status/FormStatus'\nimport Context from '../../shared/Context'\nimport Suffix from '../../shared/helpers/Suffix'\nimport RadioGroupContext from './RadioGroupContext'\n\n/**\n * The radio component is our enhancement of the classic radio button. It acts like a radio. Example: On/off, yes/no.\n */\nexport default class RadioGroup extends React.PureComponent {\n  static contextType = Context\n\n  static propTypes = {\n    label: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    label_direction: PropTypes.oneOf(['horizontal', 'vertical']),\n    label_sr_only: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    label_position: PropTypes.oneOf(['left', 'right']),\n    title: PropTypes.string,\n    no_fieldset: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    skeleton: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    id: PropTypes.string,\n    name: PropTypes.string,\n    size: PropTypes.oneOf(['default', 'medium', 'large']),\n    status: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    status_state: PropTypes.string,\n    status_props: PropTypes.object,\n    status_no_animation: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n    ]),\n    globalStatus: PropTypes.shape({\n      id: PropTypes.string,\n      message: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    }),\n    suffix: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    layout_direction: PropTypes.oneOf(['column', 'row']),\n    vertical: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    value: PropTypes.string,\n    attributes: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    ...spacingPropTypes,\n\n    class: PropTypes.string,\n    className: PropTypes.string,\n    children: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n\n    on_change: PropTypes.func,\n  }\n\n  static defaultProps = {\n    label: null,\n    label_direction: null,\n    label_sr_only: null,\n    label_position: null,\n    title: null,\n    no_fieldset: null,\n    disabled: null,\n    skeleton: null,\n    id: null,\n    name: null,\n    size: null,\n    status: null,\n    status_state: 'error',\n    status_props: null,\n    status_no_animation: null,\n    globalStatus: null,\n    suffix: null,\n    vertical: null,\n    layout_direction: 'row',\n    value: undefined,\n    attributes: null,\n    class: null,\n\n    className: null,\n    children: null,\n\n    on_change: null,\n  }\n\n  static parseChecked = (state) => /true|on/.test(String(state))\n\n  static getDerivedStateFromProps(props, state) {\n    if (state._listenForPropChanges) {\n      if (props.value !== state._value) {\n        state.value = props.value\n      }\n      if (typeof props.value !== 'undefined') {\n        state._value = props.value\n      }\n    }\n    state._listenForPropChanges = true\n\n    return state\n  }\n\n  constructor(props) {\n    super(props)\n    this._refInput = React.createRef()\n    this._id = props.id || makeUniqueId() // cause we need an id anyway\n    this._name = props.name || this._id\n    this.state = {\n      _listenForPropChanges: true,\n    }\n  }\n\n  onChangeHandler = ({ value, event }) => {\n    this.setState({ value, _listenForPropChanges: false })\n    dispatchCustomElementEvent(this, 'on_change', {\n      value,\n      event,\n    })\n  }\n\n  render() {\n    // use only the props from context, who are available here anyway\n    const props = extendPropsWithContextInClassComponent(\n      this.props,\n      RadioGroup.defaultProps,\n      includeValidProps(this.context.FormRow),\n      this.context.RadioGroup\n    )\n\n    const {\n      status,\n      status_state,\n      status_props,\n      status_no_animation,\n      globalStatus,\n      suffix,\n      label,\n      label_direction,\n      label_sr_only,\n      label_position,\n      vertical,\n      layout_direction,\n      no_fieldset,\n      size,\n      disabled,\n      skeleton,\n      className,\n      class: _className,\n\n      id: _id, // eslint-disable-line\n      name: _name, // eslint-disable-line\n      value: _value, // eslint-disable-line\n      children, // eslint-disable-line\n      on_change, // eslint-disable-line\n\n      ...rest\n    } = props\n\n    const { value } = this.state\n\n    const id = this._id\n    const showStatus = getStatusState(status)\n\n    const classes = classnames(\n      'dnb-radio-group',\n      status && `dnb-radio-group__status--${status_state}`,\n      `dnb-radio-group--${layout_direction}`,\n      'dnb-form-component',\n      createSpacingClasses(props),\n      className,\n      _className\n    )\n\n    const params = {\n      ...rest,\n    }\n\n    if (showStatus || suffix) {\n      params['aria-describedby'] = combineDescribedBy(\n        params,\n        showStatus ? id + '-status' : null,\n        suffix ? id + '-suffix' : null\n      )\n    }\n    if (label) {\n      params['aria-labelledby'] = combineLabelledBy(params, id + '-label')\n    }\n\n    // also used for code markup simulation\n    validateDOMAttributes(this.props, params)\n\n    const context = {\n      name: this._name,\n      value,\n      size,\n      disabled,\n      label_position,\n      onChange: this.onChangeHandler,\n    }\n\n    const formRowParams = {\n      id,\n      label,\n      label_id: id + '-label', // send the id along, so the FormRow component can use it\n      label_direction,\n      label_sr_only,\n      direction: label_direction,\n      vertical,\n      disabled,\n      skeleton,\n      no_fieldset,\n      skipContentWrapperIfNested: true,\n    }\n\n    return (\n      <RadioGroupContext.Provider value={context}>\n        <div className={classes}>\n          <AlignmentHelper />\n          <FormRow {...formRowParams}>\n            <span\n              id={id}\n              className=\"dnb-radio-group__shell\"\n              role=\"radiogroup\"\n              {...params}\n            >\n              {children}\n\n              {suffix && (\n                <Suffix\n                  className=\"dnb-radio-group__suffix\"\n                  id={id + '-suffix'} // used for \"aria-describedby\"\n                  context={props}\n                >\n                  {suffix}\n                </Suffix>\n              )}\n\n              <FormStatus\n                show={showStatus}\n                id={id + '-form-status'}\n                globalStatus={globalStatus}\n                label={label}\n                text={status}\n                state={status_state}\n                text_id={id + '-status'} // used for \"aria-describedby\"\n                width_selector={id + ', ' + id + '-label'}\n                no_animation={status_no_animation}\n                skeleton={skeleton}\n                {...status_props}\n              />\n            </span>\n          </FormRow>\n        </div>\n      </RadioGroupContext.Provider>\n    )\n  }\n}\n","/**\n * Web Radio Component\n *\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport keycode from 'keycode'\nimport {\n  isTrue,\n  makeUniqueId,\n  extendPropsWithContextInClassComponent,\n  validateDOMAttributes,\n  getStatusState,\n  combineDescribedBy,\n  dispatchCustomElementEvent,\n} from '../../shared/component-helper'\nimport AlignmentHelper from '../../shared/AlignmentHelper'\nimport {\n  spacingPropTypes,\n  createSpacingClasses,\n} from '../space/SpacingHelper'\nimport {\n  skeletonDOMAttributes,\n  createSkeletonClass,\n} from '../skeleton/SkeletonHelper'\n\nimport FormLabel from '../form-label/FormLabel'\nimport FormStatus from '../form-status/FormStatus'\nimport RadioGroup from './RadioGroup'\nimport RadioGroupContext from './RadioGroupContext'\nimport Context from '../../shared/Context'\nimport Suffix from '../../shared/helpers/Suffix'\nimport { includeValidProps } from '../form-row/FormRowHelpers'\n\n/**\n * The radio component is our enhancement of the classic radio button.\n */\nexport default class Radio extends React.PureComponent {\n  static contextType = RadioGroupContext\n\n  static propTypes = {\n    label: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    label_sr_only: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    label_position: PropTypes.oneOf(['left', 'right']),\n    checked: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    id: PropTypes.string,\n    element: PropTypes.node,\n    group: PropTypes.string,\n    size: PropTypes.oneOf(['default', 'medium', 'large']),\n    status: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    status_state: PropTypes.string,\n    status_props: PropTypes.object,\n    status_no_animation: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n    ]),\n    globalStatus: PropTypes.shape({\n      id: PropTypes.string,\n      message: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    }),\n    suffix: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    value: PropTypes.string,\n    attributes: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    skeleton: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    readOnly: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n\n    ...spacingPropTypes,\n\n    class: PropTypes.string,\n    className: PropTypes.string,\n    children: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n    on_change: PropTypes.func,\n    on_state_update: PropTypes.func,\n  }\n\n  static defaultProps = {\n    label: null,\n    label_sr_only: null,\n    label_position: null,\n    checked: null,\n    disabled: null,\n    id: null,\n    size: null,\n    element: 'input',\n    group: null,\n    status: null,\n    status_state: 'error',\n    status_props: null,\n    status_no_animation: null,\n    globalStatus: null,\n    suffix: null,\n    value: '',\n    attributes: null,\n    readOnly: false,\n    skeleton: null,\n    class: null,\n\n    className: null,\n    children: null,\n\n    on_change: null,\n    on_state_update: null,\n  }\n\n  static Group = RadioGroup\n\n  static parseChecked = (state) => /true|on/.test(String(state))\n\n  static getDerivedStateFromProps(props, state) {\n    if (state._listenForPropChanges) {\n      if (props.checked !== state._checked) {\n        state.checked = Radio.parseChecked(props.checked)\n      }\n    }\n    state._listenForPropChanges = true\n\n    if (state.checked !== state.__checked) {\n      dispatchCustomElementEvent({ props }, 'on_state_update', {\n        checked: state.checked,\n      })\n    }\n\n    state._checked = props.checked\n    state.__checked = state.checked\n\n    return state\n  }\n\n  constructor(props) {\n    super(props)\n    this._refInput = React.createRef()\n    this._id = props.id || makeUniqueId() // cause we need an id anyway\n    this.state = {\n      _listenForPropChanges: true,\n    }\n  }\n\n  onKeyDownHandler = (event) => {\n    const key = keycode(event)\n    // only have key support if there is only a single radio\n    if (this.isInNoGroup()) {\n      switch (key) {\n        case 'enter':\n          this.onChangeHandler(event)\n          break\n      }\n    } else if (this.isContextGroupOrSingle()) {\n      switch (key) {\n        case 'space':\n        case 'enter': {\n          const { value } = this.context\n          if (value !== null && typeof value !== 'undefined') {\n            event.preventDefault()\n          }\n          if (key === 'enter') {\n            const checked = !this.state.checked\n            this.setState({ checked, _listenForPropChanges: false })\n          }\n          break\n        }\n      }\n    } else {\n      // else we only use the native support, and don't want space support\n      // because only arrow keys has to be used\n      switch (key) {\n        case 'space': {\n          event.preventDefault()\n          break\n        }\n      }\n    }\n    dispatchCustomElementEvent(this, 'on_key_down', { event })\n  }\n\n  onChangeHandler = (_event) => {\n    const event = _event\n    if (isTrue(this.props.readOnly)) {\n      return event.preventDefault()\n    }\n    const value = event.target.value\n    const checked = !this.state.checked\n\n    // delay in case we have a props group only\n    if (this.isPlainGroup()) {\n      // in case we have a false \"hasContext\" but a \"group\"\n      // then we have to use a delay, to overwrite the uncontrolled state\n      setTimeout(() => {\n        this.setState({ checked, _listenForPropChanges: false }, () =>\n          this.callOnChange({ value, checked, event })\n        )\n      }, 1)\n    } else {\n      this.setState({ checked, _listenForPropChanges: false })\n      this.callOnChange({ value, checked, event })\n    }\n  }\n\n  // only support on change if there is either:\n  // 1. context group usage\n  // 2. or a single, no group usage\n  isContextGroupOrSingle = () =>\n    typeof this.context.value !== 'undefined' && !this.props.group\n  isPlainGroup = () =>\n    typeof this.context.value === 'undefined' && this.props.group\n  isInNoGroup = () =>\n    typeof this.context.value === 'undefined' && !this.props.group\n\n  onClickHandler = (event) => {\n    if (isTrue(this.props.readOnly)) {\n      return event.preventDefault()\n    }\n    // only have click support if there are more plain radio\n    if (!this.isPlainGroup()) {\n      return\n    }\n    const value = event.target.value\n    const checked = event.target.checked\n    this.callOnChange({ value, checked, event })\n  }\n\n  callOnChange = ({ value, checked, event }) => {\n    const { group } = this.props\n    if (this.context.onChange) {\n      this.context.onChange({\n        value,\n      })\n    }\n    dispatchCustomElementEvent(this, 'on_change', {\n      group,\n      checked,\n      value,\n      event,\n    })\n\n    // help firefox and safari to have an correct state after a click\n    if (this._refInput.current) {\n      this._refInput.current.focus()\n    }\n  }\n\n  render() {\n    return (\n      <Context.Consumer>\n        {(context) => {\n          // from internal context\n          const contextProps = extendPropsWithContextInClassComponent(\n            this.props,\n            Radio.defaultProps,\n            this.context\n          )\n\n          // use only the props from context, who are available here anyway\n          const props = extendPropsWithContextInClassComponent(\n            this.props,\n            Radio.defaultProps,\n            contextProps,\n            { skeleton: context?.skeleton },\n            includeValidProps(context.FormRow),\n            context.Radio\n          )\n\n          const {\n            status,\n            status_state,\n            status_props,\n            status_no_animation,\n            globalStatus,\n            suffix,\n            element,\n            label,\n            label_sr_only,\n            label_position,\n            size,\n            readOnly,\n            skeleton,\n            className,\n            class: _className,\n            id: _id, // eslint-disable-line\n            group: _group, // eslint-disable-line\n            value: _value, // eslint-disable-line\n            checked: _checked, // eslint-disable-line\n            disabled: _disabled, // eslint-disable-line\n            children, // eslint-disable-line\n            on_change, // eslint-disable-line\n            on_state_update, // eslint-disable-line\n\n            ...rest\n          } = props\n\n          let { checked } = this.state\n          let { value, group, disabled } = props // get it from context also\n\n          const hasContext = typeof this.context.name !== 'undefined'\n\n          if (hasContext) {\n            if (typeof this.context.value !== 'undefined') {\n              checked = this.context.value === value\n            }\n            group = this.context.name\n            if (isTrue(this.context.disabled) && disabled !== false) {\n              disabled = true\n            }\n          } else if (typeof rest.name !== 'undefined') {\n            group = rest.name\n          }\n\n          const id = this._id\n          const showStatus = getStatusState(status)\n\n          const mainParams = {\n            className: classnames(\n              'dnb-radio',\n              status && `dnb-radio__status--${status_state}`,\n              size && `dnb-radio--${size}`,\n              label &&\n                `dnb-radio--label-position-${label_position || 'right'}`,\n              createSpacingClasses(props),\n              className,\n              _className\n            ),\n          }\n\n          let inputParams = {\n            role: hasContext || group ? 'radio' : null,\n            type: hasContext || group ? 'radio' : 'checkbox', // overwriting the type\n          }\n\n          if (!group) {\n            inputParams.type = 'checkbox'\n            inputParams.role = 'radio' // breaks axe test\n          }\n\n          if (showStatus || suffix) {\n            inputParams['aria-describedby'] = combineDescribedBy(\n              inputParams,\n              showStatus ? id + '-status' : null,\n              suffix ? id + '-suffix' : null\n            )\n          }\n          if (readOnly) {\n            inputParams['aria-readonly'] = inputParams.readOnly = true\n          }\n\n          inputParams = Object.assign(inputParams, rest)\n\n          skeletonDOMAttributes(inputParams, skeleton, this.context)\n\n          // also used for code markup simulation\n          validateDOMAttributes(this.props, inputParams)\n\n          const labelComp = label && (\n            <FormLabel\n              id={id + '-label'}\n              for_id={id}\n              text={label}\n              disabled={disabled}\n              skeleton={skeleton}\n              sr_only={label_sr_only}\n            />\n          )\n\n          const Element = element || 'input'\n\n          return (\n            <span {...mainParams}>\n              <span className=\"dnb-radio__order\">\n                {label_position === 'left' && labelComp}\n\n                <span className=\"dnb-radio__inner\">\n                  <AlignmentHelper />\n\n                  <FormStatus\n                    show={showStatus}\n                    id={id + '-form-status'}\n                    globalStatus={globalStatus}\n                    label={label}\n                    text_id={id + '-status'} // used for \"aria-describedby\"\n                    width_selector={id + ', ' + id + '-label'}\n                    text={status}\n                    state={status_state}\n                    no_animation={status_no_animation}\n                    skeleton={skeleton}\n                    {...status_props}\n                  />\n\n                  <span className=\"dnb-radio__row\">\n                    <span className=\"dnb-radio__shell\">\n                      <Element\n                        type=\"radio\"\n                        value={value}\n                        id={id}\n                        name={group}\n                        className=\"dnb-radio__input\"\n                        checked={checked}\n                        aria-checked={\n                          this.isPlainGroup() ? undefined : checked\n                        }\n                        disabled={isTrue(disabled)}\n                        ref={this._refInput}\n                        {...inputParams}\n                        onChange={this.onChangeHandler}\n                        onClick={this.onClickHandler}\n                        onKeyDown={this.onKeyDownHandler}\n                      />\n\n                      <span\n                        className={classnames(\n                          'dnb-radio__button',\n                          createSkeletonClass(\n                            'shape',\n                            skeleton,\n                            this.context\n                          )\n                        )}\n                        aria-hidden\n                      />\n                      <span className=\"dnb-radio__focus\" aria-hidden />\n                      <span className=\"dnb-radio__dot\" aria-hidden />\n                    </span>\n\n                    {label_position !== 'left' && labelComp}\n\n                    {suffix && (\n                      <Suffix\n                        className=\"dnb-radio__suffix\"\n                        id={id + '-suffix'} // used for \"aria-describedby\"\n                        context={props}\n                      >\n                        {suffix}\n                      </Suffix>\n                    )}\n                  </span>\n                </span>\n              </span>\n            </span>\n          )\n        }}\n      </Context.Consumer>\n    )\n  }\n}\n","/**\n * Web Textarea Component\n *\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport FormLabel from '../form-label/FormLabel'\nimport FormStatus from '../form-status/FormStatus'\nimport {\n  isTrue,\n  makeUniqueId,\n  extendPropsWithContextInClassComponent,\n  validateDOMAttributes,\n  processChildren,\n  getStatusState,\n  combineDescribedBy,\n  warn,\n  dispatchCustomElementEvent,\n} from '../../shared/component-helper'\nimport { includeValidProps } from '../form-row/FormRowHelpers'\nimport AlignmentHelper from '../../shared/AlignmentHelper'\nimport {\n  spacingPropTypes,\n  createSpacingClasses,\n} from '../space/SpacingHelper'\nimport {\n  skeletonDOMAttributes,\n  createSkeletonClass,\n} from '../skeleton/SkeletonHelper'\n\nimport Context from '../../shared/Context'\nimport Suffix from '../../shared/helpers/Suffix'\n\n/**\n * The textarea component is an umbrella component for all textareas which share the same style as the classic `text` textarea field.\n */\nexport default class Textarea extends React.PureComponent {\n  static contextType = Context\n\n  static propTypes = {\n    value: PropTypes.string,\n    id: PropTypes.string,\n    label: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    label_direction: PropTypes.oneOf(['horizontal', 'vertical']),\n    label_sr_only: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    status: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    textarea_state: PropTypes.string,\n    status_state: PropTypes.string,\n    status_props: PropTypes.object,\n    status_no_animation: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n    ]),\n    globalStatus: PropTypes.shape({\n      id: PropTypes.string,\n      message: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    }),\n    suffix: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    placeholder: PropTypes.string,\n    align: PropTypes.oneOf(['left', 'right']),\n    stretch: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    skeleton: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    autoresize: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    autoresize_max_rows: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    class: PropTypes.string,\n    textarea_class: PropTypes.string,\n    textarea_attributes: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.object,\n    ]),\n    readOnly: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    cols: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    inner_ref: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n    ...spacingPropTypes,\n\n    className: PropTypes.string,\n    textarea_element: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n\n    on_change: PropTypes.func,\n    on_focus: PropTypes.func,\n    on_blur: PropTypes.func,\n    on_key_down: PropTypes.func,\n    on_state_update: PropTypes.func,\n  }\n\n  static defaultProps = {\n    value: 'initval',\n    id: null,\n    label: null,\n    label_direction: null,\n    label_sr_only: null,\n    status: null,\n    textarea_state: null,\n    status_state: 'error',\n    status_props: null,\n    status_no_animation: null,\n    globalStatus: null,\n    suffix: null,\n    placeholder: null,\n    align: null,\n    stretch: null,\n    disabled: null,\n    skeleton: null,\n    autoresize: null,\n    autoresize_max_rows: null,\n    textarea_class: null,\n    class: null,\n    textarea_attributes: null,\n    readOnly: false,\n    rows: null,\n    cols: null,\n    inner_ref: null,\n\n    className: null,\n    textarea_element: null,\n    children: null,\n\n    on_change: null,\n    on_focus: null,\n    on_blur: null,\n    on_key_down: null,\n    on_state_update: null,\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const value = Textarea.getValue(props)\n    if (\n      state._listenForPropChanges &&\n      value !== 'initval' &&\n      value !== state.value\n    ) {\n      if (\n        value !== state.value &&\n        value !== state._value &&\n        typeof props.on_state_update === 'function'\n      ) {\n        dispatchCustomElementEvent({ props }, 'on_state_update', { value })\n      }\n      state.value = value\n    }\n    if (props.textarea_state) {\n      state.textareaState = props.textarea_state\n    }\n    state._listenForPropChanges = true\n    return state\n  }\n\n  static hasValue(value) {\n    return (\n      ((typeof value === 'string' || typeof value === 'number') &&\n        String(value).length > 0) ||\n      false\n    )\n  }\n\n  static getValue(props) {\n    const value = processChildren(props)\n    if (value === '' || Textarea.hasValue(value)) {\n      return value\n    }\n    return props.value\n  }\n\n  state = {\n    textareaState: 'virgin',\n    value: null,\n    _value: null,\n  }\n\n  constructor(props) {\n    super(props)\n\n    this._ref = props.inner_ref || React.createRef()\n    this._id = props.id || makeUniqueId() // cause we need an id anyway\n\n    // make sure we don't trigger getDerivedStateFromProps on startup\n    this.state._listenForPropChanges = true\n    if (props.textarea_state) {\n      this.state.textareaState = props.textarea_state\n    }\n    this.state._value = props.value\n  }\n  componentDidMount() {\n    if (isTrue(this.props.autoresize) && typeof window !== 'undefined') {\n      this.setAutosize()\n      try {\n        this.resizeObserver = new ResizeObserver(this.setAutosize)\n        this.resizeObserver.observe(document.body)\n      } catch (e) {\n        window.addEventListener('resize', this.setAutosize)\n      }\n    }\n  }\n  componentWillUnmount() {\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect()\n      this.resizeObserver = null\n    }\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('resize', this.setAutosize)\n    }\n  }\n  onFocusHandler = (event) => {\n    const { value } = this._ref.current\n    this.setState({\n      value,\n      _listenForPropChanges: false,\n      textareaState: 'focus',\n    })\n    dispatchCustomElementEvent(this, 'on_focus', { value, event })\n  }\n  onBlurHandler = (event) => {\n    const { value } = event.target\n    this.setState({\n      value,\n      _listenForPropChanges: false,\n      textareaState: Textarea.hasValue(value) ? 'dirty' : 'initial',\n    })\n    dispatchCustomElementEvent(this, 'on_blur', { value, event })\n  }\n  onChangeHandler = (event) => {\n    const { value } = event.target\n\n    if (isTrue(this.props.autoresize)) {\n      this.prepareAutosize()\n    }\n\n    const rows = this.getRows(value)\n\n    const ret = dispatchCustomElementEvent(this, 'on_change', {\n      value,\n      rows,\n      event,\n    })\n    if (ret !== false) {\n      this.setState({ value, _listenForPropChanges: false })\n      if (isTrue(this.props.autoresize)) {\n        this.setAutosize(rows)\n      }\n    }\n  }\n  onKeyDownHandler = (event) => {\n    const rows = this.getRows()\n    const { value } = event.target\n    dispatchCustomElementEvent(this, 'on_key_down', {\n      value,\n      rows,\n      event,\n    })\n  }\n  prepareAutosize = () => {\n    const elem = this._ref.current\n    if (!elem) {\n      return // stop here if no element was gotten\n    }\n    try {\n      elem.style.height = 'auto'\n    } catch (e) {\n      warn(e)\n    }\n  }\n  setAutosize = (rows = null) => {\n    const elem = this._ref.current\n    if (!elem) {\n      return // stop here if no element was gotten\n    }\n    try {\n      if (typeof this._heightOffset === 'undefined') {\n        this._heightOffset = elem.offsetHeight - elem.clientHeight\n      }\n\n      elem.style.height = 'auto'\n\n      // get rows after we set height to auto, this way we get 100% correct rows\n      const lineHeight = this.getLineHeight()\n      let newHeight = elem.scrollHeight + this._heightOffset\n      if (!rows) {\n        rows = this.getRows()\n      }\n\n      if (rows === 1) {\n        if (newHeight > lineHeight) {\n          newHeight = lineHeight\n        }\n      }\n\n      const maxRows = parseFloat(this.props.autoresize_max_rows)\n      if (maxRows > 0) {\n        const maxHeight = maxRows * lineHeight\n\n        if (rows > maxRows || newHeight > maxHeight) {\n          newHeight = maxHeight\n        }\n      }\n\n      elem.style.height = newHeight + 'px'\n    } catch (e) {\n      warn(e)\n    }\n  }\n  getRows() {\n    return (\n      Math.floor(this._ref.current.scrollHeight / this.getLineHeight()) ||\n      1\n    )\n  }\n  getLineHeight() {\n    return parseFloat(getComputedStyle(this._ref.current).lineHeight) || 0\n  }\n  render() {\n    // use only the props from context, who are available here anyway\n    const props = extendPropsWithContextInClassComponent(\n      this.props,\n      Textarea.defaultProps,\n      { skeleton: this.context?.skeleton },\n      this.context.getTranslation(this.props).Textarea,\n      includeValidProps(this.context.FormRow),\n      this.context.Textarea\n    )\n\n    const {\n      label,\n      label_direction,\n      label_sr_only,\n      status,\n      status_state,\n      status_props,\n      status_no_animation,\n      globalStatus,\n      suffix,\n      disabled,\n      skeleton,\n      stretch,\n      placeholder,\n      align,\n      textarea_class,\n      readOnly,\n      textarea_attributes,\n      class: _className,\n      className,\n\n      autoresize,\n      autoresize_max_rows, //eslint-disable-line\n      id: _id, //eslint-disable-line\n      children, //eslint-disable-line\n      value: _value, //eslint-disable-line\n      textarea_element: _textarea_element, //eslint-disable-line\n\n      ...attributes\n    } = props\n\n    const { value, textareaState } = this.state\n\n    const id = this._id\n    const showStatus = getStatusState(status)\n    const hasValue = Textarea.hasValue(value)\n\n    // pass along all props we wish to have as params\n    let { textarea_element: TextareaElement } = props\n\n    const textareaAttributes = textarea_attributes\n      ? typeof textarea_attributes === 'string'\n        ? JSON.parse(textarea_attributes)\n        : textarea_attributes\n      : {}\n\n    const textareaParams = {\n      className: classnames('dnb-textarea__textarea', textarea_class),\n      role: 'textbox',\n      value: hasValue ? value : '',\n      id,\n      disabled: isTrue(disabled) || isTrue(skeleton),\n      name: id,\n      'aria-placeholder': placeholder,\n      ...attributes,\n      ...textareaAttributes,\n      onChange: this.onChangeHandler,\n      onFocus: this.onFocusHandler,\n      onBlur: this.onBlurHandler,\n      // onPaste: this.onChangeHandler,\n      onKeyDown: this.onKeyDownHandler,\n    }\n\n    // we may consider using: aria-details\n    if (showStatus || suffix) {\n      textareaParams['aria-describedby'] = combineDescribedBy(\n        textareaParams,\n        showStatus ? id + '-status' : null,\n        suffix ? id + '-suffix' : null\n      )\n    }\n    if (readOnly) {\n      textareaParams['aria-readonly'] = textareaParams.readOnly = true\n    }\n\n    const mainParams = {\n      className: classnames(\n        'dnb-textarea',\n        `dnb-textarea--${textareaState}`,\n        hasValue && 'dnb-textarea--has-content',\n        align && `dnb-textarea__align--${align}`,\n        status && `dnb-textarea__status--${status_state}`,\n        autoresize && 'dnb-textarea__autoresize',\n        label_direction && `dnb-textarea--${label_direction}`,\n        isTrue(stretch) && `dnb-textarea--stretch`,\n        'dnb-form-component',\n        createSkeletonClass(null, skeleton),\n        createSpacingClasses(props),\n        _className,\n        className\n      ),\n    }\n\n    const innerParams = {\n      className: classnames(\n        'dnb-textarea__inner',\n        createSkeletonClass('shape', skeleton, this.context)\n      ),\n    }\n\n    const shellParams = {\n      className: classnames('dnb-textarea__shell'),\n    }\n\n    if (isTrue(disabled) || isTrue(skeleton)) {\n      shellParams['aria-disabled'] = true\n    }\n\n    // to show the ending dots on a placeholder, if the text is longer\n    const placeholderStyle =\n      parseFloat(this.props.rows) > 0\n        ? {\n            '--textarea-rows': parseFloat(this.props.rows),\n            // '--textarea-cols': parseFloat(this.props.cols)\n          }\n        : null\n\n    skeletonDOMAttributes(innerParams, skeleton, this.context)\n\n    // also used for code markup simulation\n    validateDOMAttributes(this.props, textareaParams)\n    validateDOMAttributes(null, innerParams)\n    validateDOMAttributes(null, shellParams)\n\n    if (TextareaElement && typeof TextareaElement === 'function') {\n      TextareaElement = TextareaElement(textareaParams, this._ref)\n    } else if (!TextareaElement && _textarea_element) {\n      TextareaElement = _textarea_element\n    }\n\n    return (\n      <span {...mainParams}>\n        {label && (\n          <FormLabel\n            id={id + '-label'}\n            for_id={id}\n            text={label}\n            label_direction={label_direction}\n            sr_only={label_sr_only}\n            disabled={disabled}\n            skeleton={skeleton}\n          />\n        )}\n\n        <span {...innerParams}>\n          <AlignmentHelper />\n\n          <FormStatus\n            show={showStatus}\n            id={id + '-form-status'}\n            globalStatus={globalStatus}\n            label={label}\n            text_id={id + '-status'} // used for \"aria-describedby\"\n            text={status}\n            state={status_state}\n            no_animation={status_no_animation}\n            skeleton={skeleton}\n            {...status_props}\n          />\n\n          <span className=\"dnb-textarea__row\">\n            <span {...shellParams}>\n              {TextareaElement || (\n                <textarea ref={this._ref} {...textareaParams} />\n              )}\n\n              {placeholder && (\n                <span\n                  aria-hidden\n                  className={classnames(\n                    'dnb-textarea__placeholder',\n                    align ? `dnb-textarea__align--${align}` : null\n                  )}\n                  style={placeholderStyle}\n                >\n                  {placeholder}\n                </span>\n              )}\n\n              <span className=\"dnb-textarea__state\" />\n            </span>\n\n            {suffix && (\n              <Suffix\n                className=\"dnb-textarea__suffix\"\n                id={id + '-suffix'} // used for \"aria-describedby\"\n                context={props}\n              >\n                {suffix}\n              </Suffix>\n            )}\n          </span>\n        </span>\n      </span>\n    )\n  }\n}\n","/**\n * Web ToggleButtonGroup Context\n *\n */\n\nimport React from 'react'\n\nconst ToggleButtonGroupContext = React.createContext({})\n\nexport default ToggleButtonGroupContext\n","/**\n * Web ToggleButtonGroup Component\n *\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {\n  isTrue,\n  makeUniqueId,\n  extendPropsWithContextInClassComponent,\n  validateDOMAttributes,\n  getStatusState,\n  combineDescribedBy,\n  combineLabelledBy,\n  dispatchCustomElementEvent,\n} from '../../shared/component-helper'\nimport {\n  spacingPropTypes,\n  createSpacingClasses,\n} from '../space/SpacingHelper'\nimport AlignmentHelper from '../../shared/AlignmentHelper'\nimport FormRow from '../form-row/FormRow'\nimport FormStatus from '../form-status/FormStatus'\nimport Context from '../../shared/Context'\nimport Suffix from '../../shared/helpers/Suffix'\nimport ToggleButtonGroupContext from './ToggleButtonGroupContext'\nimport { includeValidProps } from '../form-row/FormRowHelpers'\n\nexport default class ToggleButtonGroup extends React.PureComponent {\n  static contextType = Context\n\n  static propTypes = {\n    label: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    label_direction: PropTypes.oneOf(['horizontal', 'vertical']),\n    label_sr_only: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    title: PropTypes.string,\n    multiselect: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    variant: PropTypes.oneOf(['default', 'checkbox', 'radio']),\n    left_component: PropTypes.node,\n    no_fieldset: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    skeleton: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    id: PropTypes.string,\n    name: PropTypes.string,\n    status: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    status_state: PropTypes.string,\n    status_props: PropTypes.object,\n    status_no_animation: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n    ]),\n    globalStatus: PropTypes.shape({\n      id: PropTypes.string,\n      message: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    }),\n    suffix: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    vertical: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    layout_direction: PropTypes.oneOf(['column', 'row']),\n    value: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.object,\n      PropTypes.array,\n    ]),\n    values: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n    attributes: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    ...spacingPropTypes,\n\n    class: PropTypes.string,\n    className: PropTypes.string,\n    children: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n\n    on_change: PropTypes.func,\n  }\n\n  static defaultProps = {\n    label: null,\n    label_direction: null,\n    label_sr_only: null,\n    title: null,\n    multiselect: null,\n    variant: null,\n    left_component: null,\n    no_fieldset: null,\n    disabled: null,\n    skeleton: null,\n    id: null,\n    name: null,\n    status: null,\n    status_state: 'error',\n    status_props: null,\n    status_no_animation: null,\n    globalStatus: null,\n    suffix: null,\n    vertical: null,\n    layout_direction: 'row',\n    value: undefined,\n    values: undefined,\n    attributes: null,\n    class: null,\n\n    className: null,\n    children: null,\n\n    on_change: null,\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (state._listenForPropChanges) {\n      if (\n        typeof props.value !== 'undefined' &&\n        props.value !== state.value\n      ) {\n        state.value = props.value\n      }\n      if (\n        typeof props.values !== 'undefined' &&\n        props.values !== state.values\n      ) {\n        state.values = ToggleButtonGroup.getValues(props)\n      }\n    }\n    state._listenForPropChanges = true\n\n    return state\n  }\n\n  static getValues(props) {\n    if (typeof props.values === 'string' && props.values[0] === '[') {\n      return JSON.parse(props.values)\n    }\n    return props.values\n  }\n\n  constructor(props) {\n    super(props)\n    this._refInput = React.createRef()\n    this._id = props.id || makeUniqueId() // cause we need an id anyway\n    this._name = props.name || makeUniqueId() // cause we need an id anyway\n    this.state = {\n      // do not set the value here, else get true in this check } else if (context.values && Array.isArray(context.values)) {\n      _listenForPropChanges: true,\n    }\n  }\n\n  onChangeHandler = ({ value, event }) => {\n    const { multiselect } = this.props\n    const values = this.state.values || []\n\n    if (isTrue(multiselect)) {\n      if (!values.includes(value)) {\n        values.push(value)\n      } else {\n        values.splice(values.indexOf(value), 1)\n      }\n    }\n\n    this.setState({\n      value,\n      values,\n      _listenForPropChanges: false,\n    })\n\n    dispatchCustomElementEvent(this, 'on_change', {\n      value,\n      values,\n      event,\n    })\n  }\n\n  render() {\n    // use only the props from context, who are available here anyway\n    const props = extendPropsWithContextInClassComponent(\n      this.props,\n      ToggleButtonGroup.defaultProps,\n      this.context.getTranslation(this.props).ToggleButton,\n      includeValidProps(this.context.FormRow),\n      this.context.ToggleButtonGroup\n    )\n\n    const {\n      status,\n      status_state,\n      status_props,\n      status_no_animation,\n      globalStatus,\n      suffix,\n      label_direction,\n      label_sr_only,\n      vertical,\n      layout_direction,\n      label,\n      variant,\n      left_component,\n      no_fieldset,\n      disabled,\n      skeleton,\n      className,\n      class: _className,\n\n      multiselect,\n      id: _id, // eslint-disable-line\n      name: _name, // eslint-disable-line\n      value: _value, // eslint-disable-line\n      values: _values, // eslint-disable-line\n      children, // eslint-disable-line\n      on_change, // eslint-disable-line\n\n      ...rest\n    } = props\n\n    const { value, values } = this.state\n\n    const id = this._id\n    const showStatus = getStatusState(status)\n\n    const classes = classnames(\n      'dnb-toggle-button-group',\n      status && `dnb-toggle-button-group__status--${status_state}`,\n      !label && 'dnb-toggle-button-group--no-label',\n      `dnb-toggle-button-group--${layout_direction}`,\n      // (isTrue(vertical) || label_direction === 'vertical') &&\n      //   `dnb-toggle-button-group--vertical`,\n      (isTrue(vertical) || label_direction) &&\n        `dnb-form-row--${\n          isTrue(vertical) ? 'vertical' : label_direction\n        }-label`, // <-- has label\n      'dnb-form-component',\n      createSpacingClasses(props),\n      className,\n      _className\n    )\n\n    const params = {\n      ...rest,\n    }\n\n    if (showStatus || suffix) {\n      params['aria-describedby'] = combineDescribedBy(\n        params,\n        showStatus ? id + '-status' : null,\n        suffix ? id + '-suffix' : null\n      )\n    }\n    if (label) {\n      params['aria-labelledby'] = combineLabelledBy(params, id + '-label')\n    }\n\n    // also used for code markup simulation\n    validateDOMAttributes(this.props, params)\n\n    const context = {\n      name: this._name,\n      value,\n      values,\n      multiselect: isTrue(multiselect),\n      variant,\n      left_component,\n      disabled,\n      skeleton,\n      setContext: (context) => {\n        // also look for a function, where we are able to fill old values\n        // this is used in the \"constructor\" inside the ToggleButton.js component\n        if (typeof context === 'function') {\n          context = context(this._tmp)\n        }\n        this._tmp = { ...this._tmp, ...context }\n        this.setState({\n          ...context,\n          _listenForPropChanges: false,\n        })\n      },\n      onChange: this.onChangeHandler,\n    }\n\n    const formRowParams = {\n      id,\n      label,\n      label_id: id + '-label', // send the id along, so the FormRow component can use it\n      label_direction,\n      label_sr_only,\n      direction: label_direction,\n      vertical,\n      disabled,\n      skeleton,\n      no_fieldset,\n      skipContentWrapperIfNested: true,\n      // status,\n      // status_state\n    }\n\n    return (\n      <ToggleButtonGroupContext.Provider value={context}>\n        <div className={classes}>\n          <AlignmentHelper />\n          <FormRow {...formRowParams}>\n            <span\n              id={id}\n              className=\"dnb-toggle-button-group__shell\"\n              role=\"group\"\n              {...params}\n            >\n              <FormStatus\n                show={showStatus}\n                id={id + '-form-status'}\n                globalStatus={globalStatus}\n                label={label}\n                text_id={id + '-status'} // used for \"aria-describedby\"\n                text={status}\n                state={status_state}\n                no_animation={status_no_animation}\n                skeleton={skeleton}\n                {...status_props}\n              />\n\n              <span className=\"dnb-toggle-button-group__children\">\n                {children}\n\n                {suffix && (\n                  <Suffix\n                    className=\"dnb-toggle-button-group__suffix\"\n                    id={id + '-suffix'} // used for \"aria-describedby\"\n                    context={props}\n                  >\n                    {suffix}\n                  </Suffix>\n                )}\n              </span>\n            </span>\n          </FormRow>\n        </div>\n      </ToggleButtonGroupContext.Provider>\n    )\n  }\n}\n","/**\n * Web ToggleButton Component\n *\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport keycode from 'keycode'\nimport {\n  warn,\n  isTrue,\n  makeUniqueId,\n  extendPropsWithContextInClassComponent,\n  validateDOMAttributes,\n  getStatusState,\n  combineDescribedBy,\n  dispatchCustomElementEvent,\n} from '../../shared/component-helper'\nimport AlignmentHelper from '../../shared/AlignmentHelper'\nimport { includeValidProps } from '../form-row/FormRowHelpers'\nimport {\n  spacingPropTypes,\n  createSpacingClasses,\n} from '../space/SpacingHelper'\n\nimport Radio from '../radio/Radio'\nimport Checkbox from '../checkbox/Checkbox'\nimport Button from '../button/Button'\nimport FormLabel from '../form-label/FormLabel'\nimport FormStatus from '../form-status/FormStatus'\nimport ToggleButtonGroup from './ToggleButtonGroup'\nimport ToggleButtonGroupContext from './ToggleButtonGroupContext'\nimport Context from '../../shared/Context'\nimport Suffix from '../../shared/helpers/Suffix'\n\n/**\n * The toggle-button component is our enhancement of the classic toggle-button button.\n */\nexport default class ToggleButton extends React.PureComponent {\n  static Group = ToggleButtonGroup\n\n  static contextType = ToggleButtonGroupContext\n\n  static propTypes = {\n    text: PropTypes.string,\n    label: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    label_direction: PropTypes.oneOf(['horizontal', 'vertical']),\n    label_sr_only: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    title: PropTypes.string,\n    checked: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    variant: PropTypes.oneOf(['default', 'checkbox', 'radio']),\n    left_component: PropTypes.node,\n    disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    skeleton: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    id: PropTypes.string,\n    // group: PropTypes.string,\n    status: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    status_state: PropTypes.string,\n    status_props: PropTypes.object,\n    status_no_animation: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n    ]),\n    globalStatus: PropTypes.shape({\n      id: PropTypes.string,\n      message: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    }),\n    suffix: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    value: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.object,\n      PropTypes.array,\n    ]),\n    icon: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.node,\n      PropTypes.func,\n    ]),\n    icon_position: PropTypes.oneOf(['left', 'right']),\n    icon_size: PropTypes.string,\n    attributes: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    readOnly: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n\n    ...spacingPropTypes,\n\n    class: PropTypes.string,\n    className: PropTypes.string,\n    children: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n    on_change: PropTypes.func,\n    on_state_update: PropTypes.func,\n  }\n\n  static defaultProps = {\n    text: null,\n    label: null,\n    label_direction: null,\n    label_sr_only: null,\n    title: null,\n    checked: undefined,\n    variant: null,\n    left_component: null,\n    disabled: null,\n    skeleton: null,\n    id: null,\n    // group: null,\n    status: null,\n    status_state: 'error',\n    status_props: null,\n    status_no_animation: null,\n    globalStatus: null,\n    suffix: null,\n    value: '',\n    icon: null,\n    icon_position: 'right',\n    icon_size: null,\n    attributes: null,\n    readOnly: false,\n    class: null,\n\n    className: null,\n    children: null,\n\n    on_change: null,\n    on_state_update: null,\n  }\n\n  static parseChecked = (state) => /true|on/.test(String(state))\n\n  static getDerivedStateFromProps(props, state) {\n    if (state._listenForPropChanges) {\n      if (props.checked !== state._checked) {\n        state.checked = ToggleButton.parseChecked(props.checked)\n      }\n    }\n    state._listenForPropChanges = true\n\n    if (state.checked !== state.__checked) {\n      dispatchCustomElementEvent({ props }, 'on_state_update', {\n        checked: state.checked,\n      })\n    }\n\n    state._checked = props.checked\n    state.__checked = state.checked\n\n    return state\n  }\n\n  constructor(props, context) {\n    super(props)\n    this._id = props.id || makeUniqueId() // cause we need an id anyway\n    this._refButton = React.createRef()\n\n    this.state = {\n      _listenForPropChanges: true,\n    }\n\n    // set the startup checked values from context, if they exists\n    if (context.name && typeof props.value !== 'undefined') {\n      if (typeof context.value !== 'undefined') {\n        this.state.checked = context.value === props.value\n        this.state._listenForPropChanges = false\n      } else if (context.values && Array.isArray(context.values)) {\n        this.state.checked = context.values.includes(props.value)\n        this.state._listenForPropChanges = false\n\n        // make sure we update the context\n        // with a possible custom set \"checked\" state\n      } else if (ToggleButton.parseChecked(props.checked)) {\n        if (context.setContext) {\n          if (context.multiselect) {\n            context.setContext((tmp) => {\n              return {\n                values:\n                  // in case we have set before a new context (other component)\n                  // we fill combine these arrays\n                  tmp && Array.isArray(tmp.values)\n                    ? [...tmp.values, props.value]\n                    : [props.value],\n              }\n            })\n          } else {\n            context.setContext({\n              value: props.value,\n            })\n          }\n        }\n      }\n    }\n  }\n\n  onKeyDownHandler = (event) => {\n    switch (keycode(event)) {\n      case 'enter':\n        this.onClickHandler({ event })\n        break\n    }\n  }\n\n  onKeyUpHandler = (event) => {\n    switch (keycode(event)) {\n      case 'enter':\n        this.onClickHandler({ event })\n        break\n    }\n  }\n\n  onClickHandler = ({ event }) => {\n    if (isTrue(this.props.readOnly)) {\n      return event.preventDefault()\n    }\n    event.persist()\n\n    // only select a value once\n    if (\n      !isTrue(this.context.multiselect) &&\n      this.props.value === this.context.value\n    ) {\n      return\n    }\n\n    // else we change the checked state\n    const checked = !this.state.checked\n    this.setState({\n      checked,\n      _listenForPropChanges: false,\n    })\n    this.callOnChange({ checked, event })\n\n    if (this._refButton.current && checked) {\n      // simulate focus for firefox and safari\n      // so we can get rid of the hover ring after click\n      try {\n        this._refButton.current._ref.current.focus()\n      } catch (e) {\n        warn(e)\n      }\n    }\n  }\n\n  callOnChange = ({ checked, event }) => {\n    const { value } = this.props\n    if (this.context.onChange) {\n      this.context.onChange({\n        value,\n        event,\n      })\n    }\n    dispatchCustomElementEvent(this, 'on_change', {\n      checked,\n      value,\n      event,\n    })\n  }\n\n  render() {\n    return (\n      <Context.Consumer>\n        {(context) => {\n          // from internal context\n          const contextProps = extendPropsWithContextInClassComponent(\n            this.props,\n            ToggleButton.defaultProps,\n            this.context\n          )\n\n          // use only the props from context, who are available here anyway\n          const props = extendPropsWithContextInClassComponent(\n            this.props,\n            ToggleButton.defaultProps,\n            contextProps,\n            context.translation.ToggleButton,\n            includeValidProps(context.FormRow),\n            context.ToggleButton\n          )\n\n          const {\n            status,\n            status_state,\n            status_props,\n            status_no_animation,\n            globalStatus,\n            suffix,\n            label,\n            label_direction,\n            label_sr_only,\n            text,\n            title,\n            readOnly,\n            className,\n            class: _className,\n            disabled,\n            skeleton,\n            variant,\n            left_component,\n            icon,\n            icon_size,\n            icon_position,\n            value: propValue,\n\n            id: _id, // eslint-disable-line\n            // group: _group, // eslint-disable-line\n            checked: _checked, // eslint-disable-line\n            children,\n            on_change, // eslint-disable-line\n            on_state_update, // eslint-disable-line\n\n            ...rest\n          } = props\n\n          let { checked } = this.state\n\n          if (\n            !isTrue(this.context.multiselect) &&\n            typeof this.context.value !== 'undefined'\n          ) {\n            const contextValue = this.context.value\n            if (\n              typeof propValue === 'string' ||\n              typeof propValue === 'number'\n            ) {\n              checked = propValue === contextValue\n            }\n          } else if (\n            isTrue(this.context.multiselect) &&\n            typeof this.context.values !== 'undefined'\n          ) {\n            const contextValues = this.context.values\n            if (\n              typeof propValue === 'string' ||\n              typeof propValue === 'number'\n            ) {\n              checked = contextValues.includes(propValue)\n            }\n          }\n\n          const id = this._id\n          const showStatus = getStatusState(status)\n\n          const mainParams = {\n            className: classnames(\n              'dnb-toggle-button',\n              status && `dnb-toggle-button__status--${status_state}`,\n              checked && `dnb-toggle-button--checked`,\n              label_direction && `dnb-toggle-button--${label_direction}`,\n              createSpacingClasses(props),\n              className,\n              _className\n            ),\n          }\n\n          // to remove spacing props\n          validateDOMAttributes(this.props, rest)\n\n          const buttonParams = {\n            id,\n            disabled,\n            skeleton,\n            text: text || children,\n            title,\n            icon,\n            icon_size,\n            icon_position,\n            'aria-pressed': String(checked || false),\n            ...rest,\n          }\n\n          const componentParams = {\n            checked,\n            disabled,\n            element: 'span',\n            'data-checked': String(checked || false),\n            'aria-checked': undefined,\n            role: undefined,\n            type: undefined,\n            name: null,\n            title: null,\n          }\n\n          if (status) {\n            // do not send along the message, but only the status states\n            if (status_state === 'info') {\n              componentParams.status_state = 'info'\n            } else {\n              componentParams.status = 'error'\n            }\n          }\n\n          if (showStatus || suffix) {\n            buttonParams['aria-describedby'] = combineDescribedBy(\n              buttonParams,\n              showStatus ? id + '-status' : null,\n              suffix ? id + '-suffix' : null\n            )\n          }\n          if (readOnly) {\n            buttonParams['aria-readonly'] = buttonParams.readOnly = true\n          }\n\n          let leftComponent = null\n          switch (variant) {\n            case 'radio':\n              leftComponent = (\n                <Radio id={`${id}-radio`} {...componentParams} />\n              )\n              break\n\n            case 'checkbox':\n              leftComponent = (\n                <Checkbox id={`${id}-checkbox`} {...componentParams} />\n              )\n              break\n\n            case 'default':\n            default:\n              leftComponent = left_component\n              break\n          }\n\n          return (\n            <span {...mainParams}>\n              {label && (\n                <FormLabel\n                  id={id + '-label'}\n                  for_id={id}\n                  text={label}\n                  disabled={disabled}\n                  skeleton={skeleton}\n                  label_direction={label_direction}\n                  sr_only={label_sr_only}\n                />\n              )}\n              <span className=\"dnb-toggle-button__inner\">\n                <FormStatus\n                  show={showStatus}\n                  id={id + '-form-status'}\n                  globalStatus={globalStatus}\n                  label={label}\n                  text_id={id + '-status'} // used for \"aria-describedby\"\n                  text={status}\n                  state={status_state}\n                  no_animation={status_no_animation}\n                  skeleton={skeleton}\n                  {...status_props}\n                />\n\n                <span className=\"dnb-toggle-button__shell\">\n                  <AlignmentHelper />\n\n                  <Button\n                    variant=\"secondary\"\n                    className=\"dnb-toggle-button__button\"\n                    custom_content={\n                      leftComponent && (\n                        <span className=\"dnb-toggle-button__component\">\n                          {leftComponent}\n                        </span>\n                      )\n                    }\n                    {...buttonParams}\n                    ref={this._refButton}\n                    onClick={this.onClickHandler}\n                    onKeyDown={this.onKeyDownHandler}\n                    onKeyUp={this.onKeyUpHandler}\n                  />\n\n                  {suffix && (\n                    <Suffix\n                      className=\"dnb-toggle-button__suffix\"\n                      id={id + '-suffix'} // used for \"aria-describedby\"\n                      context={props}\n                    >\n                      {suffix}\n                    </Suffix>\n                  )}\n                </span>\n              </span>\n            </span>\n          )\n        }}\n      </Context.Consumer>\n    )\n  }\n}\n"],"names":["props","_jsx","xmlns","width","height","fill","viewBox","children","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","PropTypes","id","message","spacingPropTypes","formRowDefaultProps","label","label_direction","label_sr_only","label_id","label_class","no_label","no_fieldset","locale","wrap","direction","vertical","centered","section_style","section_spacing","globalStatus","responsive","disabled","skeleton","class","skipContentWrapperIfNested","className","FormRow","_React$PureComponent","_this","call","_id","makeUniqueId","_inheritsLoose","getContent","Array","isArray","reduce","pV","cV","type","name","push","prototype","render","extendPropsWithContextInClassComponent","this","defaultProps","context","_className","_label","attributes","isNested","itsMeAgain","nestedLabel","hasLabel","length","params","classnames","isTrue","createSpacingClasses","validateDOMAttributes","providerContext","extend","useId","isIsUsed","useFieldset","Context","Provider","value","Fieldset","_jsxs","Section","style_type","spacing","element","AlignmentHelper","FormLabel","for_id","text","sr_only","React","contextType","_ref","FormSet","onSubmitHandler","event","prevent_submit","preventDefault","dispatchCustomElementEvent","_assertThisInitialized","processChildren","no_form","rest","allowedProps","Object","entries","acc","k","v","_ref2","onSubmit","content","Element","on_submit","RadioGroup","onChangeHandler","setState","_listenForPropChanges","_refInput","_name","state","getDerivedStateFromProps","_value","includeValidProps","status","status_state","status_props","status_no_animation","suffix","label_position","layout_direction","size","on_change","showStatus","getStatusState","classes","combineDescribedBy","combineLabelledBy","onChange","formRowParams","RadioGroupContext","role","Suffix","FormStatus","show","text_id","width_selector","no_animation","title","undefined","parseChecked","test","String","Radio","onKeyDownHandler","key","keycode","isInNoGroup","isContextGroupOrSingle","checked","_event","readOnly","target","isPlainGroup","setTimeout","callOnChange","group","onClickHandler","current","focus","_checked","__checked","Consumer","contextProps","_group","_disabled","on_state_update","hasContext","mainParams","inputParams","assign","skeletonDOMAttributes","labelComp","ref","onClick","onKeyDown","createSkeletonClass","Group","Textarea","textareaState","onFocusHandler","onBlurHandler","hasValue","autoresize","prepareAutosize","rows","getRows","setAutosize","elem","style","e","warn","_heightOffset","offsetHeight","clientHeight","lineHeight","getLineHeight","newHeight","scrollHeight","maxRows","parseFloat","autoresize_max_rows","maxHeight","inner_ref","textarea_state","getValue","_proto","componentDidMount","window","resizeObserver","ResizeObserver","observe","document","body","addEventListener","componentWillUnmount","disconnect","removeEventListener","Math","floor","getComputedStyle","_this$context","getTranslation","stretch","placeholder","align","textarea_class","textarea_attributes","textarea_element","_textarea_element","TextareaElement","textareaAttributes","JSON","parse","textareaParams","onFocus","onBlur","innerParams","shellParams","placeholderStyle","cols","on_focus","on_blur","on_key_down","ToggleButtonGroup","multiselect","values","includes","splice","indexOf","getValues","ToggleButton","variant","left_component","_values","setContext","_tmp","ToggleButtonGroupContext","onKeyUpHandler","persist","_refButton","tmp","concat","_toConsumableArray","translation","icon","icon_size","icon_position","propValue","contextValues","contextValue","buttonParams","componentParams","leftComponent","Checkbox","Button","custom_content","onKeyUp"],"sourceRoot":""}