{"version":3,"file":"3771f32464737b36fe3c4db3987c73c1fd91b188-7460187c91fcf2992374.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/components/Table.ts","webpack://dnb-design-system-portal/./src/docs/uilib/components/pagination/infinity-scroller/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/pagination/infinity-scroller/demos.mdx"],"sourcesContent":["/**\n * ATTENTION: This file is auto generated by using \"prepareTemplates\".\n * Do not change the content!\n *\n */\n\n/**\n * Library Index table to autogenerate all the components and extensions\n * Used by \"prepareTables\"\n */\n\nimport Table from './table/Table'\nexport * from './table/Table'\nexport default Table\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport ComponentBox from '../../../../../shared/tags/ComponentBox'\nimport styled from '@emotion/styled'\n\nimport {\n  H1,\n  P,\n  Ul,\n  Pagination,\n  Section,\n  Space,\n  Button,\n} from '@dnb/eufemia/src'\nimport Table from '@dnb/eufemia/src/components/Table'\nimport { hasSelectedText } from '@dnb/eufemia/src/shared/helpers'\n\nimport {\n  createPagination,\n  CreatePaginationReturn,\n} from '@dnb/eufemia/src/components/Pagination'\n\ntype HeightLimitProps = {\n  height?: string\n}\n\nconst HeightLimit = styled.div<HeightLimitProps>`\n  height: ${(props) => props.height || '20rem'};\n  overflow-y: scroll;\n  background-color: var(--color-white);\n  border: 0.25rem dotted var(--color-black);\n`\nconst LargePage = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  height: 15vw;\n\n  background-color: ${(props) => props.color || 'tomato'};\n  font-size: 15vw;\n  font-weight: var(--font-weight-bold);\n  font-feature-settings: 'pnum' on, 'lnum' on;\n\n  color: var(--color-white);\n`\n\nexport const PaginationExampleInfinityLoadButton = () => (\n  <ComponentBox scope={{ HeightLimit, LargePage }}>\n    <HeightLimit>\n      <Pagination\n        mode=\"infinity\"\n        use_load_button\n        startup_page={5}\n        min_wait_time={0}\n        on_load={({ pageNumber, setContent }) => {\n          // simulate server communication delay\n          const timeout = setTimeout(() => {\n            setContent(pageNumber, <LargePage>{pageNumber}</LargePage>)\n          }, Math.ceil(Math.random() * 500))\n\n          return () => clearTimeout(timeout)\n        }}\n      />\n    </HeightLimit>\n  </ComponentBox>\n)\n\nexport const PaginationExampleInfinityIndicator = () => (\n  <ComponentBox scope={{ HeightLimit, LargePage }}>\n    <HeightLimit>\n      <Pagination\n        mode=\"infinity\"\n        indicator_element={() => (\n          <LargePage color=\"lightgreen\">Loading ...</LargePage>\n        )}\n        startup_page={3}\n        page_count={10}\n        min_wait_time={0}\n        on_load={({ pageNumber, setContent }) => {\n          // simulate server communication delay\n          const timeout = setTimeout(() => {\n            setContent(pageNumber, <LargePage>{pageNumber}</LargePage>)\n          }, Math.ceil(Math.random() * 500))\n\n          return () => clearTimeout(timeout)\n        }}\n        on_end={({ pageNumber, setContent }) => {\n          setContent(\n            pageNumber,\n            <LargePage color=\"lightgreen\">End</LargePage>\n          )\n        }}\n      />\n    </HeightLimit>\n  </ComponentBox>\n)\n\nexport const PaginationExampleInfinityUnknown = () => (\n  <ComponentBox scope={{ HeightLimit, LargePage }}>\n    <HeightLimit>\n      <Pagination\n        mode=\"infinity\"\n        parallel_load_count={2}\n        min_wait_time={0}\n        on_load={({ pageNumber, setContent, endInfinity }) => {\n          // simulate server communication delay\n          const timeout = setTimeout(() => {\n            if (pageNumber > 10) {\n              endInfinity()\n            } else {\n              setContent(pageNumber, <LargePage>{pageNumber}</LargePage>)\n            }\n          }, Math.ceil(Math.random() * 1e3))\n\n          return () => clearTimeout(timeout)\n        }}\n        on_end={({ pageNumber, setContent }) => {\n          setContent(\n            pageNumber,\n            <LargePage color=\"lightgreen\">End</LargePage>\n          )\n        }}\n      />\n    </HeightLimit>\n  </ComponentBox>\n)\n\nexport const PaginationExampleInfinityTable = () => (\n  <ComponentBox scope={{ HeightLimit, PaginationTableExample }}>\n    <HeightLimit height=\"60rem\">\n      <PaginationTableExample />\n    </HeightLimit>\n  </ComponentBox>\n)\n\nexport function PaginationTableExample() {\n  return (\n    <Wrapper className=\"dnb-core-style\" spacing>\n      <Space left>\n        <H1 size=\"small\">Infinity Table</H1>\n        <P bottom>\n          This is a semantic correct table using infinity scrolling. It\n          also has a sticky header.\n        </P>\n        <Ul bottom>\n          <li>The startup page number is set to 3.</li>\n          <li>And per page we show 10 items.</li>\n          <li>\n            A random delay is added to simulate asynchronous interaction.\n          </li>\n        </Ul>\n      </Space>\n      <InfinityPaginationTable tableItems={tableItems} />\n    </Wrapper>\n  )\n}\n\n// create our items\nconst tableItems = []\nfor (let i = 1; i <= 300; i++) {\n  tableItems.push({ ssn: i, text: String(i), expanded: false })\n}\n\nexport const InfinityPaginationTable = ({ tableItems, ...props }) => {\n  const startupPage = 3 // what we start with\n  const perPageCount = 10 // how many items per page\n  const maxPagesCount = Math.floor(tableItems?.length / perPageCount)\n\n  // create our Pagination instance\n  const [\n    { Pagination, setContent, resetContent, resetInfinity, endInfinity },\n  ] = React.useState<CreatePaginationReturn>(createPagination)\n  const [orderDirection, setOrderDirection] = React.useState('asc')\n  const [currentPage, setLocalPage] = React.useState(null)\n  const [cacheHash, forceRerender] = React.useState(null) // eslint-disable-line\n\n  React.useEffect(() => {\n    // Could also be set as \"startup_page\" in <Pagination startup_page={startupPage} ...>\n    setLocalPage(startupPage)\n  }, [])\n\n  // ascending / descending\n  tableItems = reorderDirection(tableItems, orderDirection)\n\n  const onToggleExpanded = (\n    { ssn: _ssn },\n    { pageNumber, element = null, onExpanded = null }\n  ) => {\n    const index = tableItems.findIndex(({ ssn }) => ssn === _ssn)\n    if (index > -1) {\n      const item = tableItems[index]\n\n      // update only the current item\n      tableItems[index] = {\n        ...item,\n        expanded: !item.expanded,\n      }\n\n      // define what page should update\n      // used to update the page inside the Pagination Component\n      setLocalPage(pageNumber)\n\n      // force re-render of this component\n      forceRerender(new Date().getTime())\n\n      // set new height\n      if (element) {\n        setHeight({ element, expanded: !item.expanded })\n      }\n\n      setTimeout(onExpanded, 10)\n    }\n  }\n  // set the startup height\n  const onMounted = (items) => {\n    items.forEach(({ element: { current: element }, expanded }) =>\n      setHeight({ element, expanded, animation: false })\n    )\n  }\n\n  // This limits the items to perPageCount\n  const content = (\n    <InfinityPagination\n      items={tableItems}\n      perPageCount={perPageCount}\n      currentPage={currentPage}\n      onToggleExpanded={onToggleExpanded}\n      onMounted={onMounted}\n      endInfinity={endInfinity}\n    />\n  )\n\n  setContent(currentPage, content)\n  let serverDelayTimeout\n  React.useEffect(() => () => clearTimeout(serverDelayTimeout))\n\n  const action = ({ pageNumber }) => {\n    console.log('on_change: with page', pageNumber)\n\n    // simulate server delay\n    clearTimeout(serverDelayTimeout)\n    serverDelayTimeout = setTimeout(() => {\n      if (pageNumber === currentPage) {\n        // once we set current page, we force a re-render, and sync of data\n        // but only if we are on the same page\n        forceRerender(new Date().getTime())\n      } else {\n        setLocalPage(pageNumber)\n      }\n    }, Math.ceil(Math.random() * 1e3)) // simulate random delay\n  }\n\n  return (\n    <StyledTable sticky>\n      <thead>\n        <tr>\n          <th scope=\"col\">\n            <Button\n              size=\"small\"\n              icon=\"reset\"\n              icon_position=\"left\"\n              variant=\"secondary\"\n              on_click={() => {\n                clearTimeout(serverDelayTimeout) // stop the server delay simulation\n\n                resetInfinity()\n                resetContent()\n\n                // re-render our component to get back the default state\n                setOrderDirection('asc')\n\n                // re-render our component to get back the default state\n                forceRerender(new Date().getTime())\n              }}\n            >\n              Reset everything\n            </Button>\n          </th>\n          <th\n            scope=\"col\"\n            className={`dnb-table--sortable dnb-table--active ${\n              orderDirection === 'desc' ? ' dnb-table--reversed' : ''\n            }`}\n          >\n            <Button\n              variant=\"tertiary\"\n              icon=\"arrow-down\"\n              text=\"Sortable\"\n              title=\"Sort table row\"\n              on_click={() => {\n                // 1. empty\n                resetContent()\n\n                setOrderDirection((o) => (o === 'asc' ? 'desc' : 'asc'))\n              }}\n            />\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <Pagination\n          mode=\"infinity\"\n          // use_load_button // disables infinity scroller, but will add a button to do so\n          marker_element=\"tr\"\n          fallback_element={({ className, ...props }) => (\n            <TableRow className={className}>\n              <TableData colSpan={2} {...props} />\n            </TableRow>\n          )} // in order to show the injected \"indicator\" and \"load button\" in the middle of the row\n          current_page={currentPage}\n          page_count={maxPagesCount}\n          {...props}\n          on_startup={action}\n          on_change={action}\n        />\n      </tbody>\n    </StyledTable>\n  )\n}\nInfinityPaginationTable.propTypes = {\n  tableItems: PropTypes.array.isRequired,\n}\n\nconst InfinityPagination = ({\n  children = null,\n  items,\n  currentPage,\n  perPageCount,\n  onToggleExpanded,\n  onMounted,\n  endInfinity,\n  ...props\n}) => {\n  const mountedItems = []\n  if (onMounted) {\n    React.useEffect(() => onMounted && onMounted(mountedItems), []) // eslint-disable-line\n  }\n\n  items = items.filter((cur, idx) => {\n    const floor = (currentPage - 1) * perPageCount\n    const ceil = floor + perPageCount\n    return idx >= floor && idx < ceil\n  })\n\n  if (items.length === 0) {\n    endInfinity()\n    return null\n  }\n\n  return items.map((item, i) => {\n    const params = {\n      onClick: (e: React.MouseEvent) => {\n        if (\n          !hasSelectedText() ||\n          /button/.test(document.activeElement.tagName)\n        ) {\n          let element = e.currentTarget as HTMLButtonElement\n          onToggleExpanded(item, {\n            pageNumber: currentPage,\n            onExpanded: () => {\n              try {\n                // rather find the next tr\n                element = element.nextElementSibling as HTMLButtonElement\n                setHeight({ element, expanded: !item.expanded })\n                element.focus() // for better ally we set the focus to the new content\n              } catch (e) {\n                //\n              }\n            },\n          })\n        }\n      },\n    }\n\n    // we do this only to have a working useEffect, so we can call onMounted\n    const trRef = React.createRef<HTMLTableRowElement>()\n    mountedItems.push({ ...item, element: trRef })\n\n    return (\n      <React.Fragment key={item.ssn}>\n        <TableRow\n          {...props}\n          {...params}\n          className={`dnb-table--${i % 2 ? 'even' : 'odd'} ${\n            item.expanded ? 'expanded' : ''\n          }`}\n          ref={trRef}\n        >\n          <TableData>\n            {/* The button \"bubbles\" the event just down */}\n            <Button\n              title={item.expanded ? 'Hide details' : 'Show more details'}\n              icon=\"chevron_down\"\n              size=\"small\"\n              right=\"large\"\n            />\n          </TableData>\n          <TableData>\n            <P>\n              {item.text} {children}\n            </P>\n          </TableData>\n        </TableRow>\n\n        <TableRow\n          className={`expanded-content dnb-no-focus ${\n            item.expanded ? 'expanded' : ''\n          }`}\n          tabIndex={-1}\n        >\n          <TableData colSpan={2}>\n            {item.expanded && (\n              <div className=\"expanded-content__outer\">\n                <div className=\"expanded-content__inner\">\n                  <P>What ever content ...</P>\n                  <Button variant=\"secondary\" top>\n                    {'🔥'}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </TableData>\n        </TableRow>\n      </React.Fragment>\n    )\n  })\n}\n\nconst StyledTable = styled(Table)`\n  table-layout: fixed;\n`\n\nconst TableRow = styled.tr`\n  &:not(.expanded-content):hover {\n    cursor: pointer;\n    opacity: 0.8;\n  }\n\n  .dnb-icon {\n    transition: transform 300ms ease-out;\n  }\n  &.expanded {\n    .dnb-icon {\n      transform: rotate(-180deg);\n    }\n  }\n\n  &.expanded-content {\n    /*\n      This is our expanded height (maxHeight)\n      NB: we can use max-height, because max-height is not supported in tr\n    */\n    max-height: 10rem;\n\n    transform: translateY(-10px);\n    opacity: 0;\n\n    transition: height 400ms ease-out, opacity 600ms ease-out,\n      transform 400ms ease-out;\n\n    td {\n      height: inherit;\n      padding: 0;\n      background-color: var(--color-white);\n\n      .expanded-content__outer {\n        height: inherit;\n      }\n\n      /* If we don't wrapp with an additional inner, then we get a jump in the animation */\n      .expanded-content__inner {\n        height: inherit;\n        padding: 2rem 0 2rem 3rem;\n\n        background-color: tomato;\n      }\n    }\n  }\n  &.expanded.expanded-content {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`\n\nconst TableData = styled.td`\n  .dnb-pagination__loadbar {\n    justify-content: flex-start;\n  }\n  .dnb-pagination__indicator,\n  .dnb-pagination__loadbar {\n    height: 6rem;\n  }\n\n  .dnb-p {\n    cursor: text;\n\n    font-feature-settings: 'pnum' on, 'lnum' on;\n    font-weight: var(--font-weight-bold);\n    font-size: var(--font-size-large);\n\n    /** reset css specificity */\n    .dnb-spacing &.dnb-h--large:not([class*='space__bottom']),\n    .dnb-core-style\n      .dnb-spacing\n      &.dnb-h--large:not([class*='space__bottom']) {\n      margin: 0;\n    }\n  }\n`\n\ntype HeightProps = {\n  element: HTMLButtonElement | HTMLTableCellElement\n  expanded?: boolean\n  animation?: boolean\n}\n\nconst setHeight = ({\n  element,\n  expanded = false,\n  animation = true,\n}: HeightProps) => {\n  if (\n    element &&\n    typeof window !== 'undefined' &&\n    window.requestAnimationFrame\n  ) {\n    // get tr element\n    if (/td/.test(element.nodeName)) {\n      element = element.parentElement as HTMLTableCellElement\n    }\n\n    // get the new height\n    const newHeight = expanded\n      ? window.getComputedStyle(element)['max-height'] // maxHeight\n      : element.scrollHeight\n\n    // make the animation\n    window.requestAnimationFrame(() => {\n      if (animation) {\n        element.style.height = '1px'\n      }\n      window.requestAnimationFrame(\n        () => (element.style.height = newHeight)\n      )\n    })\n  }\n}\n\nconst reorderDirection = (items, dir) =>\n  items.sort(({ text: A }, { text: B }) => {\n    const a = parseFloat(A)\n    const b = parseFloat(B)\n    return (dir === 'asc' ? a > b : a < b) ? 1 : -1\n  })\n\n// Page layout\nconst Wrapper = styled(Section)`\n  width: 100%;\n  background: var(--color-white);\n`\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {PaginationExampleInfinityLoadButton, PaginationExampleInfinityIndicator, PaginationExampleInfinityUnknown, PaginationExampleInfinityTable} from 'Docs/uilib/components/pagination/infinity-scroller/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Infinity scroller with load button\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A load button is shown at the bottom by having \", _jsx(_components.code, {\n        children: \"use_load_button={true}\"\n      }), \" - but here we define our \", _jsx(_components.code, {\n        children: \"startup_page={5}\"\n      }), \", so we also get a load button on top.\"]\n    }), \"\\n\", _jsx(PaginationExampleInfinityLoadButton, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Infinity scroller with custom load indicator\"\n    }), \"\\n\", _jsx(PaginationExampleInfinityIndicator, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Infinity scroller with unknown \", _jsx(_components.code, {\n        children: \"page_count\"\n      })]\n    }), \"\\n\", _jsx(PaginationExampleInfinityUnknown, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Advanced Table infinity scroller\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can find the code either on \", _jsx(_components.a, {\n        href: \"https://github.com/dnbexperience/eufemia/tree/main/packages/dnb-design-system-portal/src/docs/uilib/components/pagination/Examples.js\",\n        children: \"GitHub\"\n      }), \" or on \", _jsx(_components.a, {\n        href: \"https://codesandbox.io/s/eufemia-table-pagination-infinity-546f7\",\n        children: \"CodeSandbox\"\n      })]\n    }), \"\\n\", _jsx(PaginationExampleInfinityTable, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["HeightLimit","props","LargePage","PaginationExampleInfinityLoadButton","PaginationExampleInfinityIndicator","PaginationExampleInfinityUnknown","PaginationExampleInfinityTable","PaginationTableExample","className","spacing","left","size","bottom","tableItems","i","ssn","text","String","expanded","InfinityPaginationTable","maxPagesCount","Math","React","orderDirection","currentPage","cacheHash","setLocalPage","reorderDirection","serverDelayTimeout","setContent","items","perPageCount","onToggleExpanded","element","onExpanded","index","item","forceRerender","Date","setHeight","setTimeout","onMounted","current","animation","endInfinity","clearTimeout","action","console","pageNumber","sticky","scope","icon","icon_position","variant","on_click","resetInfinity","resetContent","setOrderDirection","title","o","mode","marker_element","fallback_element","colSpan","current_page","page_count","on_startup","on_change","InfinityPagination","children","mountedItems","cur","floor","idx","params","onClick","e","hasSelectedText","test","document","trRef","ref","right","tabIndex","top","StyledTable","TableRow","TableData","window","newHeight","a","parseFloat","b","dir","Wrapper","_createMdxContent","_components","Object","assign","h2","h3","p","code","_provideComponents","components","_jsxs","_Fragment","_jsx","href","wrapper","MDXLayout"],"sourceRoot":""}