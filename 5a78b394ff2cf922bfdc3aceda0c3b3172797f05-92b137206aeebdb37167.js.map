{"version":3,"file":"5a78b394ff2cf922bfdc3aceda0c3b3172797f05-92b137206aeebdb37167.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/icons/dnb/trash.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/form-row/FormRow.js","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/form-set/FormSet.js","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/radio/RadioGroupContext.js","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/radio/RadioGroup.js","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/radio/Radio.js","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/textarea/Textarea.js","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/toggle-button/ToggleButtonGroupContext.js","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/toggle-button/ToggleButtonGroup.js","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/toggle-button/ToggleButton.js"],"sourcesContent":["/** This file is auto generated by convertSvgToJsx.ts */\n\nimport React from 'react'\nconst trash = (props) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={16}\n    height={16}\n    fill=\"none\"\n    viewBox=\"0 0 16 16\"\n    {...props}\n  >\n    <path\n      stroke=\"#000\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={1.5}\n      d=\"M9.5 11.5v-5m-3 5v-5M1 3h14m-2.423 11.083a1 1 0 0 1-.997.917H4.42a1 1 0 0 1-.996-.917L2.5 3h11l-.923 11.083ZM9.5 1h-3a1 1 0 0 0-1 1v1h5V2a1 1 0 0 0-1-1Z\"\n    />\n  </svg>\n)\nexport default trash\n","/**\n * Web FormRow Component\n *\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {\n  extend,\n  extendPropsWithContextInClassComponent,\n  isTrue,\n  makeUniqueId,\n  validateDOMAttributes,\n} from '../../shared/component-helper'\nimport AlignmentHelper from '../../shared/AlignmentHelper'\n\nimport Context from '../../shared/Context'\nimport FormLabel from '../form-label/FormLabel'\nimport Section from '../section/Section'\nimport {\n  spacingPropTypes,\n  createSpacingClasses,\n} from '../space/SpacingHelper'\n\nexport const formRowPropTypes = {\n  id: PropTypes.string,\n  label: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n    PropTypes.node,\n  ]),\n  label_direction: PropTypes.oneOf(['vertical', 'horizontal']),\n  label_sr_only: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  label_id: PropTypes.string,\n  label_class: PropTypes.string,\n  no_label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  no_fieldset: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  locale: PropTypes.string,\n  wrap: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  direction: PropTypes.oneOf(['vertical', 'horizontal']),\n  vertical: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  centered: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  section_style: PropTypes.string,\n  section_spacing: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  globalStatus: PropTypes.shape({\n    id: PropTypes.string,\n    message: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  }),\n  responsive: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  skeleton: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  class: PropTypes.string,\n\n  skipContentWrapperIfNested: PropTypes.bool,\n\n  ...spacingPropTypes,\n\n  className: PropTypes.string,\n  children: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n    PropTypes.node,\n  ]),\n}\n\nexport const formRowDefaultProps = {\n  id: null,\n  label: null,\n  label_direction: null,\n  label_sr_only: null,\n  label_id: null,\n  label_class: null,\n  no_label: false,\n  no_fieldset: null,\n  locale: null,\n  wrap: null,\n  direction: null,\n  vertical: null,\n  centered: null,\n  section_style: null,\n  section_spacing: null,\n  globalStatus: null,\n  responsive: null,\n  disabled: null,\n  skeleton: null,\n  class: null,\n\n  skipContentWrapperIfNested: false,\n  className: null,\n  children: null,\n}\n\nexport default class FormRow extends React.PureComponent {\n  static contextType = Context\n\n  static propTypes = {\n    ...formRowPropTypes,\n  }\n\n  static defaultProps = {\n    ...formRowDefaultProps,\n  }\n\n  static getContent(props) {\n    let label = null\n    let children =\n      typeof props.children === 'function'\n        ? props.children(props)\n        : props.children\n\n    if (Array.isArray(props.children)) {\n      children = children.reduce((pV, cV) => {\n        if (cV && cV.type && cV.type.name === 'FormLabel') {\n          label = cV.props.children\n        } else {\n          pV.push(cV)\n        }\n        return pV\n      }, [])\n    }\n\n    return { label, children }\n  }\n\n  constructor(props) {\n    super(props)\n    this._id = props.id || makeUniqueId() // cause we need an id anyway\n\n    // We may considder to use this later to check if we are inside FormSet\n    // this.isInsideFormSet =\n    //   context.FormRow && context.FormRow.isInsideFormSet\n  }\n\n  render() {\n    // use only the props from context, who are available here anyway\n    const props = extendPropsWithContextInClassComponent(\n      this.props,\n      FormRow.defaultProps,\n      this.context.FormRow // nested FormRow\n    )\n\n    const {\n      label_direction,\n      label_sr_only,\n      label_id,\n      label_class,\n      no_fieldset,\n      no_label,\n      locale,\n      direction,\n      vertical,\n      centered,\n      section_style,\n      section_spacing,\n      globalStatus,\n      responsive,\n      disabled,\n      skeleton,\n      wrap,\n      className,\n      class: _className,\n      skipContentWrapperIfNested,\n\n      id: _id, // eslint-disable-line\n      label: _label, // eslint-disable-line\n\n      ...attributes\n    } = props\n\n    let { label } = props\n\n    const isNested =\n      this.context.FormRow && this.context.FormRow.itsMeAgain\n\n    // in case we have a label already, we split this out and use this one instead\n    const { label: nestedLabel, children } = FormRow.getContent(this.props)\n    if (!label && nestedLabel) {\n      label = nestedLabel\n    }\n    const hasLabel =\n      (typeof label === 'string' && label.length > 0) || label\n        ? true\n        : false\n\n    const id = this._id\n    const params = {\n      className: classnames(\n        'dnb-form-row',\n        (isTrue(vertical) || direction) &&\n          `dnb-form-row--${isTrue(vertical) ? 'vertical' : direction}`,\n        (isTrue(vertical) || label_direction) &&\n          `dnb-form-row--${\n            isTrue(vertical) ? 'vertical' : label_direction\n          }-label`, // <-- has label\n        centered && 'dnb-form-row--centered',\n        isNested && 'dnb-form-row--nested',\n        createSpacingClasses(props),\n        className,\n        _className\n      ),\n      ...attributes,\n    }\n\n    // also used for code markup simulation\n    validateDOMAttributes(this.props, params)\n\n    const providerContext = extend(this.context, {\n      locale: locale ? locale : this.context.locale,\n      FormRow: {\n        useId: () => {\n          if (this.isIsUsed) {\n            // make a new ID, as we used one\n            return makeUniqueId() // cause we need an id anyway\n          }\n          this.isIsUsed = true\n          return id\n        },\n        itsMeAgain: true,\n        hasLabel,\n        globalStatus,\n        direction,\n        vertical,\n        label_direction: isTrue(vertical) ? 'vertical' : label_direction,\n        responsive,\n        disabled,\n        skeleton,\n      },\n    })\n\n    const useFieldset = !isTrue(no_fieldset) && hasLabel\n\n    return (\n      <Context.Provider value={providerContext}>\n        <Fieldset useFieldset={useFieldset}>\n          <Section\n            style_type={section_style || 'transparent'}\n            spacing={section_spacing}\n            element=\"div\"\n            {...params}\n          >\n            <AlignmentHelper />\n\n            {label && (\n              <FormLabel\n                className={classnames('dnb-form-row__label', label_class)}\n                id={label_id ? label_id : id + '-label'}\n                for_id={useFieldset ? null : id} // we don't use for_id, because we don't have a single element to target to\n                text={label}\n                element={useFieldset ? 'legend' : 'label'}\n                label_direction={label_direction}\n                sr_only={label_sr_only}\n                disabled={disabled}\n                skeleton={skeleton}\n              />\n            )}\n\n            {isTrue(no_label) && (\n              <span\n                className=\"dnb-form-label dnb-form-row__label-dummy\"\n                aria-hidden\n              />\n            )}\n\n            {isNested && skipContentWrapperIfNested ? (\n              children\n            ) : (\n              <div\n                className={classnames(\n                  'dnb-form-row__content',\n                  isTrue(wrap) && 'dnb-form-row__content--wrap',\n                  label && !isTrue(vertical) && direction !== 'vertical',\n                  responsive && 'dnb-responsive-component'\n                )}\n              >\n                {children}\n              </div>\n            )}\n          </Section>\n        </Fieldset>\n      </Context.Provider>\n    )\n  }\n}\n\nconst Fieldset = ({\n  useFieldset,\n  children,\n  className = null,\n  ...props\n}) => {\n  if (useFieldset) {\n    return (\n      <fieldset\n        className={classnames('dnb-form-row__fieldset', className)}\n        {...props}\n      >\n        {children}\n      </fieldset>\n    )\n  }\n  return (\n    <div\n      className={classnames('dnb-form-row__fieldset', className)}\n      {...props}\n    >\n      {children}\n    </div>\n  )\n}\n\n// docs (or use ptd): https://github.com/facebook/prop-types#usage\nFieldset.propTypes = {\n  children: PropTypes.node,\n  useFieldset: PropTypes.bool,\n  className: PropTypes.string,\n}\nFieldset.defaultProps = {\n  children: null,\n  useFieldset: false,\n  className: null,\n}\n","/**\n * Web FormSet Component\n *\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {\n  isTrue,\n  makeUniqueId,\n  extend,\n  extendPropsWithContextInClassComponent,\n  validateDOMAttributes,\n  processChildren,\n  dispatchCustomElementEvent,\n} from '../../shared/component-helper'\nimport { createSpacingClasses } from '../space/SpacingHelper'\nimport Context from '../../shared/Context'\nimport { formRowDefaultProps, formRowPropTypes } from '../form-row/FormRow'\n\nexport default class FormSet extends React.PureComponent {\n  static contextType = Context\n\n  static propTypes = {\n    element: PropTypes.string,\n    no_form: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    skeleton: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    prevent_submit: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n    ]),\n\n    ...formRowPropTypes,\n\n    on_submit: PropTypes.func,\n  }\n\n  static defaultProps = {\n    element: 'form',\n    no_form: false,\n    disabled: null,\n    skeleton: null,\n    prevent_submit: false,\n\n    on_submit: null,\n  }\n\n  static getContent(props) {\n    return processChildren(props)\n  }\n\n  constructor(props) {\n    super(props)\n    this._id = props.id || makeUniqueId() // cause we need an id anyway\n  }\n\n  onSubmitHandler = (event) => {\n    const { prevent_submit } = this.props\n    if (isTrue(prevent_submit)) {\n      event.preventDefault()\n    }\n    dispatchCustomElementEvent(this, 'on_submit', { event })\n  }\n\n  render() {\n    // use only the props from context, who are available here anyway\n    const props = extendPropsWithContextInClassComponent(\n      this.props,\n      FormSet.defaultProps,\n      this.context.FormSet\n    )\n\n    const {\n      element,\n      locale,\n      no_form,\n      prevent_submit, // eslint-disable-line\n      id, // eslint-disable-line\n      className,\n      class: _className,\n\n      ...rest\n    } = props\n\n    const allowedProps = Object.entries(rest).reduce((acc, [k, v]) => {\n      if (\n        typeof formRowDefaultProps[k] !== 'undefined' &&\n        k !== 'id' &&\n        k !== 'children' &&\n        k !== 'label'\n      ) {\n        acc[k] = v\n      }\n      return acc\n    }, {})\n    const attributes = Object.entries(rest).reduce((acc, [k, v]) => {\n      if (typeof allowedProps[k] === 'undefined' && k !== 'children') {\n        acc[k] = v\n      }\n      return acc\n    }, {})\n\n    const params = {\n      className: classnames(\n        'dnb-form-set',\n        createSpacingClasses(this.props),\n        className,\n        _className\n      ),\n      ...attributes,\n    }\n\n    if (!isTrue(no_form)) {\n      params.onSubmit = this.onSubmitHandler\n    }\n\n    // also used for code markup simulation\n    validateDOMAttributes(this.props, params)\n\n    const content = FormSet.getContent(this.props)\n\n    const providerContext = extend(this.context, {\n      locale: locale ? locale : this.context.locale,\n      FormRow: allowedProps,\n      // isInsideFormSet: true // We may considder to use this later to check if we are inside FormSet\n    })\n\n    const Element = isTrue(no_form) ? 'div' : element\n\n    return (\n      <Context.Provider value={providerContext}>\n        <Element {...params}>{content}</Element>\n      </Context.Provider>\n    )\n  }\n}\n","/**\n * Web RadioGroup Context\n *\n */\n\nimport React from 'react'\n\nconst RadioGroupContext = React.createContext({})\n\nexport default RadioGroupContext\n","/**\n * Web RadioGroup Component\n *\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {\n  extendPropsWithContextInClassComponent,\n  makeUniqueId,\n  validateDOMAttributes,\n  getStatusState,\n  combineDescribedBy,\n  combineLabelledBy,\n  dispatchCustomElementEvent,\n} from '../../shared/component-helper'\nimport { includeValidProps } from '../form-row/FormRowHelpers'\nimport {\n  spacingPropTypes,\n  createSpacingClasses,\n} from '../space/SpacingHelper'\nimport AlignmentHelper from '../../shared/AlignmentHelper'\nimport FormRow from '../form-row/FormRow'\nimport FormStatus from '../form-status/FormStatus'\nimport Context from '../../shared/Context'\nimport Suffix from '../../shared/helpers/Suffix'\nimport RadioGroupContext from './RadioGroupContext'\n\n/**\n * The radio component is our enhancement of the classic radio button. It acts like a radio. Example: On/off, yes/no.\n */\nexport default class RadioGroup extends React.PureComponent {\n  static contextType = Context\n\n  static propTypes = {\n    label: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    label_direction: PropTypes.oneOf(['horizontal', 'vertical']),\n    label_sr_only: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    label_position: PropTypes.oneOf(['left', 'right']),\n    title: PropTypes.string,\n    no_fieldset: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    skeleton: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    id: PropTypes.string,\n    name: PropTypes.string,\n    size: PropTypes.oneOf(['default', 'medium', 'large']),\n    status: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    status_state: PropTypes.string,\n    status_props: PropTypes.object,\n    status_no_animation: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n    ]),\n    globalStatus: PropTypes.shape({\n      id: PropTypes.string,\n      message: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    }),\n    suffix: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    layout_direction: PropTypes.oneOf(['column', 'row']),\n    vertical: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    value: PropTypes.string,\n    attributes: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    ...spacingPropTypes,\n\n    class: PropTypes.string,\n    className: PropTypes.string,\n    children: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n\n    on_change: PropTypes.func,\n  }\n\n  static defaultProps = {\n    label: null,\n    label_direction: null,\n    label_sr_only: null,\n    label_position: null,\n    title: null,\n    no_fieldset: null,\n    disabled: null,\n    skeleton: null,\n    id: null,\n    name: null,\n    size: null,\n    status: null,\n    status_state: 'error',\n    status_props: null,\n    status_no_animation: null,\n    globalStatus: null,\n    suffix: null,\n    vertical: null,\n    layout_direction: 'row',\n    value: undefined,\n    attributes: null,\n    class: null,\n\n    className: null,\n    children: null,\n\n    on_change: null,\n  }\n\n  static parseChecked = (state) => /true|on/.test(String(state))\n\n  static getDerivedStateFromProps(props, state) {\n    if (state._listenForPropChanges) {\n      if (props.value !== state._value) {\n        state.value = props.value\n      }\n      if (typeof props.value !== 'undefined') {\n        state._value = props.value\n      }\n    }\n    state._listenForPropChanges = true\n\n    return state\n  }\n\n  constructor(props) {\n    super(props)\n    this._refInput = React.createRef()\n    this._id = props.id || makeUniqueId() // cause we need an id anyway\n    this._name = props.name || this._id\n    this.state = {\n      _listenForPropChanges: true,\n    }\n  }\n\n  onChangeHandler = ({ value, event }) => {\n    this.setState({ value, _listenForPropChanges: false })\n    dispatchCustomElementEvent(this, 'on_change', {\n      value,\n      event,\n    })\n  }\n\n  render() {\n    // use only the props from context, who are available here anyway\n    const props = extendPropsWithContextInClassComponent(\n      this.props,\n      RadioGroup.defaultProps,\n      includeValidProps(this.context.FormRow),\n      this.context.RadioGroup\n    )\n\n    const {\n      status,\n      status_state,\n      status_props,\n      status_no_animation,\n      globalStatus,\n      suffix,\n      label,\n      label_direction,\n      label_sr_only,\n      label_position,\n      vertical,\n      layout_direction,\n      no_fieldset,\n      size,\n      disabled,\n      skeleton,\n      className,\n      class: _className,\n\n      id: _id, // eslint-disable-line\n      name: _name, // eslint-disable-line\n      value: _value, // eslint-disable-line\n      children, // eslint-disable-line\n      on_change, // eslint-disable-line\n\n      ...rest\n    } = props\n\n    const { value } = this.state\n\n    const id = this._id\n    const showStatus = getStatusState(status)\n\n    const classes = classnames(\n      'dnb-radio-group',\n      status && `dnb-radio-group__status--${status_state}`,\n      `dnb-radio-group--${layout_direction}`,\n      'dnb-form-component',\n      createSpacingClasses(props),\n      className,\n      _className\n    )\n\n    const params = {\n      ...rest,\n    }\n\n    if (showStatus || suffix) {\n      params['aria-describedby'] = combineDescribedBy(\n        params,\n        showStatus ? id + '-status' : null,\n        suffix ? id + '-suffix' : null\n      )\n    }\n    if (label) {\n      params['aria-labelledby'] = combineLabelledBy(params, id + '-label')\n    }\n\n    // also used for code markup simulation\n    validateDOMAttributes(this.props, params)\n\n    const context = {\n      name: this._name,\n      value,\n      size,\n      disabled,\n      label_position,\n      onChange: this.onChangeHandler,\n    }\n\n    const formRowParams = {\n      id,\n      label,\n      label_id: id + '-label', // send the id along, so the FormRow component can use it\n      label_direction,\n      label_sr_only,\n      direction: label_direction,\n      vertical,\n      disabled,\n      skeleton,\n      no_fieldset,\n      skipContentWrapperIfNested: true,\n    }\n\n    return (\n      <RadioGroupContext.Provider value={context}>\n        <div className={classes}>\n          <AlignmentHelper />\n          <FormRow {...formRowParams}>\n            <span\n              id={id}\n              className=\"dnb-radio-group__shell\"\n              role=\"radiogroup\"\n              {...params}\n            >\n              {children}\n\n              {suffix && (\n                <Suffix\n                  className=\"dnb-radio-group__suffix\"\n                  id={id + '-suffix'} // used for \"aria-describedby\"\n                  context={props}\n                >\n                  {suffix}\n                </Suffix>\n              )}\n\n              <FormStatus\n                show={showStatus}\n                id={id + '-form-status'}\n                globalStatus={globalStatus}\n                label={label}\n                text={status}\n                state={status_state}\n                text_id={id + '-status'} // used for \"aria-describedby\"\n                width_selector={id + ', ' + id + '-label'}\n                no_animation={status_no_animation}\n                skeleton={skeleton}\n                {...status_props}\n              />\n            </span>\n          </FormRow>\n        </div>\n      </RadioGroupContext.Provider>\n    )\n  }\n}\n","/**\n * Web Radio Component\n *\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport keycode from 'keycode'\nimport {\n  isTrue,\n  makeUniqueId,\n  extendPropsWithContextInClassComponent,\n  validateDOMAttributes,\n  getStatusState,\n  combineDescribedBy,\n  dispatchCustomElementEvent,\n} from '../../shared/component-helper'\nimport AlignmentHelper from '../../shared/AlignmentHelper'\nimport {\n  spacingPropTypes,\n  createSpacingClasses,\n} from '../space/SpacingHelper'\nimport {\n  skeletonDOMAttributes,\n  createSkeletonClass,\n} from '../skeleton/SkeletonHelper'\n\nimport FormLabel from '../form-label/FormLabel'\nimport FormStatus from '../form-status/FormStatus'\nimport RadioGroup from './RadioGroup'\nimport RadioGroupContext from './RadioGroupContext'\nimport Context from '../../shared/Context'\nimport Suffix from '../../shared/helpers/Suffix'\nimport { includeValidProps } from '../form-row/FormRowHelpers'\n\n/**\n * The radio component is our enhancement of the classic radio button.\n */\nexport default class Radio extends React.PureComponent {\n  static contextType = RadioGroupContext\n\n  static propTypes = {\n    label: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    label_sr_only: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    label_position: PropTypes.oneOf(['left', 'right']),\n    checked: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    id: PropTypes.string,\n    element: PropTypes.node,\n    group: PropTypes.string,\n    size: PropTypes.oneOf(['default', 'medium', 'large']),\n    status: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    status_state: PropTypes.string,\n    status_props: PropTypes.object,\n    status_no_animation: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n    ]),\n    globalStatus: PropTypes.shape({\n      id: PropTypes.string,\n      message: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    }),\n    suffix: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    value: PropTypes.string,\n    attributes: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    skeleton: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    readOnly: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n\n    ...spacingPropTypes,\n\n    class: PropTypes.string,\n    className: PropTypes.string,\n    children: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n    on_change: PropTypes.func,\n    on_state_update: PropTypes.func,\n  }\n\n  static defaultProps = {\n    label: null,\n    label_sr_only: null,\n    label_position: null,\n    checked: null,\n    disabled: null,\n    id: null,\n    size: null,\n    element: 'input',\n    group: null,\n    status: null,\n    status_state: 'error',\n    status_props: null,\n    status_no_animation: null,\n    globalStatus: null,\n    suffix: null,\n    value: '',\n    attributes: null,\n    readOnly: false,\n    skeleton: null,\n    class: null,\n\n    className: null,\n    children: null,\n\n    on_change: null,\n    on_state_update: null,\n  }\n\n  static Group = RadioGroup\n\n  static parseChecked = (state) => /true|on/.test(String(state))\n\n  static getDerivedStateFromProps(props, state) {\n    if (state._listenForPropChanges) {\n      if (props.checked !== state._checked) {\n        state.checked = Radio.parseChecked(props.checked)\n      }\n    }\n    state._listenForPropChanges = true\n\n    if (state.checked !== state.__checked) {\n      dispatchCustomElementEvent({ props }, 'on_state_update', {\n        checked: state.checked,\n      })\n    }\n\n    state._checked = props.checked\n    state.__checked = state.checked\n\n    return state\n  }\n\n  constructor(props) {\n    super(props)\n    this._refInput = React.createRef()\n    this._id = props.id || makeUniqueId() // cause we need an id anyway\n    this.state = {\n      _listenForPropChanges: true,\n    }\n  }\n\n  onKeyDownHandler = (event) => {\n    const key = keycode(event)\n    // only have key support if there is only a single radio\n    if (this.isInNoGroup()) {\n      switch (key) {\n        case 'enter':\n          this.onChangeHandler(event)\n          break\n      }\n    } else if (this.isContextGroupOrSingle()) {\n      switch (key) {\n        case 'space':\n        case 'enter': {\n          const { value } = this.context\n          if (value !== null && typeof value !== 'undefined') {\n            event.preventDefault()\n          }\n          if (key === 'enter') {\n            const checked = !this.state.checked\n            this.setState({ checked, _listenForPropChanges: false })\n          }\n          break\n        }\n      }\n    } else {\n      // else we only use the native support, and don't want space support\n      // because only arrow keys has to be used\n      switch (key) {\n        case 'space': {\n          event.preventDefault()\n          break\n        }\n      }\n    }\n    dispatchCustomElementEvent(this, 'on_key_down', { event })\n  }\n\n  onChangeHandler = (_event) => {\n    const event = _event\n    if (isTrue(this.props.readOnly)) {\n      return event.preventDefault()\n    }\n    const value = event.target.value\n    const checked = !this.state.checked\n\n    // delay in case we have a props group only\n    if (this.isPlainGroup()) {\n      // in case we have a false \"hasContext\" but a \"group\"\n      // then we have to use a delay, to overwrite the uncrontrolled state\n      setTimeout(() => {\n        this.setState({ checked, _listenForPropChanges: false }, () =>\n          this.callOnChange({ value, checked, event })\n        )\n      }, 1)\n    } else {\n      this.setState({ checked, _listenForPropChanges: false })\n      this.callOnChange({ value, checked, event })\n    }\n  }\n\n  // only support on change if there is either:\n  // 1. context group usage\n  // 2. or a single, no group usage\n  isContextGroupOrSingle = () =>\n    typeof this.context.value !== 'undefined' && !this.props.group\n  isPlainGroup = () =>\n    typeof this.context.value === 'undefined' && this.props.group\n  isInNoGroup = () =>\n    typeof this.context.value === 'undefined' && !this.props.group\n\n  onClickHandler = (event) => {\n    if (isTrue(this.props.readOnly)) {\n      return event.preventDefault()\n    }\n    // only have click support if there are more plain radio\n    if (!this.isPlainGroup()) {\n      return\n    }\n    const value = event.target.value\n    const checked = event.target.checked\n    this.callOnChange({ value, checked, event })\n  }\n\n  callOnChange = ({ value, checked, event }) => {\n    const { group } = this.props\n    if (this.context.onChange) {\n      this.context.onChange({\n        value,\n      })\n    }\n    dispatchCustomElementEvent(this, 'on_change', {\n      group,\n      checked,\n      value,\n      event,\n    })\n\n    // help firefox and safari to have an correct state after a click\n    if (this._refInput.current) {\n      this._refInput.current.focus()\n    }\n  }\n\n  render() {\n    return (\n      <Context.Consumer>\n        {(context) => {\n          // from internal context\n          const contextProps = extendPropsWithContextInClassComponent(\n            this.props,\n            Radio.defaultProps,\n            this.context\n          )\n\n          // use only the props from context, who are available here anyway\n          const props = extendPropsWithContextInClassComponent(\n            this.props,\n            Radio.defaultProps,\n            contextProps,\n            { skeleton: context?.skeleton },\n            includeValidProps(context.FormRow),\n            context.Radio\n          )\n\n          const {\n            status,\n            status_state,\n            status_props,\n            status_no_animation,\n            globalStatus,\n            suffix,\n            element,\n            label,\n            label_sr_only,\n            label_position,\n            size,\n            readOnly,\n            skeleton,\n            className,\n            class: _className,\n            id: _id, // eslint-disable-line\n            group: _group, // eslint-disable-line\n            value: _value, // eslint-disable-line\n            checked: _checked, // eslint-disable-line\n            disabled: _disabled, // eslint-disable-line\n            children, // eslint-disable-line\n            on_change, // eslint-disable-line\n            on_state_update, // eslint-disable-line\n\n            ...rest\n          } = props\n\n          let { checked } = this.state\n          let { value, group, disabled } = props // get it from context also\n\n          const hasContext = typeof this.context.name !== 'undefined'\n\n          if (hasContext) {\n            if (typeof this.context.value !== 'undefined') {\n              checked = this.context.value === value\n            }\n            group = this.context.name\n            if (isTrue(this.context.disabled) && disabled !== false) {\n              disabled = true\n            }\n          } else if (typeof rest.name !== 'undefined') {\n            group = rest.name\n          }\n\n          const id = this._id\n          const showStatus = getStatusState(status)\n\n          const mainParams = {\n            className: classnames(\n              'dnb-radio',\n              status && `dnb-radio__status--${status_state}`,\n              size && `dnb-radio--${size}`,\n              label &&\n                `dnb-radio--label-position-${label_position || 'right'}`,\n              createSpacingClasses(props),\n              className,\n              _className\n            ),\n          }\n\n          let inputParams = {\n            role: hasContext || group ? 'radio' : null,\n            type: hasContext || group ? 'radio' : 'checkbox', // overwriting the type\n          }\n\n          if (!group) {\n            inputParams.type = 'checkbox'\n            inputParams.role = 'radio' // breaks axe test\n          }\n\n          if (showStatus || suffix) {\n            inputParams['aria-describedby'] = combineDescribedBy(\n              inputParams,\n              showStatus ? id + '-status' : null,\n              suffix ? id + '-suffix' : null\n            )\n          }\n          if (readOnly) {\n            inputParams['aria-readonly'] = inputParams.readOnly = true\n          }\n\n          inputParams = Object.assign(inputParams, rest)\n\n          skeletonDOMAttributes(inputParams, skeleton, this.context)\n\n          // also used for code markup simulation\n          validateDOMAttributes(this.props, inputParams)\n\n          const labelComp = label && (\n            <FormLabel\n              id={id + '-label'}\n              for_id={id}\n              text={label}\n              disabled={disabled}\n              skeleton={skeleton}\n              sr_only={label_sr_only}\n            />\n          )\n\n          const Element = element || 'input'\n\n          return (\n            <span {...mainParams}>\n              <span className=\"dnb-radio__order\">\n                {label_position === 'left' && labelComp}\n\n                <span className=\"dnb-radio__inner\">\n                  <AlignmentHelper />\n\n                  <FormStatus\n                    show={showStatus}\n                    id={id + '-form-status'}\n                    globalStatus={globalStatus}\n                    label={label}\n                    text_id={id + '-status'} // used for \"aria-describedby\"\n                    width_selector={id + ', ' + id + '-label'}\n                    text={status}\n                    state={status_state}\n                    no_animation={status_no_animation}\n                    skeleton={skeleton}\n                    {...status_props}\n                  />\n\n                  <span className=\"dnb-radio__row\">\n                    <span className=\"dnb-radio__shell\">\n                      <Element\n                        type=\"radio\"\n                        value={value}\n                        id={id}\n                        name={group}\n                        className=\"dnb-radio__input\"\n                        checked={checked}\n                        aria-checked={\n                          this.isPlainGroup() ? undefined : checked\n                        }\n                        disabled={isTrue(disabled)}\n                        ref={this._refInput}\n                        {...inputParams}\n                        onChange={this.onChangeHandler}\n                        onClick={this.onClickHandler}\n                        onKeyDown={this.onKeyDownHandler}\n                      />\n\n                      <span\n                        className={classnames(\n                          'dnb-radio__button',\n                          createSkeletonClass(\n                            'shape',\n                            skeleton,\n                            this.context\n                          )\n                        )}\n                        aria-hidden\n                      />\n                      <span className=\"dnb-radio__focus\" aria-hidden />\n                      <span className=\"dnb-radio__dot\" aria-hidden />\n                    </span>\n\n                    {label_position !== 'left' && labelComp}\n\n                    {suffix && (\n                      <Suffix\n                        className=\"dnb-radio__suffix\"\n                        id={id + '-suffix'} // used for \"aria-describedby\"\n                        context={props}\n                      >\n                        {suffix}\n                      </Suffix>\n                    )}\n                  </span>\n                </span>\n              </span>\n            </span>\n          )\n        }}\n      </Context.Consumer>\n    )\n  }\n}\n","/**\n * Web Textarea Component\n *\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport FormLabel from '../form-label/FormLabel'\nimport FormStatus from '../form-status/FormStatus'\nimport {\n  isTrue,\n  makeUniqueId,\n  extendPropsWithContextInClassComponent,\n  validateDOMAttributes,\n  processChildren,\n  getStatusState,\n  combineDescribedBy,\n  warn,\n  dispatchCustomElementEvent,\n} from '../../shared/component-helper'\nimport { includeValidProps } from '../form-row/FormRowHelpers'\nimport AlignmentHelper from '../../shared/AlignmentHelper'\nimport {\n  spacingPropTypes,\n  createSpacingClasses,\n} from '../space/SpacingHelper'\nimport {\n  skeletonDOMAttributes,\n  createSkeletonClass,\n} from '../skeleton/SkeletonHelper'\n\nimport Context from '../../shared/Context'\nimport Suffix from '../../shared/helpers/Suffix'\n\n/**\n * The textarea component is an umbrella component for all textareas which share the same style as the classic `text` textarea field.\n */\nexport default class Textarea extends React.PureComponent {\n  static contextType = Context\n\n  static propTypes = {\n    value: PropTypes.string,\n    id: PropTypes.string,\n    label: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    label_direction: PropTypes.oneOf(['horizontal', 'vertical']),\n    label_sr_only: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    status: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    textarea_state: PropTypes.string,\n    status_state: PropTypes.string,\n    status_props: PropTypes.object,\n    status_no_animation: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n    ]),\n    globalStatus: PropTypes.shape({\n      id: PropTypes.string,\n      message: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    }),\n    suffix: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    placeholder: PropTypes.string,\n    align: PropTypes.oneOf(['left', 'right']),\n    stretch: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    skeleton: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    autoresize: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    autoresize_max_rows: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    class: PropTypes.string,\n    textarea_class: PropTypes.string,\n    textarea_attributes: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.object,\n    ]),\n    readOnly: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    cols: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    inner_ref: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n    ...spacingPropTypes,\n\n    className: PropTypes.string,\n    textarea_element: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n\n    on_change: PropTypes.func,\n    on_focus: PropTypes.func,\n    on_blur: PropTypes.func,\n    on_key_down: PropTypes.func,\n    on_state_update: PropTypes.func,\n  }\n\n  static defaultProps = {\n    value: 'initval',\n    id: null,\n    label: null,\n    label_direction: null,\n    label_sr_only: null,\n    status: null,\n    textarea_state: null,\n    status_state: 'error',\n    status_props: null,\n    status_no_animation: null,\n    globalStatus: null,\n    suffix: null,\n    placeholder: null,\n    align: null,\n    stretch: null,\n    disabled: null,\n    skeleton: null,\n    autoresize: null,\n    autoresize_max_rows: null,\n    textarea_class: null,\n    class: null,\n    textarea_attributes: null,\n    readOnly: false,\n    rows: null,\n    cols: null,\n    inner_ref: null,\n\n    className: null,\n    textarea_element: null,\n    children: null,\n\n    on_change: null,\n    on_focus: null,\n    on_blur: null,\n    on_key_down: null,\n    on_state_update: null,\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const value = Textarea.getValue(props)\n    if (\n      state._listenForPropChanges &&\n      value !== 'initval' &&\n      value !== state.value\n    ) {\n      if (\n        value !== state.value &&\n        value !== state._value &&\n        typeof props.on_state_update === 'function'\n      ) {\n        dispatchCustomElementEvent({ props }, 'on_state_update', { value })\n      }\n      state.value = value\n    }\n    if (props.textarea_state) {\n      state.textareaState = props.textarea_state\n    }\n    state._listenForPropChanges = true\n    return state\n  }\n\n  static hasValue(value) {\n    return (\n      ((typeof value === 'string' || typeof value === 'number') &&\n        String(value).length > 0) ||\n      false\n    )\n  }\n\n  static getValue(props) {\n    const value = processChildren(props)\n    if (value === '' || Textarea.hasValue(value)) {\n      return value\n    }\n    return props.value\n  }\n\n  state = {\n    textareaState: 'virgin',\n    value: null,\n    _value: null,\n  }\n\n  constructor(props) {\n    super(props)\n\n    this._ref = props.inner_ref || React.createRef()\n    this._id = props.id || makeUniqueId() // cause we need an id anyway\n\n    // make sure we don't trigger getDerivedStateFromProps on startup\n    this.state._listenForPropChanges = true\n    if (props.textarea_state) {\n      this.state.textareaState = props.textarea_state\n    }\n    this.state._value = props.value\n  }\n  componentDidMount() {\n    if (isTrue(this.props.autoresize) && typeof window !== 'undefined') {\n      this.setAutosize()\n      try {\n        this.resizeObserver = new ResizeObserver(this.setAutosize)\n        this.resizeObserver.observe(document.body)\n      } catch (e) {\n        window.addEventListener('resize', this.setAutosize)\n      }\n    }\n  }\n  componentWillUnmount() {\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect()\n      this.resizeObserver = null\n    }\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('resize', this.setAutosize)\n    }\n  }\n  onFocusHandler = (event) => {\n    const { value } = this._ref.current\n    this.setState({\n      value,\n      _listenForPropChanges: false,\n      textareaState: 'focus',\n    })\n    dispatchCustomElementEvent(this, 'on_focus', { value, event })\n  }\n  onBlurHandler = (event) => {\n    const { value } = event.target\n    this.setState({\n      value,\n      _listenForPropChanges: false,\n      textareaState: Textarea.hasValue(value) ? 'dirty' : 'initial',\n    })\n    dispatchCustomElementEvent(this, 'on_blur', { value, event })\n  }\n  onChangeHandler = (event) => {\n    const { value } = event.target\n\n    if (isTrue(this.props.autoresize)) {\n      this.prepareAutosize()\n    }\n\n    const rows = this.getRows(value)\n\n    const ret = dispatchCustomElementEvent(this, 'on_change', {\n      value,\n      rows,\n      event,\n    })\n    if (ret !== false) {\n      this.setState({ value, _listenForPropChanges: false })\n      if (isTrue(this.props.autoresize)) {\n        this.setAutosize(rows)\n      }\n    }\n  }\n  onKeyDownHandler = (event) => {\n    const rows = this.getRows()\n    const { value } = event.target\n    dispatchCustomElementEvent(this, 'on_key_down', {\n      value,\n      rows,\n      event,\n    })\n  }\n  prepareAutosize = () => {\n    const elem = this._ref.current\n    if (!elem) {\n      return // stop here if no element was gotten\n    }\n    try {\n      elem.style.height = 'auto'\n    } catch (e) {\n      warn(e)\n    }\n  }\n  setAutosize = (rows = null) => {\n    const elem = this._ref.current\n    if (!elem) {\n      return // stop here if no element was gotten\n    }\n    try {\n      if (typeof this._heightOffset === 'undefined') {\n        this._heightOffset = elem.offsetHeight - elem.clientHeight\n      }\n\n      elem.style.height = 'auto'\n\n      // get rows after we set height to auto, this way we get 100% correct rows\n      const lineHeight = this.getLineHeight()\n      let newHeight = elem.scrollHeight + this._heightOffset\n      if (!rows) {\n        rows = this.getRows()\n      }\n\n      if (rows === 1) {\n        if (newHeight > lineHeight) {\n          newHeight = lineHeight\n        }\n      }\n\n      const maxRows = parseFloat(this.props.autoresize_max_rows)\n      if (maxRows > 0) {\n        const maxHeight = maxRows * lineHeight\n\n        if (rows > maxRows || newHeight > maxHeight) {\n          newHeight = maxHeight\n        }\n      }\n\n      elem.style.height = newHeight + 'px'\n    } catch (e) {\n      warn(e)\n    }\n  }\n  getRows() {\n    return (\n      Math.floor(this._ref.current.scrollHeight / this.getLineHeight()) ||\n      1\n    )\n  }\n  getLineHeight() {\n    return parseFloat(getComputedStyle(this._ref.current).lineHeight) || 0\n  }\n  render() {\n    // use only the props from context, who are available here anyway\n    const props = extendPropsWithContextInClassComponent(\n      this.props,\n      Textarea.defaultProps,\n      { skeleton: this.context?.skeleton },\n      this.context.getTranslation(this.props).Textarea,\n      includeValidProps(this.context.FormRow),\n      this.context.Textarea\n    )\n\n    const {\n      label,\n      label_direction,\n      label_sr_only,\n      status,\n      status_state,\n      status_props,\n      status_no_animation,\n      globalStatus,\n      suffix,\n      disabled,\n      skeleton,\n      stretch,\n      placeholder,\n      align,\n      textarea_class,\n      readOnly,\n      textarea_attributes,\n      class: _className,\n      className,\n\n      autoresize,\n      autoresize_max_rows, //eslint-disable-line\n      id: _id, //eslint-disable-line\n      children, //eslint-disable-line\n      value: _value, //eslint-disable-line\n      textarea_element: _textarea_element, //eslint-disable-line\n\n      ...attributes\n    } = props\n\n    const { value, textareaState } = this.state\n\n    const id = this._id\n    const showStatus = getStatusState(status)\n    const hasValue = Textarea.hasValue(value)\n\n    // pass along all props we wish to have as params\n    let { textarea_element: TextareaElement } = props\n\n    const textareaAttributes = textarea_attributes\n      ? typeof textarea_attributes === 'string'\n        ? JSON.parse(textarea_attributes)\n        : textarea_attributes\n      : {}\n\n    const textareaParams = {\n      className: classnames('dnb-textarea__textarea', textarea_class),\n      role: 'textbox',\n      value: hasValue ? value : '',\n      id,\n      disabled: isTrue(disabled) || isTrue(skeleton),\n      name: id,\n      'aria-placeholder': placeholder,\n      ...attributes,\n      ...textareaAttributes,\n      onChange: this.onChangeHandler,\n      onFocus: this.onFocusHandler,\n      onBlur: this.onBlurHandler,\n      // onPaste: this.onChangeHandler,\n      onKeyDown: this.onKeyDownHandler,\n    }\n\n    // we may considder using: aria-details\n    if (showStatus || suffix) {\n      textareaParams['aria-describedby'] = combineDescribedBy(\n        textareaParams,\n        showStatus ? id + '-status' : null,\n        suffix ? id + '-suffix' : null\n      )\n    }\n    if (readOnly) {\n      textareaParams['aria-readonly'] = textareaParams.readOnly = true\n    }\n\n    const mainParams = {\n      className: classnames(\n        'dnb-textarea',\n        `dnb-textarea--${textareaState}`,\n        hasValue && 'dnb-textarea--has-content',\n        align && `dnb-textarea__align--${align}`,\n        status && `dnb-textarea__status--${status_state}`,\n        autoresize && 'dnb-textarea__autoresize',\n        label_direction && `dnb-textarea--${label_direction}`,\n        isTrue(stretch) && `dnb-textarea--stretch`,\n        'dnb-form-component',\n        createSkeletonClass(null, skeleton),\n        createSpacingClasses(props),\n        _className,\n        className\n      ),\n    }\n\n    const innerParams = {\n      className: classnames(\n        'dnb-textarea__inner',\n        createSkeletonClass('shape', skeleton, this.context)\n      ),\n    }\n\n    const shellParams = {\n      className: classnames('dnb-textarea__shell'),\n    }\n\n    if (isTrue(disabled) || isTrue(skeleton)) {\n      shellParams['aria-disabled'] = true\n    }\n\n    // to show the ending dots on a placeholder, if the text is longer\n    const placeholderStyle =\n      parseFloat(this.props.rows) > 0\n        ? {\n            '--textarea-rows': parseFloat(this.props.rows),\n            // '--textarea-cols': parseFloat(this.props.cols)\n          }\n        : null\n\n    skeletonDOMAttributes(innerParams, skeleton, this.context)\n\n    // also used for code markup simulation\n    validateDOMAttributes(this.props, textareaParams)\n    validateDOMAttributes(null, innerParams)\n    validateDOMAttributes(null, shellParams)\n\n    if (TextareaElement && typeof TextareaElement === 'function') {\n      TextareaElement = TextareaElement(textareaParams, this._ref)\n    } else if (!TextareaElement && _textarea_element) {\n      TextareaElement = _textarea_element\n    }\n\n    return (\n      <span {...mainParams}>\n        {label && (\n          <FormLabel\n            id={id + '-label'}\n            for_id={id}\n            text={label}\n            label_direction={label_direction}\n            sr_only={label_sr_only}\n            disabled={disabled}\n            skeleton={skeleton}\n          />\n        )}\n\n        <span {...innerParams}>\n          <AlignmentHelper />\n\n          <FormStatus\n            show={showStatus}\n            id={id + '-form-status'}\n            globalStatus={globalStatus}\n            label={label}\n            text_id={id + '-status'} // used for \"aria-describedby\"\n            text={status}\n            state={status_state}\n            no_animation={status_no_animation}\n            skeleton={skeleton}\n            {...status_props}\n          />\n\n          <span className=\"dnb-textarea__row\">\n            <span {...shellParams}>\n              {TextareaElement || (\n                <textarea ref={this._ref} {...textareaParams} />\n              )}\n\n              {placeholder && (\n                <span\n                  aria-hidden\n                  className={classnames(\n                    'dnb-textarea__placeholder',\n                    align ? `dnb-textarea__align--${align}` : null\n                  )}\n                  style={placeholderStyle}\n                >\n                  {placeholder}\n                </span>\n              )}\n\n              <span className=\"dnb-textarea__state\" />\n            </span>\n\n            {suffix && (\n              <Suffix\n                className=\"dnb-textarea__suffix\"\n                id={id + '-suffix'} // used for \"aria-describedby\"\n                context={props}\n              >\n                {suffix}\n              </Suffix>\n            )}\n          </span>\n        </span>\n      </span>\n    )\n  }\n}\n","/**\n * Web ToggleButtonGroup Context\n *\n */\n\nimport React from 'react'\n\nconst ToggleButtonGroupContext = React.createContext({})\n\nexport default ToggleButtonGroupContext\n","/**\n * Web ToggleButtonGroup Component\n *\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {\n  isTrue,\n  makeUniqueId,\n  extendPropsWithContextInClassComponent,\n  validateDOMAttributes,\n  getStatusState,\n  combineDescribedBy,\n  combineLabelledBy,\n  dispatchCustomElementEvent,\n} from '../../shared/component-helper'\nimport {\n  spacingPropTypes,\n  createSpacingClasses,\n} from '../space/SpacingHelper'\nimport AlignmentHelper from '../../shared/AlignmentHelper'\nimport FormRow from '../form-row/FormRow'\nimport FormStatus from '../form-status/FormStatus'\nimport Context from '../../shared/Context'\nimport Suffix from '../../shared/helpers/Suffix'\nimport ToggleButtonGroupContext from './ToggleButtonGroupContext'\nimport { includeValidProps } from '../form-row/FormRowHelpers'\n\nexport default class ToggleButtonGroup extends React.PureComponent {\n  static contextType = Context\n\n  static propTypes = {\n    label: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    label_direction: PropTypes.oneOf(['horizontal', 'vertical']),\n    label_sr_only: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    title: PropTypes.string,\n    multiselect: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    variant: PropTypes.oneOf(['default', 'checkbox', 'radio']),\n    left_component: PropTypes.node,\n    no_fieldset: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    skeleton: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    id: PropTypes.string,\n    name: PropTypes.string,\n    status: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    status_state: PropTypes.string,\n    status_props: PropTypes.object,\n    status_no_animation: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n    ]),\n    globalStatus: PropTypes.shape({\n      id: PropTypes.string,\n      message: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    }),\n    suffix: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    vertical: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    layout_direction: PropTypes.oneOf(['column', 'row']),\n    value: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.object,\n      PropTypes.array,\n    ]),\n    values: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n    attributes: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    ...spacingPropTypes,\n\n    class: PropTypes.string,\n    className: PropTypes.string,\n    children: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n\n    on_change: PropTypes.func,\n  }\n\n  static defaultProps = {\n    label: null,\n    label_direction: null,\n    label_sr_only: null,\n    title: null,\n    multiselect: null,\n    variant: null,\n    left_component: null,\n    no_fieldset: null,\n    disabled: null,\n    skeleton: null,\n    id: null,\n    name: null,\n    status: null,\n    status_state: 'error',\n    status_props: null,\n    status_no_animation: null,\n    globalStatus: null,\n    suffix: null,\n    vertical: null,\n    layout_direction: 'row',\n    value: undefined,\n    values: undefined,\n    attributes: null,\n    class: null,\n\n    className: null,\n    children: null,\n\n    on_change: null,\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (state._listenForPropChanges) {\n      if (\n        typeof props.value !== 'undefined' &&\n        props.value !== state.value\n      ) {\n        state.value = props.value\n      }\n      if (\n        typeof props.values !== 'undefined' &&\n        props.values !== state.values\n      ) {\n        state.values = ToggleButtonGroup.getValues(props)\n      }\n    }\n    state._listenForPropChanges = true\n\n    return state\n  }\n\n  static getValues(props) {\n    if (typeof props.values === 'string' && props.values[0] === '[') {\n      return JSON.parse(props.values)\n    }\n    return props.values\n  }\n\n  constructor(props) {\n    super(props)\n    this._refInput = React.createRef()\n    this._id = props.id || makeUniqueId() // cause we need an id anyway\n    this._name = props.name || makeUniqueId() // cause we need an id anyway\n    this.state = {\n      // do not set the value here, else get true in this check } else if (context.values && Array.isArray(context.values)) {\n      _listenForPropChanges: true,\n    }\n  }\n\n  onChangeHandler = ({ value, event }) => {\n    const { multiselect } = this.props\n    const values = this.state.values || []\n\n    if (isTrue(multiselect)) {\n      if (!values.includes(value)) {\n        values.push(value)\n      } else {\n        values.splice(values.indexOf(value), 1)\n      }\n    }\n\n    this.setState({\n      value,\n      values,\n      _listenForPropChanges: false,\n    })\n\n    dispatchCustomElementEvent(this, 'on_change', {\n      value,\n      values,\n      event,\n    })\n  }\n\n  render() {\n    // use only the props from context, who are available here anyway\n    const props = extendPropsWithContextInClassComponent(\n      this.props,\n      ToggleButtonGroup.defaultProps,\n      this.context.getTranslation(this.props).ToggleButton,\n      includeValidProps(this.context.FormRow),\n      this.context.ToggleButtonGroup\n    )\n\n    const {\n      status,\n      status_state,\n      status_props,\n      status_no_animation,\n      globalStatus,\n      suffix,\n      label_direction,\n      label_sr_only,\n      vertical,\n      layout_direction,\n      label,\n      variant,\n      left_component,\n      no_fieldset,\n      disabled,\n      skeleton,\n      className,\n      class: _className,\n\n      multiselect,\n      id: _id, // eslint-disable-line\n      name: _name, // eslint-disable-line\n      value: _value, // eslint-disable-line\n      values: _values, // eslint-disable-line\n      children, // eslint-disable-line\n      on_change, // eslint-disable-line\n\n      ...rest\n    } = props\n\n    const { value, values } = this.state\n\n    const id = this._id\n    const showStatus = getStatusState(status)\n\n    const classes = classnames(\n      'dnb-toggle-button-group',\n      status && `dnb-toggle-button-group__status--${status_state}`,\n      !label && 'dnb-toggle-button-group--no-label',\n      `dnb-toggle-button-group--${layout_direction}`,\n      // (isTrue(vertical) || label_direction === 'vertical') &&\n      //   `dnb-toggle-button-group--vertical`,\n      (isTrue(vertical) || label_direction) &&\n        `dnb-form-row--${\n          isTrue(vertical) ? 'vertical' : label_direction\n        }-label`, // <-- has label\n      'dnb-form-component',\n      createSpacingClasses(props),\n      className,\n      _className\n    )\n\n    const params = {\n      ...rest,\n    }\n\n    if (showStatus || suffix) {\n      params['aria-describedby'] = combineDescribedBy(\n        params,\n        showStatus ? id + '-status' : null,\n        suffix ? id + '-suffix' : null\n      )\n    }\n    if (label) {\n      params['aria-labelledby'] = combineLabelledBy(params, id + '-label')\n    }\n\n    // also used for code markup simulation\n    validateDOMAttributes(this.props, params)\n\n    const context = {\n      name: this._name,\n      value,\n      values,\n      multiselect: isTrue(multiselect),\n      variant,\n      left_component,\n      disabled,\n      skeleton,\n      setContext: (context) => {\n        // also look for a fuctions, we we are able to fill old values\n        // this is used in the \"constructor\" inside the ToggleButton.js component\n        if (typeof context === 'function') {\n          context = context(this._tmp)\n        }\n        this._tmp = { ...this._tmp, ...context }\n        this.setState({\n          ...context,\n          _listenForPropChanges: false,\n        })\n      },\n      onChange: this.onChangeHandler,\n    }\n\n    const formRowParams = {\n      id,\n      label,\n      label_id: id + '-label', // send the id along, so the FormRow component can use it\n      label_direction,\n      label_sr_only,\n      direction: label_direction,\n      vertical,\n      disabled,\n      skeleton,\n      no_fieldset,\n      skipContentWrapperIfNested: true,\n      // status,\n      // status_state\n    }\n\n    return (\n      <ToggleButtonGroupContext.Provider value={context}>\n        <div className={classes}>\n          <AlignmentHelper />\n          <FormRow {...formRowParams}>\n            <span\n              id={id}\n              className=\"dnb-toggle-button-group__shell\"\n              role=\"group\"\n              {...params}\n            >\n              <FormStatus\n                show={showStatus}\n                id={id + '-form-status'}\n                globalStatus={globalStatus}\n                label={label}\n                text_id={id + '-status'} // used for \"aria-describedby\"\n                text={status}\n                state={status_state}\n                no_animation={status_no_animation}\n                skeleton={skeleton}\n                {...status_props}\n              />\n\n              <span className=\"dnb-toggle-button-group__children\">\n                {children}\n\n                {suffix && (\n                  <Suffix\n                    className=\"dnb-toggle-button-group__suffix\"\n                    id={id + '-suffix'} // used for \"aria-describedby\"\n                    context={props}\n                  >\n                    {suffix}\n                  </Suffix>\n                )}\n              </span>\n            </span>\n          </FormRow>\n        </div>\n      </ToggleButtonGroupContext.Provider>\n    )\n  }\n}\n","/**\n * Web ToggleButton Component\n *\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport keycode from 'keycode'\nimport {\n  warn,\n  isTrue,\n  makeUniqueId,\n  extendPropsWithContextInClassComponent,\n  validateDOMAttributes,\n  getStatusState,\n  combineDescribedBy,\n  dispatchCustomElementEvent,\n} from '../../shared/component-helper'\nimport AlignmentHelper from '../../shared/AlignmentHelper'\nimport { includeValidProps } from '../form-row/FormRowHelpers'\nimport {\n  spacingPropTypes,\n  createSpacingClasses,\n} from '../space/SpacingHelper'\n\nimport Radio from '../radio/Radio'\nimport Checkbox from '../checkbox/Checkbox'\nimport Button from '../button/Button'\nimport FormLabel from '../form-label/FormLabel'\nimport FormStatus from '../form-status/FormStatus'\nimport ToggleButtonGroup from './ToggleButtonGroup'\nimport ToggleButtonGroupContext from './ToggleButtonGroupContext'\nimport Context from '../../shared/Context'\nimport Suffix from '../../shared/helpers/Suffix'\n\n/**\n * The toggle-button component is our enhancement of the classic toggle-button button.\n */\nexport default class ToggleButton extends React.PureComponent {\n  static Group = ToggleButtonGroup\n\n  static contextType = ToggleButtonGroupContext\n\n  static propTypes = {\n    text: PropTypes.string,\n    label: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    label_direction: PropTypes.oneOf(['horizontal', 'vertical']),\n    label_sr_only: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    title: PropTypes.string,\n    checked: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    variant: PropTypes.oneOf(['default', 'checkbox', 'radio']),\n    left_component: PropTypes.node,\n    disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    skeleton: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    id: PropTypes.string,\n    // group: PropTypes.string,\n    status: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    status_state: PropTypes.string,\n    status_props: PropTypes.object,\n    status_no_animation: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n    ]),\n    globalStatus: PropTypes.shape({\n      id: PropTypes.string,\n      message: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    }),\n    suffix: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    value: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.object,\n      PropTypes.array,\n    ]),\n    icon: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.node,\n      PropTypes.func,\n    ]),\n    icon_position: PropTypes.oneOf(['left', 'right']),\n    icon_size: PropTypes.string,\n    attributes: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    readOnly: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n\n    ...spacingPropTypes,\n\n    class: PropTypes.string,\n    className: PropTypes.string,\n    children: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n    on_change: PropTypes.func,\n    on_state_update: PropTypes.func,\n  }\n\n  static defaultProps = {\n    text: null,\n    label: null,\n    label_direction: null,\n    label_sr_only: null,\n    title: null,\n    checked: undefined,\n    variant: null,\n    left_component: null,\n    disabled: null,\n    skeleton: null,\n    id: null,\n    // group: null,\n    status: null,\n    status_state: 'error',\n    status_props: null,\n    status_no_animation: null,\n    globalStatus: null,\n    suffix: null,\n    value: '',\n    icon: null,\n    icon_position: 'right',\n    icon_size: null,\n    attributes: null,\n    readOnly: false,\n    class: null,\n\n    className: null,\n    children: null,\n\n    on_change: null,\n    on_state_update: null,\n  }\n\n  static parseChecked = (state) => /true|on/.test(String(state))\n\n  static getDerivedStateFromProps(props, state) {\n    if (state._listenForPropChanges) {\n      if (props.checked !== state._checked) {\n        state.checked = ToggleButton.parseChecked(props.checked)\n      }\n    }\n    state._listenForPropChanges = true\n\n    if (state.checked !== state.__checked) {\n      dispatchCustomElementEvent({ props }, 'on_state_update', {\n        checked: state.checked,\n      })\n    }\n\n    state._checked = props.checked\n    state.__checked = state.checked\n\n    return state\n  }\n\n  constructor(props, context) {\n    super(props)\n    this._id = props.id || makeUniqueId() // cause we need an id anyway\n    this._refButton = React.createRef()\n\n    this.state = {\n      _listenForPropChanges: true,\n    }\n\n    // set the startup checked values from context, if they exists\n    if (context.name && typeof props.value !== 'undefined') {\n      if (typeof context.value !== 'undefined') {\n        this.state.checked = context.value === props.value\n        this.state._listenForPropChanges = false\n      } else if (context.values && Array.isArray(context.values)) {\n        this.state.checked = context.values.includes(props.value)\n        this.state._listenForPropChanges = false\n\n        // make sure we update the context\n        // with a possible custom set \"checked\" state\n      } else if (ToggleButton.parseChecked(props.checked)) {\n        if (context.setContext) {\n          if (context.multiselect) {\n            context.setContext((tmp) => {\n              return {\n                values:\n                  // in case we have set before a new context (other component)\n                  // we fill combine theese arrays\n                  tmp && Array.isArray(tmp.values)\n                    ? [...tmp.values, props.value]\n                    : [props.value],\n              }\n            })\n          } else {\n            context.setContext({\n              value: props.value,\n            })\n          }\n        }\n      }\n    }\n  }\n\n  onKeyDownHandler = (event) => {\n    switch (keycode(event)) {\n      case 'enter':\n        this.onClickHandler({ event })\n        break\n    }\n  }\n\n  onKeyUpHandler = (event) => {\n    switch (keycode(event)) {\n      case 'enter':\n        this.onClickHandler({ event })\n        break\n    }\n  }\n\n  onClickHandler = ({ event }) => {\n    if (isTrue(this.props.readOnly)) {\n      return event.preventDefault()\n    }\n    event.persist()\n\n    // only select a value once\n    if (\n      !isTrue(this.context.multiselect) &&\n      this.props.value === this.context.value\n    ) {\n      return\n    }\n\n    // else we change the checked state\n    const checked = !this.state.checked\n    this.setState({\n      checked,\n      _listenForPropChanges: false,\n    })\n    this.callOnChange({ checked, event })\n\n    if (this._refButton.current && checked) {\n      // simulate focus for firefox and safari\n      // so we can get rid of the hover ring after click\n      try {\n        this._refButton.current._ref.current.focus()\n      } catch (e) {\n        warn(e)\n      }\n    }\n  }\n\n  callOnChange = ({ checked, event }) => {\n    const { value } = this.props\n    if (this.context.onChange) {\n      this.context.onChange({\n        value,\n        event,\n      })\n    }\n    dispatchCustomElementEvent(this, 'on_change', {\n      checked,\n      value,\n      event,\n    })\n  }\n\n  render() {\n    return (\n      <Context.Consumer>\n        {(context) => {\n          // from internal context\n          const contextProps = extendPropsWithContextInClassComponent(\n            this.props,\n            ToggleButton.defaultProps,\n            this.context\n          )\n\n          // use only the props from context, who are available here anyway\n          const props = extendPropsWithContextInClassComponent(\n            this.props,\n            ToggleButton.defaultProps,\n            contextProps,\n            context.translation.ToggleButton,\n            includeValidProps(context.FormRow),\n            context.ToggleButton\n          )\n\n          const {\n            status,\n            status_state,\n            status_props,\n            status_no_animation,\n            globalStatus,\n            suffix,\n            label,\n            label_direction,\n            label_sr_only,\n            text,\n            title,\n            readOnly,\n            className,\n            class: _className,\n            disabled,\n            skeleton,\n            variant,\n            left_component,\n            icon,\n            icon_size,\n            icon_position,\n            value: propValue,\n\n            id: _id, // eslint-disable-line\n            // group: _group, // eslint-disable-line\n            checked: _checked, // eslint-disable-line\n            children,\n            on_change, // eslint-disable-line\n            on_state_update, // eslint-disable-line\n\n            ...rest\n          } = props\n\n          let { checked } = this.state\n\n          if (\n            !isTrue(this.context.multiselect) &&\n            typeof this.context.value !== 'undefined'\n          ) {\n            const contextValue = this.context.value\n            if (\n              typeof propValue === 'string' ||\n              typeof propValue === 'number'\n            ) {\n              checked = propValue === contextValue\n            }\n          } else if (\n            isTrue(this.context.multiselect) &&\n            typeof this.context.values !== 'undefined'\n          ) {\n            const contextValues = this.context.values\n            if (\n              typeof propValue === 'string' ||\n              typeof propValue === 'number'\n            ) {\n              checked = contextValues.includes(propValue)\n            }\n          }\n\n          const id = this._id\n          const showStatus = getStatusState(status)\n\n          const mainParams = {\n            className: classnames(\n              'dnb-toggle-button',\n              status && `dnb-toggle-button__status--${status_state}`,\n              checked && `dnb-toggle-button--checked`,\n              label_direction && `dnb-toggle-button--${label_direction}`,\n              createSpacingClasses(props),\n              className,\n              _className\n            ),\n          }\n\n          // to remove spacing props\n          validateDOMAttributes(this.props, rest)\n\n          const buttonParams = {\n            id,\n            disabled,\n            skeleton,\n            text: text || children,\n            title,\n            icon,\n            icon_size,\n            icon_position,\n            'aria-pressed': String(checked || false),\n            ...rest,\n          }\n\n          const componentParams = {\n            checked,\n            disabled,\n            element: 'span',\n            'data-checked': String(checked || false),\n            'aria-checked': undefined,\n            role: undefined,\n            type: undefined,\n            name: null,\n            title: null,\n          }\n\n          if (status) {\n            // do not send along the message, but only the status states\n            if (status_state === 'info') {\n              componentParams.status_state = 'info'\n            } else {\n              componentParams.status = 'error'\n            }\n          }\n\n          if (showStatus || suffix) {\n            buttonParams['aria-describedby'] = combineDescribedBy(\n              buttonParams,\n              showStatus ? id + '-status' : null,\n              suffix ? id + '-suffix' : null\n            )\n          }\n          if (readOnly) {\n            buttonParams['aria-readonly'] = buttonParams.readOnly = true\n          }\n\n          let leftComponent = null\n          switch (variant) {\n            case 'radio':\n              leftComponent = (\n                <Radio id={`${id}-radio`} {...componentParams} />\n              )\n              break\n\n            case 'checkbox':\n              leftComponent = (\n                <Checkbox id={`${id}-checkbox`} {...componentParams} />\n              )\n              break\n\n            case 'default':\n            default:\n              leftComponent = left_component\n              break\n          }\n\n          return (\n            <span {...mainParams}>\n              {label && (\n                <FormLabel\n                  id={id + '-label'}\n                  for_id={id}\n                  text={label}\n                  disabled={disabled}\n                  skeleton={skeleton}\n                  label_direction={label_direction}\n                  sr_only={label_sr_only}\n                />\n              )}\n              <span className=\"dnb-toggle-button__inner\">\n                <FormStatus\n                  show={showStatus}\n                  id={id + '-form-status'}\n                  globalStatus={globalStatus}\n                  label={label}\n                  text_id={id + '-status'} // used for \"aria-describedby\"\n                  text={status}\n                  state={status_state}\n                  no_animation={status_no_animation}\n                  skeleton={skeleton}\n                  {...status_props}\n                />\n\n                <span className=\"dnb-toggle-button__shell\">\n                  <AlignmentHelper />\n\n                  <Button\n                    variant=\"secondary\"\n                    className=\"dnb-toggle-button__button\"\n                    custom_content={\n                      leftComponent && (\n                        <span className=\"dnb-toggle-button__component\">\n                          {leftComponent}\n                        </span>\n                      )\n                    }\n                    {...buttonParams}\n                    ref={this._refButton}\n                    onClick={this.onClickHandler}\n                    onKeyDown={this.onKeyDownHandler}\n                    onKeyUp={this.onKeyUpHandler}\n                  />\n\n                  {suffix && (\n                    <Suffix\n                      className=\"dnb-toggle-button__suffix\"\n                      id={id + '-suffix'} // used for \"aria-describedby\"\n                      context={props}\n                    >\n                      {suffix}\n                    </Suffix>\n                  )}\n                </span>\n              </span>\n            </span>\n          )\n        }}\n      </Context.Consumer>\n    )\n  }\n}\n"],"names":["props","xmlns","width","height","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","PropTypes","id","message","spacingPropTypes","formRowDefaultProps","label","label_direction","label_sr_only","label_id","label_class","no_label","no_fieldset","locale","wrap","direction","vertical","centered","section_style","section_spacing","globalStatus","responsive","disabled","skeleton","class","skipContentWrapperIfNested","className","children","FormRow","_id","makeUniqueId","getContent","Array","isArray","reduce","pV","cV","type","name","push","render","extendPropsWithContextInClassComponent","this","defaultProps","context","_className","_label","attributes","isNested","itsMeAgain","nestedLabel","hasLabel","length","params","classnames","isTrue","createSpacingClasses","validateDOMAttributes","providerContext","extend","useId","isIsUsed","useFieldset","value","Fieldset","style_type","spacing","element","for_id","text","sr_only","React","contextType","Context","FormSet","onSubmitHandler","event","prevent_submit","preventDefault","dispatchCustomElementEvent","processChildren","no_form","rest","allowedProps","Object","entries","acc","k","v","onSubmit","content","Element","on_submit","RadioGroup","onChangeHandler","setState","_listenForPropChanges","_refInput","_name","state","getDerivedStateFromProps","_value","includeValidProps","status","status_state","status_props","status_no_animation","suffix","label_position","layout_direction","size","on_change","showStatus","getStatusState","classes","combineDescribedBy","combineLabelledBy","onChange","formRowParams","AlignmentHelper","role","Suffix","FormStatus","show","text_id","width_selector","no_animation","title","undefined","parseChecked","test","String","Radio","onKeyDownHandler","key","keycode","isInNoGroup","isContextGroupOrSingle","checked","_event","readOnly","target","isPlainGroup","setTimeout","callOnChange","group","onClickHandler","current","focus","_checked","__checked","contextProps","_group","_disabled","on_state_update","hasContext","mainParams","inputParams","assign","skeletonDOMAttributes","labelComp","FormLabel","ref","onClick","onKeyDown","createSkeletonClass","RadioGroupContext","Group","Textarea","textareaState","onFocusHandler","_ref","onBlurHandler","hasValue","autoresize","prepareAutosize","rows","getRows","setAutosize","elem","style","e","warn","_heightOffset","offsetHeight","clientHeight","lineHeight","getLineHeight","newHeight","scrollHeight","maxRows","parseFloat","autoresize_max_rows","maxHeight","inner_ref","textarea_state","getValue","componentDidMount","window","resizeObserver","ResizeObserver","observe","document","body","addEventListener","componentWillUnmount","disconnect","removeEventListener","Math","floor","getComputedStyle","getTranslation","stretch","placeholder","align","textarea_class","textarea_attributes","textarea_element","_textarea_element","TextareaElement","textareaAttributes","JSON","parse","textareaParams","onFocus","onBlur","innerParams","shellParams","placeholderStyle","cols","on_focus","on_blur","on_key_down","ToggleButtonGroup","multiselect","values","includes","splice","indexOf","getValues","ToggleButton","variant","left_component","_values","setContext","_tmp","onKeyUpHandler","persist","_refButton","tmp","translation","icon","icon_size","icon_position","propValue","contextValues","contextValue","buttonParams","componentParams","leftComponent","Checkbox","Button","custom_content","onKeyUp","ToggleButtonGroupContext"],"sourceRoot":""}