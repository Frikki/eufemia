{"version":3,"sources":["webpack:///./src/docs/uilib/components/pagination/Examples.js"],"names":["HeightLimit","props","height","LargePage","color","PaginationExampleDefault","data-visual-test","scope","PaginationExampleCentered","PaginationExampleInfinityLoadButton","PaginationExampleInfinityIndicator","PaginationExampleInfinityUnknown","PaginationExampleInfinityTable","PaginationTableExample","Wrapper","className","spacing","left","size","bottom","InfinityPaginationTable","tableItems","i","push","ssn","text","String","expanded","React","useState","createPagination","Pagination","setContent","resetContent","resetInfinity","endInfinity","orderDirection","setOrderDirection","currentPage","setLocalPage","forceRerender","reorderDirection","serverDelayTimeout","InfinityPagination","items","perPageCount","onToggleExpanded","_ssn","pageNo","element","onExpanded","index","findIndex","item","Date","getTime","setHeight","setTimeout","onMounted","forEach","current","animation","useEffect","clearTimeout","StyledTable","sticky","icon","icon_position","variant","on_click","title","o","mode","marker_element","fallback_element","TableRow","TableData","colSpan","startup_count","parallel_load_count","startup_page","on_startup","page","console","log","Math","ceil","random","on_change","propTypes","PropTypes","array","isRequired","children","mountedItems","filter","cur","idx","floor","length","map","params","onClick","e","hasSelectedText","currentTarget","test","document","activeElement","type","nextElementSibling","focus","trRef","createRef","Fragment","key","ref","right","tabIndex","top","Table","window","requestAnimationFrame","nodeName","toLowerCase","parentElement","newHeight","getComputedStyle","scrollHeight","style","dir","sort","A","B","a","parseFloat","b","Section"],"mappings":"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","file":"5df312fc-30f42e36c936a0ce449c.js","sourcesContent":["/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport ComponentBox from 'Src/shared/tags/ComponentBox'\nimport styled from '@emotion/styled'\n\nimport { Section, Space, Button } from 'dnb-ui-lib/src/components'\nimport { Table, H1, P, Ul } from 'dnb-ui-lib/src/elements'\nimport { StickyHelper } from 'dnb-ui-lib/src/elements/Table'\nimport { hasSelectedText } from 'dnb-ui-lib/src/shared/helpers'\n\nimport { createPagination } from 'dnb-ui-lib/src/components/Pagination'\n\nconst HeightLimit = styled.div`\n  height: ${(props) => props.height || '20rem'};\n  overflow-y: scroll;\n  background-color: var(--color-white);\n  border: 0.25rem dotted var(--color-black);\n`\nconst LargePage = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  height: 15vw;\n\n  background-color: ${(props) => props.color || 'tomato'};\n  font-size: 15vw;\n  font-weight: var(--font-weight-bold);\n  font-feature-settings: 'pnum' on, 'lnum' on;\n\n  color: var(--color-white);\n`\n\nexport const PaginationExampleDefault = () => (\n  <ComponentBox\n    data-visual-test=\"pagination-default\"\n    scope={{ HeightLimit, LargePage }}\n  >\n    {\n      /* @jsx */ `\n<Pagination\n  page_count={30}\n  startup_page={15}\n  on_change={({ page }) => {\n    console.log('on_change:', page)\n  }}\n>\n  {({ pageNo }) => <P>Page {pageNo}</P>}\n</Pagination>\n          `\n    }\n  </ComponentBox>\n)\n\nexport const PaginationExampleCentered = () => (\n  <ComponentBox scope={{ HeightLimit, LargePage }}>\n    {\n      /* @jsx */ `\n<Pagination\n  align=\"center\"\n  page_count={30}\n>\n  {({ page, setContent }) => {\n    // simulate server communication delay\n    const timeout = setTimeout(() => {\n      setContent(page, <LargePage>{page}</LargePage>)\n    }, Math.ceil(Math.random() * 500))\n\n    return () => clearTimeout(timeout)\n  }}\n</Pagination>\n          `\n    }\n  </ComponentBox>\n)\n\nexport const PaginationExampleInfinityLoadButton = () => (\n  <ComponentBox scope={{ HeightLimit, LargePage }}>\n    {\n      /* @jsx */ `\n<HeightLimit>\n  <Pagination\n    mode=\"infinity\"\n    use_load_button\n    startup_page={5}\n    min_wait_time={0}\n    on_load={({ page, setContent }) => {\n      // simulate server communication delay\n      const timeout = setTimeout(() => {\n        setContent(page, (\n          <LargePage>\n            {page}\n          </LargePage>)\n        )\n      }, Math.ceil(Math.random() * 500))\n      \n      return () => clearTimeout(timeout)\n    }}\n  />\n</HeightLimit>\n          `\n    }\n  </ComponentBox>\n)\n\nexport const PaginationExampleInfinityIndicator = () => (\n  <ComponentBox scope={{ HeightLimit, LargePage }}>\n    {\n      /* @jsx */ `\n<HeightLimit>\n  <Pagination\n    mode=\"infinity\"\n    indicator_element={() => (\n      <LargePage color=\"lightgreen\">Loading ...</LargePage>\n    )}\n    startup_page={3}\n    page_count={10}\n    min_wait_time={0}\n    on_load={({ page, setContent }) => {\n      // simulate server communication delay\n      const timeout = setTimeout(() => {\n        setContent(page, (\n          <LargePage>\n            {page}\n          </LargePage>)\n        )\n      }, Math.ceil(Math.random() * 500))\n\n      return () => clearTimeout(timeout)\n    }}\n    on_end={({ page, setContent }) => {\n      setContent(page, <LargePage color=\"lightgreen\">End</LargePage>)\n    }}\n  />\n</HeightLimit>\n          `\n    }\n  </ComponentBox>\n)\n\nexport const PaginationExampleInfinityUnknown = () => (\n  <ComponentBox scope={{ HeightLimit, LargePage }}>\n    {\n      /* @jsx */ `\n<HeightLimit>\n  <Pagination\n    mode=\"infinity\"\n    parallel_load_count={2}\n    min_wait_time={0}\n    on_load={({ page, setContent, endInfinity }) => {\n      // simulate server communication delay\n      const timeout = setTimeout(() => {\n        if(page > 10){\n          endInfinity()\n        }\n        else {\n          setContent(page, (\n            <LargePage>\n              {page}\n            </LargePage>)\n          )\n        }\n      }, Math.ceil(Math.random() * 1e3))\n\n      return () => clearTimeout(timeout)\n    }}\n    on_end={({ page, setContent }) => {\n      setContent(page,\n        <LargePage color=\"lightgreen\">\n          End\n        </LargePage>\n      )\n    }}\n  />\n</HeightLimit>\n          `\n    }\n  </ComponentBox>\n)\n\nexport const PaginationExampleInfinityTable = () => (\n  <ComponentBox scope={{ HeightLimit, PaginationTableExample }}>\n    {\n      /* @jsx */ `\n<HeightLimit height=\"60rem\">\n  <PaginationTableExample />\n</HeightLimit>\n          `\n    }\n  </ComponentBox>\n)\n\nexport function PaginationTableExample() {\n  return (\n    <Wrapper className=\"dnb-core-style\" spacing>\n      <Space left>\n        <H1 size=\"small\">Infinity Table</H1>\n        <P bottom>\n          This is a semantic correct table using infinity scrolling. It\n          also has a sticky header.\n        </P>\n        <Ul bottom>\n          <li>The startup page number is set to 3.</li>\n          <li>And per page we show 10 items.</li>\n          <li>\n            A random delay is added to simulate asynchronous interaction.\n          </li>\n        </Ul>\n      </Space>\n      <InfinityPaginationTable tableItems={tableItems} />\n    </Wrapper>\n  )\n}\n\n// create our items\nconst tableItems = []\nfor (let i = 1; i <= 300; i++) {\n  tableItems.push({ ssn: i, text: String(i), expanded: false })\n}\n\nexport const InfinityPaginationTable = ({ tableItems, ...props }) => {\n  const startupPage = 3 // what we start with\n  const perPageCount = 10 // how many items per page\n\n  // create our Pagination instance\n  const [\n    { Pagination, setContent, resetContent, resetInfinity, endInfinity }\n  ] = React.useState(createPagination)\n  const [orderDirection, setOrderDirection] = React.useState('asc')\n  const [currentPage, setLocalPage] = React.useState(null)\n  const [cacheHash, forceRerender] = React.useState(null) // eslint-disable-line\n\n  // is not needed\n  // const maxPagesCount = Math.floor(tableItems?.length / perPageCount)\n\n  // ascending / descending\n  tableItems = reorderDirection(tableItems, orderDirection)\n\n  const onToggleExpanded = (\n    { ssn: _ssn },\n    { pageNo, element = null, onExpanded = null } = {}\n  ) => {\n    const index = tableItems.findIndex(({ ssn }) => ssn === _ssn)\n    if (index > -1) {\n      const item = tableItems[index]\n\n      // update only the current item\n      tableItems[index] = {\n        ...item,\n        expanded: !item.expanded\n      }\n\n      // define what page should update\n      // used to update the page inside the Paginatio Component\n      setLocalPage(pageNo)\n\n      // force rerender of this component\n      forceRerender(new Date().getTime())\n\n      // set new height\n      if (element) {\n        setHeight({ element, expanded: !item.expanded })\n      }\n\n      setTimeout(onExpanded, 10)\n    }\n  }\n  // set the startup height\n  const onMounted = (items) => {\n    items.forEach(({ element: { current: element }, expanded }) =>\n      setHeight({ element, expanded, animation: false })\n    )\n  }\n\n  // This limits the items to perPageCount\n  const content = (\n    <InfinityPagination\n      items={tableItems}\n      perPageCount={perPageCount}\n      currentPage={currentPage}\n      onToggleExpanded={onToggleExpanded}\n      onMounted={onMounted}\n      endInfinity={endInfinity}\n    />\n  )\n\n  setContent(currentPage, content)\n  let serverDelayTimeout\n  React.useEffect(() => () => clearTimeout(serverDelayTimeout))\n\n  return (\n    <StyledTable sticky>\n      <thead>\n        <tr>\n          <th scope=\"col\">\n            <Button\n              size=\"small\"\n              icon=\"reset\"\n              icon_position=\"left\"\n              variant=\"secondary\"\n              on_click={() => {\n                clearTimeout(serverDelayTimeout) // stop the server delay simulation\n\n                resetInfinity()\n                resetContent()\n\n                // rerender our component to get back the default state\n                setOrderDirection('asc')\n\n                // rerender our component to get back the default state\n                forceRerender(new Date().getTime())\n              }}\n            >\n              Reset everything\n            </Button>\n          </th>\n          <th\n            scope=\"col\"\n            className={`dnb-table--sortable dnb-table--active ${\n              orderDirection === 'desc' ? ' dnb-table--reversed' : ''\n            }`}\n          >\n            <Button\n              variant=\"tertiary\"\n              icon=\"arrow-down\"\n              text=\"Sortable\"\n              title=\"Sort table row\"\n              on_click={() => {\n                // 1. empty\n                resetContent()\n\n                setOrderDirection((o) => (o === 'asc' ? 'desc' : 'asc'))\n              }}\n            />\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <StickyHelper />\n        <Pagination\n          mode=\"infinity\"\n          // use_load_button // disables infinity scroller, but will add a button to do so\n          marker_element=\"tr\"\n          fallback_element={({ className, ...props }) => (\n            <TableRow className={className}>\n              <TableData colSpan=\"2\" {...props} />\n            </TableRow>\n          )} // in order to show the injected \"indicator\" and \"load button\" in the middle of the orw\n          startup_count={1} // how many pages to show on starutp\n          parallel_load_count={1} // how many pages to load during next load\n          startup_page={startupPage} // the very first page we load\n          // current_page={currentPage}// is not needed\n          // page_count={maxPagesCount}// is not needed\n          {...props}\n          on_startup={({ page }) => {\n            console.log('on_startup: with page', page)\n\n            // simulate server delay\n            clearTimeout(serverDelayTimeout)\n            serverDelayTimeout = setTimeout(() => {\n              // once we set current page, we force a rerender, and sync of data\n              setLocalPage(page)\n\n              // since currentPage already is the same - used for reoder\n              clearTimeout(serverDelayTimeout)\n              forceRerender(new Date().getTime())\n            }, Math.ceil(Math.random() * 1e3)) // simulate random delay\n          }}\n          // on_load={({ page /*, setContent, resetContent */ }) => {\n          //   console.log('on_load: with page', page)\n          // }}\n          on_change={({ page }) => {\n            console.log('on_change: with page', page)\n\n            // simulate server delay\n            clearTimeout(serverDelayTimeout)\n            serverDelayTimeout = setTimeout(() => {\n              // once we set current page, we force a rerender, and sync of data\n              setLocalPage(page)\n            }, Math.ceil(Math.random() * 1e3)) // simulate random delay\n          }}\n        />\n      </tbody>\n    </StyledTable>\n  )\n}\nInfinityPaginationTable.propTypes = {\n  tableItems: PropTypes.array.isRequired\n}\n\nconst InfinityPagination = ({\n  children,\n  items,\n  currentPage,\n  perPageCount,\n  onToggleExpanded,\n  onMounted,\n  endInfinity,\n  ...props\n}) => {\n  const mountedItems = []\n  if (onMounted) {\n    React.useEffect(() => onMounted && onMounted(mountedItems), []) // eslint-disable-line\n  }\n\n  items = items.filter((cur, idx) => {\n    const floor = (currentPage - 1) * perPageCount\n    const ceil = floor + perPageCount\n    return idx >= floor && idx < ceil\n  })\n\n  if (items.length === 0) {\n    endInfinity()\n    return null\n  }\n\n  return items.map((item, i) => {\n    const params = {\n      onClick: (e) => {\n        if (\n          !hasSelectedText(e.currentTarget) ||\n          /button/.test(document.activeElement.type)\n        ) {\n          let element = e.currentTarget\n          onToggleExpanded(item, {\n            pageNo: currentPage,\n            // element,\n            onExpanded: () => {\n              try {\n                // rather find the next tr\n                element = element.nextElementSibling\n                setHeight({ element, expanded: !item.expanded })\n                element.focus() // for better ally we set the focus to the new content\n              } catch (e) {\n                //\n              }\n            }\n          })\n        }\n      }\n    }\n\n    // we do this only to have a working useEffect, so we can call onMounted\n    const trRef = React.createRef(null)\n    mountedItems.push({ ...item, element: trRef })\n\n    return (\n      <React.Fragment key={item.ssn}>\n        <TableRow\n          {...props}\n          {...params}\n          className={`dnb-table--${i % 2 ? 'even' : 'odd'} ${\n            item.expanded ? 'expanded' : ''\n          }`}\n          ref={trRef}\n        >\n          <TableData>\n            {/* The button \"bubbles\" the event just down */}\n            <Button\n              title={item.expanded ? 'Hide details' : 'Show more details'}\n              icon=\"chevron_down\"\n              size=\"small\"\n              right=\"large\"\n            />\n          </TableData>\n          <TableData>\n            <P>\n              {item.text} {children}\n            </P>\n          </TableData>\n        </TableRow>\n\n        <TableRow\n          className={`expanded-content dnb-no-focus ${\n            item.expanded ? 'expanded' : ''\n          }`}\n          tabIndex=\"-1\"\n        >\n          <TableData colSpan=\"2\">\n            {item.expanded && (\n              <div className=\"expanded-content__outer\">\n                <div className=\"expanded-content__inner\">\n                  <P>What ever content ...</P>\n                  <Button variant=\"secondary\" top>\n                    {'🔥'}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </TableData>\n        </TableRow>\n      </React.Fragment>\n    )\n  })\n}\n\nconst StyledTable = styled(Table)`\n  table-layout: fixed;\n`\n\nconst TableRow = styled.tr`\n  &:not(.expanded-content):hover {\n    cursor: pointer;\n    opacity: 0.8;\n  }\n\n  .dnb-icon {\n    transition: transform 300ms ease-out;\n  }\n  &.expanded {\n    .dnb-icon {\n      transform: rotate(-180deg);\n    }\n  }\n\n  &.expanded-content {\n    /*\n      This is our expanded height (maxHeight)\n      NB: we can use max-height, because max-height is not supported in tr\n    */\n    max-height: 10rem;\n\n    transform: translateY(-10px);\n    opacity: 0;\n\n    transition: height 400ms ease-out, opacity 600ms ease-out,\n      transform 400ms ease-out;\n\n    td {\n      height: inherit;\n      padding: 0;\n      background-color: var(--color-white);\n\n      .expanded-content__outer {\n        height: inherit;\n      }\n\n      /* If we don't wrapp with an additional inner, then we get a jump in the animation */\n      .expanded-content__inner {\n        height: inherit;\n        padding: 2rem 0 2rem 3rem;\n\n        background-color: tomato;\n      }\n    }\n  }\n  &.expanded.expanded-content {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`\n\nconst TableData = styled.td`\n  .dnb-pagination__loadbar {\n    justify-content: flex-start;\n  }\n  .dnb-pagination__indicator,\n  .dnb-pagination__loadbar {\n    height: 6rem;\n  }\n\n  .dnb-p {\n    cursor: text;\n\n    font-feature-settings: 'pnum' on, 'lnum' on;\n    font-weight: var(--font-weight-bold);\n    font-size: var(--font-size-large);\n\n    /** reset css specificity */\n    .dnb-spacing &.dnb-h--large:not([class*='space__bottom']),\n    .dnb-core-style\n      .dnb-spacing\n      &.dnb-h--large:not([class*='space__bottom']) {\n      margin: 0;\n    }\n  }\n`\n\nconst setHeight = ({\n  element,\n  expanded = false,\n  animation = true\n} = {}) => {\n  if (\n    element &&\n    typeof window !== 'undefined' &&\n    window.requestAnimationFrame\n  ) {\n    // get tr element\n    if (String(element.nodeName).toLowerCase() === 'td') {\n      element = element.parentElement\n    }\n\n    // get the new height\n    const newHeight = expanded\n      ? window.getComputedStyle(element)['max-height'] // maxHeight\n      : element.scrollHeight\n\n    // make the animation\n    window.requestAnimationFrame(() => {\n      if (animation) {\n        element.style.height = '1px'\n      }\n      window.requestAnimationFrame(\n        () => (element.style.height = newHeight)\n      )\n    })\n  }\n}\n\nconst reorderDirection = (items, dir) =>\n  items.sort(({ text: A }, { text: B }) => {\n    const a = parseFloat(A)\n    const b = parseFloat(B)\n    return (dir === 'asc' ? a > b : a < b) ? 1 : -1\n  })\n\n// Page layout\nconst Wrapper = styled(Section)`\n  width: 100%;\n  background: var(--color-white);\n`\n"],"sourceRoot":""}