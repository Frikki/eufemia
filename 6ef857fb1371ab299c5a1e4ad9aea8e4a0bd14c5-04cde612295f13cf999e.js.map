{"version":3,"file":"6ef857fb1371ab299c5a1e4ad9aea8e4a0bd14c5-04cde612295f13cf999e.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/AccordionProviderContext.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/defaultProps.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/AccordionGroup.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/AccordionContext.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/AccordionHeader.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/AccordionContent.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/AccordionStore.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/Accordion.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/shared/useMediaQuery.tsx"],"sourcesContent":["/**\n * Web AccordionGroup Context\n *\n */\n\nimport React from 'react'\n\ntype AccordionGroupContextProps = {\n  expanded?: boolean\n  group?: string\n  expanded_ssr?: boolean\n  remember_state?: boolean\n  flush_remembered_state?: boolean\n  expanded_id?: string\n  onChange?: (...params: unknown[]) => void\n  onInit?: (...args: any[]) => any\n}\n\nconst AccordionGroupContext =\n  React.createContext<AccordionGroupContextProps>({})\n\nexport default AccordionGroupContext\n","import { AccordionProps, GroupProps } from './Accordion'\n\nexport const accordionDefaultProps: AccordionProps & GroupProps = {\n  variant: 'outlined',\n  icon_size: 'medium',\n} as const\n","/**\n * Web AccordionGroup Component\n *\n */\n\nimport React, { useContext } from 'react'\n\nimport classnames from 'classnames'\nimport {\n  isTrue,\n  makeUniqueId,\n  extendPropsWithContext,\n  validateDOMAttributes,\n  dispatchCustomElementEvent,\n} from '../../shared/component-helper'\nimport { createSpacingClasses } from '../space/SpacingHelper'\n\nimport Context from '../../shared/Context'\nimport AccordionGroupContext from './AccordionProviderContext'\n\nimport type { GroupProps } from './Accordion'\nimport { accordionDefaultProps } from './defaultProps'\n\nexport type AccordionGroupProps = React.HTMLProps<HTMLElement> &\n  GroupProps & {\n    onInit?: (...args: any[]) => any\n  }\n\nconst AccordionGroup = (props: AccordionGroupProps) => {\n  const context = useContext(Context)\n  const id = props.id || makeUniqueId()\n\n  const thisInstance = {\n    _id: id,\n    props,\n    context,\n    onChangeHandler,\n  }\n\n  function onChangeHandler(event) {\n    dispatchCustomElementEvent(thisInstance, 'on_change', {\n      id: event.id,\n      expanded: event.expanded,\n      event,\n    })\n  }\n\n  // use only the props from context, who are available here anyway\n  const extendedProps = extendPropsWithContext(\n    props,\n    accordionDefaultProps,\n    context.Accordion,\n    context.getTranslation(props).Accordion\n  )\n\n  const {\n    expanded, // eslint-disable-line\n    expanded_id, // eslint-disable-line\n    prerender, // eslint-disable-line\n    prevent_rerender, // eslint-disable-line\n    single_container, // eslint-disable-line\n    contentRef, // eslint-disable-line\n    allow_close_all, // eslint-disable-line\n    remember_state, // eslint-disable-line\n    flush_remembered_state, // eslint-disable-line\n    disabled, // eslint-disable-line\n    group, // eslint-disable-line\n    onInit, // eslint-disable-line\n    className,\n    class: _className,\n\n    id: _id, // eslint-disable-line\n    children, // eslint-disable-line\n\n    ...restOfExtendedProps\n  } = extendedProps\n\n  const classes = classnames(\n    'dnb-accordion-group',\n    isTrue(single_container) && 'dnb-accordion-group--single-container',\n    createSpacingClasses(extendedProps),\n    className,\n    _className\n  )\n\n  const params = {\n    ...restOfExtendedProps,\n  }\n\n  // also used for code markup simulation\n  validateDOMAttributes(props, params)\n\n  if (!extendedProps?.group && isTrue(props.single_container)) {\n    extendedProps.group = makeUniqueId()\n  }\n\n  const contextForProvider = {\n    ...extendedProps,\n    id,\n    onChange: onChangeHandler,\n  }\n\n  return (\n    <AccordionGroupContext.Provider value={contextForProvider}>\n      <div className={classes}>\n        <span\n          id={id}\n          className=\"dnb-accordion-group__shell\"\n          role=\"group\"\n          {...params}\n        >\n          <span className=\"dnb-accordion-group__children\">{children}</span>\n        </span>\n      </div>\n    </AccordionGroupContext.Provider>\n  )\n}\n\nexport default AccordionGroup\n","/**\n * Web AccordionGroup Context\n *\n */\n\nimport React from 'react'\nimport { SkeletonContextProps } from '../skeleton/SkeletonHelper'\nimport { AccordionProps } from './Accordion'\n\nexport type AccordionContextProps = AccordionProps &\n  SkeletonContextProps & {\n    allow_close_all?: boolean\n    callOnChange?: (parameters: {\n      id: string\n      group: string\n      expanded: boolean\n      event:\n        | React.MouseEvent<HTMLElement>\n        | React.KeyboardEvent<HTMLElement>\n    }) => void\n  }\n\nconst AccordionContext = React.createContext<AccordionContextProps>({})\n\nexport default AccordionContext\n","/**\n * Web Accordion Component\n *\n */\n\nimport React, { HTMLProps, useContext, useState } from 'react'\nimport type { SpacingProps } from '../space/types'\n\nimport {\n  validateDOMAttributes,\n  extendPropsWithContext,\n} from '../../shared/component-helper'\nimport { useTheme } from '../../shared'\nimport IconPrimary from '../icon-primary/IconPrimary'\nimport classnames from 'classnames'\nimport AccordionContext from './AccordionContext'\nimport { createSpacingClasses } from '../space/SpacingHelper'\nimport {\n  skeletonDOMAttributes,\n  createSkeletonClass,\n} from '../skeleton/SkeletonHelper'\n\nimport type { HeadingLevel } from '../Heading'\nimport type { IconSize } from '../Icon'\nimport type { SkeletonShow } from '../Skeleton'\nimport type { AccordionIcon, AccordionIconPosition } from './Accordion'\n\nexport type AccordionHeaderTitleProps = SpacingProps & {\n  children?: React.ReactNode\n}\n\nfunction AccordionHeaderTitle({\n  children = null,\n  ...rest\n}: AccordionHeaderTitleProps) {\n  return (\n    <span\n      className={classnames(\n        'dnb-accordion__header__title',\n        createSpacingClasses(rest)\n      )}\n    >\n      {children}\n    </span>\n  )\n}\n\nexport type AccordionHeaderDescriptionProps = SpacingProps & {\n  children?: React.ReactNode\n}\n\nfunction AccordionHeaderDescription({\n  children = null,\n  ...rest\n}: AccordionHeaderDescriptionProps) {\n  return children ? (\n    <span\n      className={classnames(\n        'dnb-accordion__header__description',\n        createSpacingClasses(rest)\n      )}\n    >\n      {children}\n    </span>\n  ) : null\n}\n\nexport type AccordionHeaderContainerProps = SpacingProps & {\n  children?: React.ReactNode\n}\n\nfunction AccordionHeaderContainer({\n  children = null,\n  ...rest\n}: AccordionHeaderContainerProps) {\n  return children ? (\n    <span\n      className={classnames(\n        'dnb-accordion__header__container',\n        createSpacingClasses(rest)\n      )}\n    >\n      {children}\n    </span>\n  ) : null\n}\n\ntype AccordionHeaderIconIcon =\n  | React.ReactNode\n  | ((...args: any[]) => React.ReactNode)\n  | {\n      closed?: React.ReactNode | ((...args: any[]) => React.ReactNode)\n      expanded?: React.ReactNode | ((...args: any[]) => React.ReactNode)\n    }\n\nexport type AccordionHeaderIconProps = {\n  icon?: AccordionHeaderIconIcon\n  size?: IconSize\n  expanded?: boolean\n  icon_position?: AccordionIconPosition\n}\n\nfunction AccordionHeaderIcon({\n  icon,\n  expanded,\n  size = 'medium',\n  icon_position,\n}: AccordionHeaderIconProps) {\n  const theme = useTheme()\n  let animateIcon = true\n  if (!icon && theme?.name === 'sbanken') {\n    animateIcon = false\n    icon = {\n      expanded: 'subtract-medium',\n      closed: 'add-medium',\n    }\n  }\n\n  return (\n    <span\n      className={classnames(\n        'dnb-accordion__header__icon',\n        !animateIcon && 'dnb-accordion__header__icon--no-animation',\n        icon_position && `dnb-accordion__header__icon--${icon_position}`\n      )}\n    >\n      <IconPrimary\n        size={size}\n        // There has to be a better way than to do so much casting\n        icon={\n          icon &&\n          typeof icon === 'object' &&\n          'expanded' in icon &&\n          typeof icon?.expanded !== 'undefined'\n            ? icon[expanded ? 'expanded' : 'closed']\n            : (icon as React.ReactNode | ((...args: any[]) => any)) ||\n              'chevron-down'\n        }\n        aria-hidden\n      />\n    </span>\n  )\n}\n\nexport type AccordionHeaderTitle =\n  | string\n  | React.ReactNode\n  | ((...args: any[]) => any)\nexport type AccordionHeaderDescription =\n  | string\n  | React.ReactNode\n  | ((...args: any[]) => any)\nexport type AccordionHeaderLeftComponent =\n  | string\n  | React.ReactNode\n  | ((...args: any[]) => any)\nexport type AccordionHeaderElement =\n  | string\n  | React.ReactNode\n  | ((...args: any[]) => any)\nexport type AccordionHeaderHeading =\n  | boolean\n  | string\n  | React.ReactNode\n  | ((...args: any[]) => any)\nexport type AccordionHeaderIcon =\n  | React.ReactNode\n  | ((...args: any[]) => any)\n  | {\n      closed?: React.ReactNode | ((...args: any[]) => any)\n      expanded?: React.ReactNode | ((...args: any[]) => any)\n    }\n\nexport type AccordionHeaderProps = React.HTMLProps<HTMLElement> &\n  SpacingProps & {\n    title?: AccordionHeaderTitle\n    expanded?: boolean\n    description?: AccordionHeaderDescription\n    left_component?: AccordionHeaderLeftComponent\n    element?: AccordionHeaderElement\n    heading?: AccordionHeaderHeading\n    heading_level?: HeadingLevel\n    icon?: AccordionIcon\n    icon_position?: AccordionIconPosition\n    icon_size?: IconSize\n    disabled?: boolean\n    skeleton?: SkeletonShow\n    no_animation?: boolean\n    className?: string\n    children?: string | React.ReactNode | ((...args: any[]) => any)\n  }\n\nconst accordionHeaderDefaultProps = {\n  icon_size: 'medium',\n}\n\nexport const AccordionHeader = ({\n  icon_size: icon_size_default = 'medium',\n  ...restOfProps\n}: AccordionHeaderProps) => {\n  const props = { icon_size: icon_size_default, ...restOfProps }\n\n  const [isHoverring, setIsHovering] = useState<boolean>(false)\n  const [hasClicked, setHasClicked] = useState<boolean>(false)\n\n  const context = useContext(AccordionContext)\n\n  function onKeyDownHandler(event: React.KeyboardEvent<HTMLElement>) {\n    const keyPressed = event.key\n\n    if (keyPressed === 'Enter' || keyPressed === ' ') {\n      event.preventDefault()\n      onClickHandler(event)\n    }\n  }\n\n  function onClickHandler(\n    event: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>\n  ) {\n    const { id, group } = context\n\n    if (canClick()) {\n      const expanded = !context.expanded\n      context.callOnChange({ id, group, expanded, event })\n\n      setHasClicked(true)\n    }\n  }\n\n  function onMouseOverHandler() {\n    setIsHovering(true)\n  }\n\n  function onMouseOutHandler() {\n    setIsHovering(false)\n    setHasClicked(false)\n  }\n\n  function canClick() {\n    const { expanded, allow_close_all, group } = context\n    return !group || (group && !expanded) || allow_close_all\n  }\n\n  const extendedProps = extendPropsWithContext(\n    props,\n    accordionHeaderDefaultProps,\n    context as Record<string, unknown>\n  )\n\n  const {\n    id,\n\n    // 1. these props should be the same as ...\n    left_component,\n    expanded, // eslint-disable-line\n    title,\n    description,\n    element,\n    heading,\n    heading_level,\n    icon,\n    icon_size,\n    disabled,\n    skeleton,\n    no_animation,\n  } = extendedProps\n\n  let { icon_position } = extendedProps\n\n  const {\n    children,\n    className,\n\n    // 2. ... these\n    left_component: _left_component, // eslint-disable-line\n    expanded: _expanded, // eslint-disable-line\n    title: _title, // eslint-disable-line\n    description: _description, // eslint-disable-line\n    icon: _icon, // eslint-disable-line\n    icon_size: _icon_size, // eslint-disable-line\n    disabled: _disabled, // eslint-disable-line\n\n    ...rest\n  } = props\n\n  const defaultParts = [\n    <AccordionHeaderIcon\n      key=\"icon\"\n      icon={icon}\n      size={icon_size}\n      expanded={context.expanded}\n      icon_position={icon_position}\n    />,\n    <AccordionHeaderContainer key=\"container\">\n      {left_component as React.ReactNode}\n    </AccordionHeaderContainer>,\n    <AccordionHeaderTitle key=\"title\">\n      {title ||\n        (Array.isArray(children)\n          ? children.filter((cur) => !React.isValidElement(cur))\n          : children)}\n    </AccordionHeaderTitle>,\n    <AccordionHeaderDescription key=\"description\">\n      {description as React.ReactNode}\n    </AccordionHeaderDescription>,\n  ]\n\n  if (Array.isArray(children)) {\n    const removeParts = []\n    children.forEach((cur) => {\n      if (React.isValidElement(cur)) {\n        const part = defaultParts.find((c) => c.type === cur.type)\n        if (part) {\n          removeParts.push(part)\n        }\n\n        // if (cur.type === AccordionHeaderTitle) {\n        //   defaultParts.unshift(cur)\n        // } else {\n        //   defaultParts.push(cur)\n        // }\n\n        defaultParts.push(cur)\n      }\n    })\n    removeParts.forEach((part) => {\n      const index = defaultParts.findIndex((c) => c === part)\n      if (index > -1) {\n        defaultParts.splice(index, 1)\n      }\n    })\n  }\n\n  const partsToRender = []\n  const wrapperParts = []\n  const wrapperComp = (\n    <span className=\"dnb-accordion__header__wrapper\" key=\"wrapper\">\n      {wrapperParts}\n    </span>\n  )\n\n  defaultParts.forEach((part) => {\n    if (\n      React.isValidElement(part) &&\n      (part.type === AccordionHeaderTitle ||\n        part.type === AccordionHeaderDescription)\n    ) {\n      wrapperParts.push(part)\n      if (partsToRender.findIndex((c) => c === wrapperComp) === -1) {\n        partsToRender.push(wrapperComp)\n      }\n    } else {\n      partsToRender.push(part)\n    }\n  })\n\n  // position the icon to the right, if the element is not in the beginning\n  if (icon_position === undefined) {\n    const iconIndex = partsToRender.findIndex(\n      (c) => c.type === AccordionHeaderIcon\n    )\n    // because of the container at the beginning, we use 1\n    if (iconIndex > 1) {\n      icon_position = 'right'\n    }\n\n    if (left_component) {\n      icon_position = 'right'\n    }\n  }\n\n  const headerParams = {\n    id: `${id}-header`,\n    'aria-controls': `${id}-content`,\n    'aria-expanded': context.expanded,\n    role: 'button',\n    tabIndex: 0,\n    className: classnames(\n      'dnb-accordion__header',\n      icon_position && `dnb-accordion__header--icon-${icon_position}`,\n      isHoverring && hasClicked && 'dnb-accordion--hover',\n      !canClick() && 'dnb-accordion__header--prevent-click',\n      description && 'dnb-accordion__header--description',\n      no_animation && 'dnb-accordion__header--no-animation',\n      createSkeletonClass('font', skeleton, context),\n      createSpacingClasses(rest),\n      className\n    ),\n    disabled,\n    ...rest,\n  } satisfies HTMLProps<HTMLElement>\n\n  if (disabled || skeleton) {\n    headerParams.tabIndex = -1\n    headerParams.disabled = true\n    headerParams['aria-disabled'] = true\n  } else {\n    headerParams.onClick = onClickHandler\n    headerParams.onKeyDown = onKeyDownHandler\n    headerParams.onMouseOver = onMouseOverHandler\n    headerParams.onMouseOut = onMouseOutHandler\n  }\n\n  skeletonDOMAttributes(headerParams, skeleton, context)\n\n  validateDOMAttributes(props, headerParams)\n\n  let Element = 'div'\n\n  // (String(heading) === 'true' || String(heading) === '1') extracted from isTrue function\n  if (heading && (String(heading) === 'true' || String(heading) === '1')) {\n    headerParams.role = 'heading'\n    headerParams['aria-level'] = heading_level ? Number(heading_level) : 2\n  } else if (heading) {\n    headerParams.role = null\n    Element = heading as string\n  } else if (element) {\n    headerParams.role = null\n    Element = element as string\n  }\n\n  return <Element {...headerParams}>{partsToRender}</Element>\n}\n\nAccordionHeader.Container = AccordionHeaderContainer\nAccordionHeader.Icon = AccordionHeaderIcon\nAccordionHeader.Title = AccordionHeaderTitle\nAccordionHeader.Description = AccordionHeaderDescription\n\nexport default AccordionHeader\n","/**\n * Web Accordion Component\n *\n */\n\nimport React, { HTMLProps } from 'react'\nimport classnames from 'classnames'\nimport {\n  warn,\n  validateDOMAttributes,\n  processChildren,\n  getPreviousSibling,\n} from '../../shared/component-helper'\nimport { useMediaQuery } from '../../shared'\nimport AccordionContext, {\n  AccordionContextProps,\n} from './AccordionContext'\nimport { createSpacingClasses } from '../space/SpacingHelper'\nimport HeightAnimation from '../height-animation/HeightAnimation'\nimport { SpacingProps } from '../space/types'\n\nexport type AccordionContentProps = Omit<\n  React.HTMLProps<HTMLElement>,\n  'onAnimationEnd' | 'children'\n> &\n  SpacingProps & {\n    instance?: React.MutableRefObject<unknown>\n    className?: string\n    children?: React.ReactNode | ((...args: any[]) => any)\n  }\n\nexport default function AccordionContent(props: AccordionContentProps) {\n  const context = React.useContext<AccordionContextProps>(AccordionContext)\n\n  const {\n    id,\n    expanded,\n    prerender,\n    prevent_rerender,\n    single_container,\n    disabled,\n    no_animation,\n    contentRef,\n  } = context\n\n  const { className, children, instance, ...rest } = props\n\n  let elementRef = React.useRef(null)\n  const cacheRef = React.useRef(null)\n\n  if (contentRef) {\n    elementRef = contentRef\n  }\n\n  const setContainerHeight = () => {\n    const { single_container } = context\n\n    if (single_container) {\n      const contentElem = elementRef.current\n      if (contentElem) {\n        try {\n          contentElem.style.height = ''\n\n          const containerElement = getPreviousSibling(\n            'dnb-accordion-group--single-container',\n            contentElem\n          ) as HTMLElement\n\n          if (no_animation) {\n            containerElement.style.transitionDuration = '1ms'\n          }\n\n          const minHeight =\n            (contentElem.offsetHeight + contentElem.offsetTop) / 16\n          containerElement.style.minHeight = `${minHeight}rem`\n        } catch (e) {\n          warn(e)\n        }\n      }\n    }\n  }\n\n  const renderContent = () => {\n    const children = processChildren(props)\n\n    const {\n      expanded,\n      prerender,\n      prevent_rerender,\n      prevent_rerender_conditional,\n    } = context\n\n    let content = children\n\n    if (typeof content === 'string') {\n      content = <p className=\"dnb-p\">{content}</p>\n    }\n\n    if (prevent_rerender) {\n      /**\n       * Ensure we do not render, if it is not expanded\n       */\n      if (!(expanded || prerender)) {\n        content = null\n      }\n\n      // update the cache if children is not the same anymore\n      if (prevent_rerender_conditional && cacheRef.current !== content) {\n        cacheRef.current = content\n      }\n\n      if (cacheRef.current) {\n        content = cacheRef.current\n      } else {\n        cacheRef.current = content\n      }\n    }\n\n    return content\n  }\n\n  React.useEffect(() => {\n    if (expanded && single_container) {\n      setContainerHeight()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [children, expanded, single_container])\n\n  React.useState(() => {\n    if (\n      instance &&\n      Object.prototype.hasOwnProperty.call(instance, 'current')\n    ) {\n      instance.current = { setContainerHeight }\n    }\n  })\n\n  const isSmallScreen = useMediaQuery({\n    when: { max: 'small' },\n  })\n\n  const content = renderContent()\n\n  const wrapperParams = {\n    className: classnames('dnb-accordion__content', className),\n    ...rest,\n  }\n\n  const keepInDOM = prerender || prevent_rerender\n\n  const innerParams = {\n    id: `${id}-content`,\n    'aria-labelledby': `${id}-header`,\n    className: classnames(\n      'dnb-accordion__content__inner',\n      createSpacingClasses(rest)\n    ),\n  } as HTMLProps<HTMLElement>\n\n  if (expanded) {\n    innerParams['aria-expanded'] = true\n  }\n\n  if (!expanded || disabled) {\n    innerParams.disabled = true\n    innerParams['aria-hidden'] = true\n  }\n\n  // to remove spacing props\n  validateDOMAttributes(props, wrapperParams)\n  validateDOMAttributes(null, innerParams)\n\n  const animate =\n    !no_animation && (single_container ? isSmallScreen : true)\n\n  return (\n    <HeightAnimation\n      {...wrapperParams}\n      open={expanded}\n      animate={animate}\n      keepInDOM={keepInDOM}\n      innerRef={elementRef}\n    >\n      <section {...innerParams}>{content}</section>\n    </HeightAnimation>\n  )\n}\n","import { warn } from '../../shared/component-helper'\n\ntype AccordionStoreInstance = {\n  _id: string\n  close: () => void\n}\nexport class AccordionStore {\n  _instances: Array<AccordionStoreInstance>\n  _id: string\n  constructor(id: string) {\n    this._id = id\n    this._instances = []\n  }\n  onChange({ id }: { id: string }) {\n    this._instances.forEach((inst) => {\n      if (inst._id !== id) {\n        inst.close()\n      }\n    })\n  }\n  addInstance(instance: AccordionStoreInstance) {\n    this._instances.push(instance)\n  }\n  removeInstance(instance) {\n    this._instances = this._instances.filter((inst) => inst !== instance)\n  }\n}\n\nexport type StoreDataReturn = {\n  id: string\n  expanded: boolean\n}\nexport type StoreOptions = {\n  force?: boolean\n}\n\ntype StoreProps = {\n  id?: string\n  group?: string\n}\n\nexport class Store {\n  id?: string\n  group?: string\n\n  constructor({ id, group }: StoreProps) {\n    this.id = id\n    this.group = group\n    return this\n  }\n\n  storeId(id = this.id) {\n    if (this.group) {\n      // Skip using the random ID\n      if (this.group[0] === '#') {\n        return null\n      }\n      id = this.group\n    }\n    return `dnb-accordion-${id}`\n  }\n\n  saveState(expanded: boolean, id = this.id, opts: StoreOptions = {}) {\n    if (id) {\n      try {\n        const store = this.getData() || ({} as StoreDataReturn)\n\n        if (this.group) {\n          if (expanded) {\n            store.id = id\n          } else if (opts && opts.force) {\n            store.id = null\n          }\n        } else {\n          store.expanded = expanded\n        }\n\n        const storeId = this.storeId(id)\n        if (storeId) {\n          window.localStorage.setItem(storeId, JSON.stringify(store))\n        }\n      } catch (e) {\n        //\n      }\n    } else {\n      rememberWarning()\n    }\n  }\n\n  getData(id = this.id): StoreDataReturn {\n    const storeId = this.storeId(id)\n\n    if (storeId) {\n      try {\n        if (\n          Object.prototype.hasOwnProperty.call(\n            window.localStorage,\n            storeId\n          )\n        ) {\n          return JSON.parse(window.localStorage.getItem(storeId))\n        }\n      } catch (e) {\n        //\n      }\n    }\n\n    return null\n  }\n\n  getState(id = this.id) {\n    let state = null\n\n    const store = this.getData(id)\n\n    if (store) {\n      if (typeof store.id !== 'undefined') {\n        state = id === store.id\n      } else if (typeof store.expanded !== 'undefined') {\n        state = store.expanded\n      }\n    }\n\n    return state\n  }\n\n  flush(id = this.id) {\n    if (id) {\n      try {\n        const storeId = this.storeId(id)\n        if (storeId) {\n          window.localStorage.setItem(storeId, null)\n        }\n      } catch (e) {\n        //\n      }\n    }\n  }\n}\n\nexport function rememberWarning(type = 'accordion') {\n  warn(`Missing \"id\" prop the ${type}! \"remember_state\" is enabled.`)\n}\n","/**\n * Web Accordion Component\n *\n */\n\nimport React, {\n  useContext,\n  useState,\n  useEffect,\n  useRef,\n  HTMLProps,\n} from 'react'\n\nimport classnames from 'classnames'\nimport {\n  makeUniqueId,\n  findElementInChildren,\n  extendPropsWithContext,\n  validateDOMAttributes,\n  dispatchCustomElementEvent,\n} from '../../shared/component-helper'\nimport { createSpacingClasses } from '../space/SpacingHelper'\n\nimport type { ButtonIconPosition } from '../Button'\nimport type { HeadingLevel } from '../Heading'\nimport type { IconIcon, IconSize } from '../Icon'\nimport type { SkeletonShow } from '../Skeleton'\nimport type { SpacingProps } from '../space/types'\n\nimport AccordionGroup from './AccordionGroup'\nimport AccordionHeader from './AccordionHeader'\nimport AccordionContent from './AccordionContent'\nimport AccordionContext from './AccordionContext'\nimport AccordionProviderContext from './AccordionProviderContext'\nimport Context from '../../shared/Context'\n\nimport { AccordionStore, Store, rememberWarning } from './AccordionStore'\nimport { accordionDefaultProps } from './defaultProps'\n\nexport type AccordionVariant = 'plain' | 'default' | 'outlined' | 'filled'\n\nexport type AccordionHeading = boolean | React.ReactNode\n\nexport type AccordionIcon =\n  | IconIcon\n  | {\n      closed?: React.ReactNode | ((...args: any[]) => any)\n      /**\n       * If set to `true` the accordion will be expanded as its initial state.\n       */\n      expanded?: React.ReactNode | ((...args: any[]) => any)\n    }\n\nexport type AccordionAttributes = string | Record<string, unknown>\n\nexport type AccordionIconPosition = ButtonIconPosition\n\nexport type AccordionProps = Omit<React.HTMLProps<HTMLElement>, 'ref'> &\n  SpacingProps & {\n    /**\n     * A title as a string or React element. It will be used as the button text.\n     */\n    title?: React.ReactNode\n    description?: React.ReactNode\n    /**\n     * If set to `true` the accordion will be expanded as its initial state.\n     */\n    expanded?: boolean\n    /**\n     * If set to `true`, the open and close animation will be omitted.\n     */\n    no_animation?: boolean\n    /**\n     * If set to `true` the accordion will be expanded during SSR. Can be potentially useful for SEO, although it will disturb client hydration, where React expects the same state. But that&#39;s mainly a technical aspect to consider.\n     */\n    expanded_ssr?: boolean\n    /**\n     */\n    prerender?: boolean\n    /**\n     * If set to `true` the accordion component will not re-render its content – can be useful for widgets you don&#39;t have control of storing the temporary state during an interaction.\n     */\n    prevent_rerender?: boolean\n    /**\n     * Use this prop together with `prevent_rerender` – and if it is to `true`, the accordion component will re-render if the children are a new React element and does not match the previous one anymore.\n     */\n    prevent_rerender_conditional?: boolean\n    /**\n     * If set to `true`, it will remember a changed state initiated by the user. It requires a unique `id`. It will store the sate in the local storage.\n     */\n    remember_state?: boolean\n    /**\n     * Send along a custom React Ref for `.dnb-accordion__content`.\n     */\n    contentRef?: React.MutableRefObject<unknown>\n    /**\n     * If set to `true`, the saved (remembered) will be removed and the initial component state will be used and set.\n     */\n    flush_remembered_state?: boolean\n    /**\n     * If set to `true`, a group of accordions will be wrapped to sidebar looking menu for medium and larger screens.\n     */\n    single_container?: boolean\n    /**\n     * Defines the used styling. As of now, only `outlined` is available. Use `plain` for no styles. It defaults to `outlined`.\n     */\n    variant?: AccordionVariant\n    /**\n     * Will add a React element on the left side of the `title`, inside `AccordionHeaderContainer`.\n     */\n    left_component?: React.ReactNode\n    /**\n     * If set to `true`, the accordion button will be disabled (dimmed).\n     */\n    disabled?: boolean\n    /**\n     * If set to `true`, an overlaying skeleton with animation will be shown.\n     */\n    skeleton?: SkeletonShow\n    /**\n     * A unique `id` that will be used on the button element. If you use `remember_state`, an id is required.\n     */\n    id?: string\n    group?: string\n    /**\n     * Gives you the option to replace the used `button` element. Provide a React element, including a string (HTML element). Defaults to a `div` with all the needed accessibility features included.\n     */\n    element?: React.ReactNode\n    /**\n     * If set to `true`, level 2 (h2) will be used. You can provide your own HTML heading (`h3`), or provide a `heading_level` property.\n     */\n    heading?: AccordionHeading\n    /**\n     * If `heading` is set to `true`, you can provide a numeric value to define a different heading level. Defaults to `2`.\n     */\n    heading_level?: HeadingLevel\n    /**\n     * Will replace the `chevron` icon. The icon will still rotate (by CSS). You can use an object to use two different icons, one for the closed state and one for the expanded state `{ closed, expanded }`.\n     */\n    icon?: AccordionIcon\n    /**\n     * Will set the placement of the icon. Defaults to `left`.\n     */\n    icon_position?: AccordionIconPosition\n    /**\n     * Define a different icon size. Defaults to `medium` (1.5rem).\n     */\n    icon_size?: IconSize\n    attributes?: AccordionAttributes\n    class?: string\n    className?: string\n    children?: React.ReactNode\n    /**\n     * Will be called by user click interaction. Returns an object with a boolean state `expanded` inside `{ expanded, id, event, ...event }`.\n     */\n    on_change?: (...args: any[]) => any\n    on_state_update?: (...args: any[]) => any\n  }\n\nfunction Accordion({\n  variant = 'outlined',\n  icon_size = 'medium',\n  ...restOfProps\n}: AccordionProps) {\n  const props = { variant, icon_size, ...restOfProps }\n\n  const context = useContext(AccordionProviderContext)\n\n  const group = props.group || context?.group\n  const id = useRef(props.id || makeUniqueId()).current\n\n  const store = new Store({ id: props.id, group })\n\n  // States ordered last here to make sure that the getInitialExpandedState have access to the store\n  const [previousExpanded, setPreviousExpanded] = useState(props.expanded)\n  const [expanded, setExpanded] = useState<boolean>(\n    getInitialExpandedState()\n  )\n\n  // replacement for getDerivedStateFromProps\n  if (props.expanded !== previousExpanded) {\n    setExpanded(props.expanded !== undefined ? props.expanded : false)\n    setPreviousExpanded(props.expanded)\n  }\n\n  const thisInstance = {\n    _id: id,\n    context,\n    handleDisabledClick,\n    callOnChange,\n    callOnChangeHandler,\n    close,\n    setExpandedState,\n    state: { expanded, group },\n    props,\n    store,\n  }\n\n  // Constructor\n  useEffect(() => {\n    if (group && typeof window !== 'undefined') {\n      window['__dnbAccordion'] = window['__dnbAccordion'] || {}\n      window['__dnbAccordion'][group] =\n        window['__dnbAccordion'][group] || new AccordionStore(group)\n\n      window['__dnbAccordion'][group].addInstance(thisInstance)\n    }\n\n    if (context && typeof context?.onInit === 'function') {\n      context.onInit(thisInstance)\n    }\n\n    return () => {\n      if (group && typeof window !== 'undefined') {\n        window?.['__dnbAccordion'][group]?.removeInstance(thisInstance)\n      }\n    }\n  }, [])\n\n  // componentDidUpdate\n  useEffect(() => {\n    if (context.flush_remembered_state) {\n      store.flush()\n      setExpanded(props.expanded)\n    }\n\n    if (context?.expanded_id && context.expanded_id === props.id) {\n      setExpanded(true)\n    }\n  }, [context.flush_remembered_state, context.expanded_id])\n\n  // Gets the initial expanded sate, to prevent the opening and closing of Accordion\n  // That happens when if we put this logic in a useEffect that runs after the inital expanded state is set\n  // Since useEffect runs after every render\n  function getInitialExpandedState() {\n    if (props.expanded_ssr || context?.expanded_ssr) {\n      return typeof window === 'undefined'\n    }\n\n    if (props.remember_state || context.remember_state) {\n      const storedExpanded = store.getState()\n\n      if (props.expanded && storedExpanded === false) {\n        return false\n      }\n\n      if (storedExpanded) {\n        return true\n      }\n    }\n\n    return props.expanded !== undefined\n      ? props.expanded\n      : context?.expanded !== undefined\n      ? context.expanded\n      : false\n  }\n\n  function setExpandedState(expanded: boolean) {\n    setExpanded(expanded)\n  }\n\n  function close() {\n    changeOpened(false)\n  }\n\n  function changeOpened(expanded: boolean) {\n    setExpanded(expanded)\n\n    // check if a event exists, because, then it's a user click\n    if (props.remember_state || context.remember_state) {\n      store.saveState(expanded)\n    }\n  }\n\n  function handleDisabledClick(e: React.MouseEvent<HTMLElement>) {\n    e.preventDefault()\n    return false\n  }\n\n  function callOnChangeHandler(...params: any[]) {\n    callOnChange(...params)\n    if (context?.onChange) {\n      context?.onChange(...params)\n    }\n    if (group && typeof window !== 'undefined') {\n      window?.['__dnbAccordion'][group]?.onChange(...params)\n    }\n  }\n\n  function callOnChange(...params: any[]) {\n    const { expanded, event } = params[0]\n\n    changeOpened(expanded)\n\n    dispatchCustomElementEvent(thisInstance, 'on_change', {\n      expanded,\n      event,\n    })\n  }\n\n  return (\n    <Context.Consumer>\n      {(globalContext) => (\n        <AccordionContext.Consumer>\n          {(nestedContext) => {\n            // use only the props from context, who are available here anyway\n            let expandedState = expanded\n\n            const extendedProps = extendPropsWithContext(\n              props,\n              accordionDefaultProps,\n              context, // group context\n              nestedContext as Record<string, unknown>, // internal context\n              { skeleton: globalContext?.skeleton },\n              globalContext.Accordion, // global context\n              globalContext.translation.Accordion\n            )\n\n            if (expandedState === undefined && globalContext.Accordion) {\n              if (globalContext.Accordion.expanded) {\n                expandedState = extendedProps.expanded\n              }\n            }\n\n            const {\n              variant,\n              className,\n              class: _className,\n              prerender,\n              prevent_rerender,\n              prevent_rerender_conditional,\n              single_container,\n              remember_state,\n              disabled,\n              skeleton,\n              no_animation,\n              expanded_ssr: _expanded_ssr, // eslint-disable-line\n              children,\n\n              id: _id, // eslint-disable-line\n              group: _group, // eslint-disable-line\n              // expanded: _expanded, // eslint-disable-line\n\n              title, // eslint-disable-line\n              description, // eslint-disable-line\n              left_component, // eslint-disable-line\n              icon, // eslint-disable-line\n              icon_position, // eslint-disable-line\n              icon_size, // eslint-disable-line\n              on_change, // eslint-disable-line\n              on_state_update, // eslint-disable-line\n\n              contentRef, // eslint-disable-line\n\n              ...restOfExtendedProps\n            } = extendedProps\n\n            const mainParams = {\n              id,\n              className: classnames(\n                'dnb-accordion',\n                expandedState && 'dnb-accordion--expanded',\n                variant && `dnb-accordion__variant--${variant}`,\n                prerender && 'dnb-accordion--prerender',\n                createSpacingClasses(extendedProps),\n                className,\n                _className\n              ),\n            } as HTMLProps<HTMLDivElement>\n\n            if (disabled) {\n              mainParams.onClick = handleDisabledClick\n            }\n\n            // to remove spacing props\n            validateDOMAttributes(props, restOfExtendedProps)\n\n            const extendedPropsForContext = extendPropsWithContext(\n              props,\n              accordionDefaultProps,\n              { expanded, group },\n              context\n            )\n\n            const accordionContext = {\n              ...extendedPropsForContext,\n              id,\n              expanded: expandedState,\n              prerender: prerender,\n              prevent_rerender: prevent_rerender,\n              prevent_rerender_conditional: prevent_rerender_conditional,\n              single_container: single_container,\n              remember_state: remember_state,\n              disabled: disabled,\n              skeleton: skeleton,\n              no_animation: no_animation,\n              callOnChange: callOnChangeHandler,\n            }\n\n            return (\n              <AccordionContext.Provider value={accordionContext}>\n                <div {...mainParams}>\n                  {findElementInChildren(\n                    children,\n                    (cur) => cur.type === AccordionHeader\n                  ) ? null : (\n                    <AccordionHeader />\n                  )}\n                  {findElementInChildren(\n                    children,\n                    (cur) => cur.type === AccordionContent\n                  ) ? (\n                    children\n                  ) : (\n                    <AccordionContent>{children}</AccordionContent>\n                  )}\n                </div>\n              </AccordionContext.Provider>\n            )\n          }}\n        </AccordionContext.Consumer>\n      )}\n    </Context.Consumer>\n  )\n}\n// TEMPORARY SOLUTION (defaultProps will be deprecated at one point). Needs to replacement with default prop parameters for example \"({expaned: null})\"\n// Only solved this way to prevent tests from failing, for when expanded is undefined instead of null\nAccordion.defaultProps = accordionDefaultProps\n\nexport type GroupProps = AccordionProps & {\n  allow_close_all?: boolean\n  expanded_id?: string\n}\n\nconst Group = (props: GroupProps) => {\n  if (props.remember_state && !props.id) {\n    rememberWarning('accordion group')\n  }\n\n  const [expandedId, setExpandedId] = useState<string | null>(null)\n\n  const instanceIDs = useRef<string[]>([])\n\n  const group = props?.id\n    ? props.id\n    : !props.group\n    ? '#' + makeUniqueId()\n    : undefined\n\n  const store = new Store({ group })\n\n  // Set stored expanded_id on mount\n  useEffect(() => {\n    const storedData = store.getData()\n    const currentIDs = instanceIDs?.current\n\n    if (!storedData?.id) {\n      return\n    }\n\n    if (currentIDs.includes(storedData?.id)) {\n      return\n    }\n\n    // 1. get the fallback id\n    const fallbackId = currentIDs[0]\n\n    if (!fallbackId) {\n      return\n    }\n\n    // 2. set the fallback ids\n    setExpandedId(fallbackId)\n  }, [])\n\n  // Store and reset fallback id\n  useEffect(() => {\n    if (!expandedId) {\n      return\n    }\n\n    // 3. save the fallback id\n    store.saveState(true, expandedId)\n\n    // 4. and reset the fallback id\n    setExpandedId(null)\n  }, [expandedId])\n\n  function onInit(instance) {\n    if (\n      instance.props.id &&\n      !instanceIDs.current.includes(instance.props.id)\n    ) {\n      instanceIDs.current.push(instance.props.id)\n    }\n  }\n\n  return (\n    <AccordionGroup\n      onInit={onInit}\n      {...props}\n      group={group}\n      expanded_id={expandedId || props.expanded_id}\n    />\n  )\n}\n\nAccordion.Provider = AccordionGroup\nAccordion.Header = AccordionHeader\nAccordion.Content = AccordionContent\n\nAccordion.Group = Group\n\nGroup.Store = (group: string, id: string = null) => {\n  return new Store({ group, id })\n}\n\nAccordion.Store = (id: string) => {\n  return new Store({ id })\n}\n\nexport default Accordion\n","import React from 'react'\nimport { isTrue } from './component-helper'\nimport Context from './Context'\nimport {\n  makeMediaQueryList,\n  createMediaQueryListener,\n  isMatchMediaSupported,\n} from './MediaQueryUtils'\nimport type {\n  MediaQueryProps,\n  MediaQueryListener,\n} from './MediaQueryUtils'\n\nexport type { MediaQueryProps }\n\nexport default function useMediaQuery(props: MediaQueryProps) {\n  const context = React.useContext(Context)\n  const { query, when, not, matchOnSSR, disabled } = props\n\n  let matches = React.useMemo(() => {\n    if (disabled) {\n      return false // stop here\n    }\n\n    return isTrue(matchOnSSR) && !isMatchMediaSupported()\n  }, [disabled, matchOnSSR])\n\n  const mediaQueryList = React.useRef(\n    makeMediaQueryList(props, context.breakpoints)\n  )\n  if (mediaQueryList.current?.matches) {\n    matches = true\n  }\n\n  const [match, matchUpdate] = React.useState(matches)\n\n  const listenerRef = React.useRef<MediaQueryListener>()\n  React.useLayoutEffect(() => {\n    if (disabled) {\n      return // stop here\n    }\n\n    if (typeof listenerRef.current === 'function') {\n      listenerRef.current()\n\n      mediaQueryList.current = makeMediaQueryList(\n        props,\n        context.breakpoints\n      )\n      matchUpdate(mediaQueryList.current?.matches)\n    }\n\n    listenerRef.current = createMediaQueryListener(\n      mediaQueryList.current,\n      (match) => matchUpdate(match)\n    )\n\n    return listenerRef.current\n  }, [query, when, not, disabled]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return Boolean(match)\n}\n"],"names":["React","accordionDefaultProps","variant","icon_size","props","context","useContext","Context","id","makeUniqueId","thisInstance","_id","onChangeHandler","event","dispatchCustomElementEvent","expanded","extendedProps","extendPropsWithContext","Accordion","getTranslation","expanded_id","prerender","prevent_rerender","single_container","contentRef","allow_close_all","remember_state","flush_remembered_state","disabled","group","onInit","className","class","_className","children","restOfExtendedProps","classes","classnames","isTrue","createSpacingClasses","params","validateDOMAttributes","contextForProvider","onChange","_jsx","AccordionGroupContext","Provider","value","role","AccordionHeaderTitle","_ref","rest","AccordionHeaderDescription","_ref2","AccordionHeaderContainer","_ref3","AccordionHeaderIcon","_ref4","_icon2","icon","size","icon_position","theme","useTheme","animateIcon","name","closed","IconPrimary","accordionHeaderDefaultProps","AccordionHeader","_ref5","icon_size_default","restOfProps","isHoverring","setIsHovering","useState","hasClicked","setHasClicked","AccordionContext","onClickHandler","canClick","callOnChange","left_component","title","description","element","heading","heading_level","skeleton","no_animation","_left_component","_expanded","_title","_description","_icon","_icon_size","_disabled","defaultParts","Array","isArray","filter","cur","removeParts","forEach","part","find","c","type","push","index","findIndex","splice","partsToRender","wrapperParts","wrapperComp","undefined","headerParams","tabIndex","createSkeletonClass","onClick","onKeyDown","keyPressed","key","preventDefault","onMouseOver","onMouseOut","skeletonDOMAttributes","Element","String","Number","Container","Icon","Title","Description","AccordionContent","instance","elementRef","cacheRef","setContainerHeight","contentElem","current","style","height","containerElement","getPreviousSibling","transitionDuration","minHeight","offsetHeight","offsetTop","e","warn","Object","prototype","hasOwnProperty","call","isSmallScreen","useMediaQuery","when","max","content","renderContent","processChildren","prevent_rerender_conditional","wrapperParams","keepInDOM","innerParams","animate","HeightAnimation","open","innerRef","AccordionStore","this","_instances","_proto","inst","close","addInstance","removeInstance","Store","_proto2","storeId","saveState","opts","store","getData","force","window","localStorage","setItem","JSON","stringify","rememberWarning","parse","getItem","getState","state","flush","AccordionProviderContext","useRef","previousExpanded","setPreviousExpanded","setExpanded","expanded_ssr","storedExpanded","getInitialExpandedState","handleDisabledClick","callOnChangeHandler","changeOpened","setExpandedState","_len","arguments","length","_key","_window2","_window2$__dnbAccordi","apply","useEffect","_window","_window$__dnbAccordio","Consumer","globalContext","nestedContext","expandedState","translation","_expanded_ssr","_group","on_change","on_state_update","mainParams","accordionContext","_jsxs","findElementInChildren","defaultProps","Group","expandedId","setExpandedId","instanceIDs","storedData","currentIDs","includes","fallbackId","AccordionGroup","Header","Content","_mediaQueryList$curre","query","not","matchOnSSR","matches","isMatchMediaSupported","mediaQueryList","makeMediaQueryList","breakpoints","match","matchUpdate","listenerRef","_mediaQueryList$curre2","createMediaQueryListener","Boolean"],"sourceRoot":""}