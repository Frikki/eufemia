{"version":3,"file":"component---src-docs-500-tsx-b66a0bb8da58a7ada9f3.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/500.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/global-error/GlobalError.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/skeleton/Skeleton.js"],"sourcesContent":["/**\n * Page not found\n *\n */\n\nimport React from 'react'\nimport { GlobalError } from '@dnb/eufemia/src/components'\n\nexport default function Error500() {\n  return (\n    <GlobalError\n      center\n      status=\"500\"\n      title=\"Sorry, we got a technical issue!\"\n      text=\"The service is not working properly at the moment. Please try again later.\"\n    />\n  )\n}\n","/**\n * Web GlobalError Component\n *\n */\n\nimport React from 'react'\nimport classnames from 'classnames'\nimport Context, { GetTranslationProps } from '../../shared/Context'\nimport {\n  processChildren,\n  extendPropsWithContext,\n} from '../../shared/component-helper'\nimport { createSpacingClasses } from '../space/SpacingHelper'\nimport Anchor from '../anchor/Anchor'\nimport Skeleton, { SkeletonShow } from '../skeleton/Skeleton'\nimport { H1, P, Code } from '../../elements'\nimport type { SpacingProps } from '../../shared/types'\n\nexport type GlobalErrorLink = {\n  text: string\n  url: string\n}\n\nexport type GlobalErrorProps = {\n  /**\n   * When `404` or `500` is given, a predefined text will be shown.\n   * Defaults to `400`.\n   */\n  status?: '404' | '500' | string\n\n  /**\n   * Will overwrite the default title.\n   */\n  title?: React.ReactNode\n\n  /**\n   * Will overwrite the default text.\n   */\n  text?: React.ReactNode\n\n  /**\n   * Will overwrite the default error message code.\n   */\n  code?: React.ReactNode\n\n  /**\n   * Will overwrite the default additional help text.\n   */\n  help?: React.ReactNode\n\n  /**\n   * Provide an array with objects `{ text: 'Text', url: 'https://...' }` to display a list of anchor links.\n   */\n  links?: Array<GlobalErrorLink>\n\n  /**\n   * If true, it will use 80vh as the height and center its content.\n   */\n  center?: boolean\n\n  /**\n   * Skeleton should be applied when loading content\n   * Default: null\n   */\n  skeleton?: SkeletonShow\n}\n\nexport type GlobalErrorAllProps = GlobalErrorProps &\n  React.HTMLProps<HTMLElement> &\n  SpacingProps &\n  GetTranslationProps\n\nexport type GlobalErrorTranslationContent = {\n  /**\n   * Defining a `title` will overwrite the default provided by `status_content`.\n   */\n  title?: React.ReactNode\n\n  /**\n   * Defining a `text` will overwrite the default provided by `status_content`.\n   */\n  text?: React.ReactNode\n}\nexport type GlobalErrorTranslation = {\n  404?: GlobalErrorTranslationContent\n  500?: GlobalErrorTranslationContent\n}\n\nconst defaultProps = {\n  status: '404',\n}\n\nexport default function GlobalError(localProps: GlobalErrorAllProps) {\n  // Every component should have a context\n  const context = React.useContext(Context)\n\n  const translation = context.getTranslation(localProps)\n    .GlobalError as GlobalErrorTranslation\n\n  // Extract additional props from global context\n  const allProps = extendPropsWithContext(\n    localProps,\n    defaultProps,\n    context?.GlobalError,\n    translation,\n    translation[localProps.status || defaultProps.status],\n    { skeleton: context?.skeleton }\n  )\n\n  const {\n    status,\n    skeleton,\n    center,\n    className,\n\n    title,\n    help,\n    code,\n    links,\n    text,\n\n    ...attributes\n  } = allProps\n\n  const textParams: React.HTMLAttributes<HTMLElement> = {}\n  if (typeof text === 'string') {\n    textParams.dangerouslySetInnerHTML = { __html: text }\n  } else {\n    textParams.children = text\n  }\n\n  const spacingClasses = createSpacingClasses(attributes)\n\n  const params = {\n    className: classnames(\n      'dnb-global-error',\n      `dnb-global-error--${status}`,\n      center && 'dnb-global-error--center',\n      createSpacingClasses(attributes),\n      className,\n      spacingClasses\n    ),\n    ...attributes,\n  } as Record<string, unknown>\n\n  const additionalContent = processChildren(allProps)\n\n  return (\n    <Skeleton {...params} show={skeleton} element=\"section\">\n      <div className=\"dnb-global-error__inner\">\n        <div className=\"dnb-global-error__inner__content\">\n          <H1 size=\"x-large\" top bottom>\n            {title}\n          </H1>\n          <P bottom {...textParams} />\n          {code && (\n            <P bottom className=\"dnb-global-error__status\">\n              {code} <Code>{status}</Code>\n            </P>\n          )}\n          {help && links?.length && (\n            <P top=\"medium\" bottom>\n              {help}\n            </P>\n          )}\n          {help && links?.length && (\n            <P bottom=\"large\" className=\"dnb-global-error__links\">\n              {links.map(({ text, url }) => {\n                return (\n                  <Anchor key={text} href={url}>\n                    {text}\n                  </Anchor>\n                )\n              })}\n            </P>\n          )}\n        </div>\n        {additionalContent}\n      </div>\n    </Skeleton>\n  )\n}\n","/**\n * Web Skeleton Component\n *\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {\n  extendPropsWithContextInClassComponent,\n  validateDOMAttributes,\n  isTrue,\n} from '../../shared/component-helper'\nimport { LOCALE } from '../../shared/defaults'\nimport Space from '../space/Space'\nimport {\n  spacingPropTypes,\n  createSpacingClasses,\n} from '../space/SpacingHelper'\nimport Context from '../../shared/Context'\nimport Provider from '../../shared/Provider'\n\nexport default class Skeleton extends React.PureComponent {\n  static contextType = Context\n\n  static propTypes = {\n    show: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    no_animation: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    figure: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    aria_busy: PropTypes.string,\n    aria_ready: PropTypes.string,\n    element: PropTypes.node,\n\n    ...spacingPropTypes,\n\n    class: PropTypes.string,\n    className: PropTypes.string,\n    children: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n  }\n\n  static defaultProps = {\n    show: null,\n    skeleton: null, // only to make sure we process extendPropsWithContextInClassComponent\n    no_animation: null,\n    figure: null,\n    aria_busy: null,\n    aria_ready: null,\n    element: null,\n    class: null,\n    className: null,\n    children: null,\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = { ariaLiveUpdate: null }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this._ariaLiveUpdateTimeout)\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.show !== this.props.show) {\n      this.setAriaLiveUpdate()\n    }\n  }\n\n  getProps(props = this.props, context = this.context) {\n    return extendPropsWithContextInClassComponent(\n      props,\n      Skeleton.defaultProps,\n      {\n        skeleton: context.Skeleton || context.skeleton,\n        no_animation: context.skeleton_no_animation,\n      },\n      context.getTranslation(props).Skeleton\n    )\n  }\n\n  setAriaLiveUpdate() {\n    // this is only to make a better screen reader ux\n    clearTimeout(this._ariaLiveUpdateTimeout)\n    this._ariaLiveUpdateTimeout = setTimeout(() => {\n      const { aria_busy, aria_ready } = this.getProps()\n\n      let newString = null\n\n      if (isTrue(this.props.show)) {\n        newString = aria_busy\n      } else {\n        newString = aria_ready\n      }\n\n      if (newString) {\n        this.setState({\n          ariaLiveUpdate: newString,\n        })\n        this._ariaLiveUpdateTimeout = setTimeout(() => {\n          this.setState({\n            ariaLiveUpdate: null,\n          })\n        }, 1e3)\n      }\n    }, 1e3) // so that the input gets read out first, and then the results\n  }\n\n  render() {\n    // consume the skeleton context\n    const props = this.getProps()\n\n    const {\n      show,\n      no_animation,\n      figure,\n      skeleton,\n      aria_busy,\n      aria_ready, // eslint-disable-line\n      className,\n      class: _className,\n      children,\n\n      ...attributes\n    } = props\n\n    const { ariaLiveUpdate } = this.state\n\n    const showSkeleton =\n      typeof show === 'boolean' || typeof show === 'string'\n        ? isTrue(show)\n        : skeleton\n\n    const params = {\n      className: classnames(\n        figure ? 'dnb-skeleton__figure' : 'dnb-skeleton__root',\n        isTrue(showSkeleton) && 'dnb-skeleton',\n        isTrue(no_animation) && 'dnb-skeleton--no-animation',\n        createSpacingClasses(props),\n        className,\n        _className\n      ),\n      // role: 'status',// is not needed as for now\n      'aria-busy': showSkeleton,\n      'aria-label': showSkeleton ? aria_busy : undefined,\n      lang: this.context.locale || LOCALE,\n      ...attributes,\n    }\n\n    validateDOMAttributes(props, params)\n\n    return (\n      <Space {...params}>\n        {figure ? (\n          showSkeleton ? (\n            typeof figure === 'function' ? (\n              figure()\n            ) : (\n              figure\n            )\n          ) : (\n            children\n          )\n        ) : (\n          <Provider\n            skeleton={showSkeleton}\n            skeleton_no_animation={no_animation}\n          >\n            {children}\n          </Provider>\n        )}\n        <span className=\"dnb-sr-only\" aria-live=\"assertive\">\n          {ariaLiveUpdate}\n        </span>\n      </Space>\n    )\n  }\n}\n\nfunction Exclude(props) {\n  return <Provider {...props} skeleton={false} />\n}\n\nSkeleton.Exclude = Exclude\n"],"names":["Error500","center","status","title","text","defaultProps","GlobalError","localProps","context","React","translation","allProps","extendPropsWithContext","skeleton","textParams","__html","spacingClasses","createSpacingClasses","params","className","classnames","additionalContent","processChildren","show","element","size","top","bottom","code","help","links","href","Skeleton","props","state","ariaLiveUpdate","componentWillUnmount","clearTimeout","this","_ariaLiveUpdateTimeout","componentDidUpdate","prevProps","setAriaLiveUpdate","getProps","extendPropsWithContextInClassComponent","no_animation","skeleton_no_animation","getTranslation","setTimeout","aria_busy","aria_ready","newString","isTrue","setState","render","figure","class","_className","children","attributes","showSkeleton","undefined","lang","locale","LOCALE","validateDOMAttributes","contextType","Context","Exclude"],"sourceRoot":""}