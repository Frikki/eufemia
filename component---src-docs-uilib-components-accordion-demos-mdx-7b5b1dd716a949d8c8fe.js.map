{"version":3,"file":"component---src-docs-uilib-components-accordion-demos-mdx-7b5b1dd716a949d8c8fe.js","mappings":"wQAaO,MAAMA,EAA0B,mcAuB1BC,EAA+B,imCAyB/BC,EAAgC,uuBA2BhCC,EAA4B,+EACzC,mBACA,YAFyC,SAEzC,03EAyFA,SAASC,EAAgB,GAA6B,IAA7B,aAAC,EAAD,YAA4B,EACnD,MAAOC,EAAY,GAAsBC,EAAAA,UAAzC,GAIA,OAHAA,EAAAA,WAAgB,KACdC,EAAAA,QAAAA,oBAAAA,GACC,CAACA,EAFJD,KAIE,iCACE,cACEE,QADF,EAEEC,UAAW,KACTC,GAAmBC,IAAnBD,GAAAA,EAEFE,QALF,WADF,wBAUGP,EAAW,EAXhB,OAgBF,CAAO,MAAMQ,EAAwB,4vBA0BxBC,EAAwB,IAC5B,4BAAkCC,OAAlC,2EACT,QADS,IAET,aAFS,cAGT,maAHE,KAgCWC,EAAyB,KACpC,0cChQF,SAASC,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,OAAQ,SACRC,EAAG,MACFC,EAAAA,EAAAA,MAAsBT,EAAMU,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKb,EAAYG,GAAI,CAC9BS,SAAU,UACR,MAAMC,EAAAA,EAAAA,KAAKb,EAAYI,GAAI,CAC7BQ,SAAU,qBACR,MAAMC,EAAAA,EAAAA,KAAKhC,EAAyB,CAAC,GAAI,MAAMgC,EAAAA,EAAAA,KAAKb,EAAYI,GAAI,CACtEQ,SAAU,2CACR,MAAMC,EAAAA,EAAAA,KAAK/B,EAA8B,CAAC,GAAI,MAAM+B,EAAAA,EAAAA,KAAKb,EAAYI,GAAI,CAC3EQ,SAAU,sBACR,MAAMF,EAAAA,EAAAA,MAAMV,EAAYK,EAAG,CAC7BO,SAAU,EAACC,EAAAA,EAAAA,KAAKb,EAAYM,OAAQ,CAClCM,SAAU,QACR,+BAA+BC,EAAAA,EAAAA,KAAKb,EAAYO,EAAG,CACrDO,KAAM,uDACNF,SAAU,wBACR,gBACF,MAAMC,EAAAA,EAAAA,KAAKnB,EAAuB,CAAC,GAAI,MAAMmB,EAAAA,EAAAA,KAAKb,EAAYI,GAAI,CACpEQ,SAAU,yBACR,MAAMC,EAAAA,EAAAA,KAAK9B,EAA+B,CAAC,GAAI,MAAM8B,EAAAA,EAAAA,KAAKb,EAAYI,GAAI,CAC5EQ,SAAU,sBACR,MAAMC,EAAAA,EAAAA,KAAKhB,EAAwB,CAAC,GAAI,MAAMgB,EAAAA,EAAAA,KAAKb,EAAYI,GAAI,CACrEQ,SAAU,sCACR,MAAMC,EAAAA,EAAAA,KAAKb,EAAYK,EAAG,CAC5BO,SAAU,iOACR,MAAMC,EAAAA,EAAAA,KAAK7B,EAA2B,CAAC,GAAI,MAAM6B,EAAAA,EAAAA,KAAKlB,EAAuB,CAAC,KAErF,CAOD,MANA,SAAoBI,QAAY,IAAZA,IAAAA,EAAQ,CAAC,GAC3B,MAAOgB,QAASC,GAAaf,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,MAAsBT,EAAMU,YAC3E,OAAOO,GAAYH,EAAAA,EAAAA,KAAKG,EAAWf,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1Da,UAAUC,EAAAA,EAAAA,KAAKf,EAAmBC,MAC9BD,EAAkBC,EACzB,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/accordion/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/accordion/demos.mdx"],"sourcesContent":["/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport {\n  add_medium as AddIcon,\n  subtract_medium as SubtractIcon,\n} from '@dnb/eufemia/src/icons'\nimport { Accordion, P, IconPrimary, ToggleButton } from '@dnb/eufemia/src'\n\nexport const AccordionDefaultExample = () => (\n  <ComponentBox data-visual-test=\"accordion-default\">\n    <Accordion\n      expanded\n      remember_state\n      id=\"single-accordion\"\n      title=\"Accordion title\"\n    >\n      <P>Accordion content</P>\n    </Accordion>\n    <Accordion.Provider\n      top\n      remember_state\n      icon=\"chevron_down\"\n      icon_position=\"right\"\n    >\n      <Accordion id=\"single-provider-accordion\" title=\"Accordion title\">\n        <P>Accordion content</P>\n      </Accordion>\n    </Accordion.Provider>\n  </ComponentBox>\n)\n\nexport const AccordionLargeContentExample = () => (\n  <ComponentBox data-visual-test=\"accordion-large\" hideCode>\n    <Accordion\n      expanded\n      bottom=\"large\"\n      title=\"Large content with long titleScelerisque eget cubilia tempus ipsum aenean dolor suscipit egestas potenti at eleifend platea interdum magnis amet molestie sem faucibus netus \"\n    >\n      <P>\n        Hendrerit dictum elit facilisis aliquet eleifend potenti leo nec\n        praesent sollicitudin elementum scelerisque ridiculus neque nisi\n        risus et habitant torquent nam pellentesque dictumst porttitor\n        accumsan a nibh fringilla facilisi lacus sagittis mauris libero\n        tellus justo ultricies tempor viverra sodales vestibulum proin\n        tempus lorem cubilia at velit sociis sit malesuada class\n        consectetur turpis metus vulputate tortor cum nisl ornare ligula\n        platea quam gravida sapien penatibus ad curae varius hac ultrices\n        ipsum felis vehicula fermentum rutrum parturient congue sed vel\n        magnis laoreet donec id consequat augue mi semper volutpat urna in\n        condimentum luctus cursus fames dignissim magna suspendisse\n        bibendum mus natoque diam\n      </P>\n    </Accordion>\n  </ComponentBox>\n)\n\nexport const AccordionCustomisationExample = () => (\n  <ComponentBox data-visual-test=\"accordion-custom\">\n    <Accordion\n      group=\"unique-id\"\n      left_component={<IconPrimary icon=\"bell\" />}\n    >\n      <Accordion.Header>Accordion title</Accordion.Header>\n      <Accordion.Content>\n        <P>\n          Sociis sapien sociosqu vel sollicitudin accumsan laoreet gravida\n          himenaeos nostra mollis volutpat bibendum convallis cum\n          condimentum dictumst blandit rutrum vehicula\n        </P>\n      </Accordion.Content>\n    </Accordion>\n    <Accordion top expanded={true} group=\"unique-id\">\n      <Accordion.Header>Accordion title</Accordion.Header>\n      <Accordion.Content>\n        <P>\n          Nec sit mattis natoque interdum sagittis cubilia nibh nullam\n          etiam\n        </P>\n      </Accordion.Content>\n    </Accordion>\n  </ComponentBox>\n)\n\nexport const AccordionContainerExample = () => (\n  <ComponentBox\n    hideCode\n    data-visual-test=\"accordion-container\"\n    scope={{ ChangingContent }}\n  >\n    {() => {\n      function AccordionWithContainer() {\n        const ref1 = React.useRef(null)\n        const ref2 = React.useRef(null)\n        const [changeHeight] = React.useState(() => ({ ref1, ref2 }))\n        return (\n          <Accordion.Group\n            prevent_rerender\n            single_container\n            remember_state\n            id=\"remembered-state\"\n          >\n            <Accordion\n              bottom\n              id=\"remembered-state-1\"\n              title=\"Title1\"\n              description=\"Description1\"\n              expanded={true}\n            >\n              <Accordion.Header title=\"Title2\" description=\"Description2\">\n                {/* Title 3 string */}\n                <Accordion.Header.Title key=\"title\">\n                  Title 3\n                </Accordion.Header.Title>\n                <Accordion.Header.Description>\n                  Description 3\n                </Accordion.Header.Description>\n                {/* <Accordion.Header.Icon key=\"icon\" /> */}\n              </Accordion.Header>\n              <Accordion.Content\n                left=\"xx-large\"\n                top=\"medium\"\n                instance={changeHeight.ref1}\n              >\n                <ChangingContent changeHeight={changeHeight.ref1}>\n                  <div\n                    style={{\n                      height: '10rem',\n                      background: 'var(--color-sea-green-30)',\n                    }}\n                  >\n                    <P top bottom=\"xx-large\">\n                      Simulation of content height\n                    </P>\n                  </div>\n                </ChangingContent>\n              </Accordion.Content>\n            </Accordion>\n            <Accordion icon_position=\"right\" id=\"remembered-state-2\">\n              <Accordion.Header>\n                <Accordion.Header.Container>\n                  <IconPrimary icon=\"bell\" />\n                </Accordion.Header.Container>\n                <Accordion.Header.Title>\n                  Accordion title\n                </Accordion.Header.Title>\n              </Accordion.Header>\n              <Accordion.Content\n                left=\"xx-large\"\n                top=\"medium\"\n                instance={changeHeight.ref2}\n              >\n                <ChangingContent changeHeight={changeHeight.ref2}>\n                  <div\n                    style={{\n                      height: '20rem',\n                      background: 'var(--color-sand-yellow)',\n                    }}\n                  >\n                    <P top bottom=\"xx-large\">\n                      Simulation of content height\n                    </P>\n                  </div>\n                </ChangingContent>\n              </Accordion.Content>\n            </Accordion>\n          </Accordion.Group>\n        )\n      }\n\n      return <AccordionWithContainer />\n    }}\n  </ComponentBox>\n)\n\nfunction ChangingContent({ changeHeight, children }) {\n  const [contentSize, changeContentSize] = React.useState(false)\n  React.useEffect(() => {\n    changeHeight.current.setContainerHeight()\n  }, [changeHeight, contentSize])\n  return (\n    <>\n      <ToggleButton\n        checked={contentSize}\n        on_change={() => {\n          changeContentSize((s) => !s)\n        }}\n        bottom\n      >\n        Toggle content size\n      </ToggleButton>\n      {contentSize ? children : null}\n    </>\n  )\n}\n\nexport const AccordionGroupExample = () => (\n  <ComponentBox data-visual-test=\"accordion-group\">\n    <Accordion.Group expanded allow_close_all>\n      <Accordion expanded={false}>\n        <Accordion.Header>Accordion title</Accordion.Header>\n        <Accordion.Content top=\"x-large\">\n          <P>\n            Sociis sapien sociosqu vel sollicitudin accumsan laoreet\n            gravida himenaeos nostra mollis volutpat bibendum convallis cum\n            condimentum dictumst blandit rutrum vehicula\n          </P>\n        </Accordion.Content>\n      </Accordion>\n      <Accordion top>\n        <Accordion.Header>Accordion title</Accordion.Header>\n        <Accordion.Content>\n          <P>\n            Nec sit mattis natoque interdum sagittis cubilia nibh nullam\n            etiam\n          </P>\n        </Accordion.Content>\n      </Accordion>\n    </Accordion.Group>\n  </ComponentBox>\n)\n\nexport const AccordionPlainVariant = () => {\n  return typeof window !== 'undefined' && (window as any).IS_TEST ? (\n    <ComponentBox\n      data-visual-test=\"accordion-variant-plain\"\n      scope={{ AddIcon, SubtractIcon }}\n    >\n      <Accordion\n        variant=\"plain\"\n        title=\"Accordion with plain variant\"\n        icon={{\n          closed: AddIcon,\n          expanded: SubtractIcon,\n        }}\n        icon_position=\"right\"\n      >\n        <P>content</P>\n      </Accordion>\n      <Accordion\n        variant=\"plain\"\n        title=\"Accordion with plain variant\"\n        icon={{\n          closed: AddIcon,\n          expanded: SubtractIcon,\n        }}\n        icon_position=\"right\"\n        expanded\n      >\n        <P>content</P>\n      </Accordion>\n    </ComponentBox>\n  ) : null\n}\n\nexport const AccordionNestedExample = () => {\n  return (\n    <ComponentBox data-visual-test=\"accordion-nested\">\n      <Accordion id=\"nested-accordion\" title=\"Accordion\" expanded space>\n        <P space={0}>Content A</P>\n        <Accordion\n          id=\"nested-accordion-1\"\n          title=\"Accordion nested 1\"\n          space\n        >\n          <P space={0}>I'm nested 1</P>\n        </Accordion>\n\n        <P space={0}>Content B</P>\n        <Accordion\n          id=\"nested-accordion-2\"\n          title=\"Accordion nested 2\"\n          space\n        >\n          <P space={0}>I'm nested 2</P>\n        </Accordion>\n      </Accordion>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {AccordionDefaultExample, AccordionLargeContentExample, AccordionCustomisationExample, AccordionContainerExample, AccordionGroupExample, AccordionNestedExample, AccordionPlainVariant} from 'Docs/uilib/components/accordion/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Single Accordion\"\n    }), \"\\n\", _jsx(AccordionDefaultExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Accordion with large title and content\"\n    }), \"\\n\", _jsx(AccordionLargeContentExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Grouped Accordion\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"NB:\"\n      }), \" Please have a read on the \", _jsx(_components.a, {\n        href: \"/uilib/components/accordion/info#unexpected-behavior\",\n        children: \"unexpected behavior\"\n      }), \" thoughts.\"]\n    }), \"\\n\", _jsx(AccordionGroupExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Customized Accordion\"\n    }), \"\\n\", _jsx(AccordionCustomisationExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Nested Accordions\"\n    }), \"\\n\", _jsx(AccordionNestedExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Accordion with a single container\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A single container is only used for wider screens (desktop). When the users' screen is narrower (mobile), it will change to a normal accordion. The change happens with CSS only, so it will not interrupt any React render.\"\n    }), \"\\n\", _jsx(AccordionContainerExample, {}), \"\\n\", _jsx(AccordionPlainVariant, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["AccordionDefaultExample","AccordionLargeContentExample","AccordionCustomisationExample","AccordionContainerExample","ChangingContent","contentSize","React","changeHeight","checked","on_change","changeContentSize","s","bottom","AccordionGroupExample","AccordionPlainVariant","window","AccordionNestedExample","_createMdxContent","props","_components","Object","assign","h2","h3","p","strong","a","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","wrapper","MDXLayout"],"sourceRoot":""}