{"version":3,"file":"component---src-docs-uilib-components-drawer-visual-tests-hidden-tests-mdx-9ebe5dd733a3db5a0d32.js","mappings":"uOASO,MAAMA,EAAwB,itDCLrC,SAASC,EAAkBC,GACzB,OAAOC,EAAAA,EAAAA,KAAKH,EAAuB,CAAC,EACrC,CAOD,MANA,SAAoBE,QAAY,IAAZA,IAAAA,EAAQ,CAAC,GAC3B,MAAOE,QAASC,GAAaC,OAAOC,OAAO,CAAC,GAAGC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOJ,GAAYF,EAAAA,EAAAA,KAAKE,EAAWC,OAAOC,OAAO,CAAC,EAAGL,EAAO,CAC1DQ,UAAUP,EAAAA,EAAAA,KAAKF,EAAmBC,MAC9BD,GACP,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/drawer/visual-tests/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/drawer/visual-tests/hidden-tests.mdx"],"sourcesContent":["/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../../shared/tags/ComponentBox'\nimport { Drawer, P } from '@dnb/eufemia/src'\n\nexport const DrawerScrollViewSetup = () => (\n  <ComponentBox data-visual-test=\"drawer-scroll-view\">\n    {() => {\n      const DrawerMock = () => {\n        const scrollRef = React.useRef(null)\n        const innerRef = React.useRef(null)\n        const [errorMessage, setErrorMessage] = React.useState(null)\n\n        const message = errorMessage\n          ? errorMessage\n          : 'Yes, the \"dnb-scroll-view\" is used!'\n\n        return (\n          <Drawer\n            contentRef={innerRef}\n            scrollRef={scrollRef}\n            onOpen={() => {\n              const innerOverflowY = window.getComputedStyle(\n                innerRef.current\n              ).overflowY\n\n              const contentElem = scrollRef.current.querySelector(\n                '.dnb-drawer__content'\n              )\n              const contentOverflowY =\n                window.getComputedStyle(contentElem)?.overflowY\n\n              const scxrollOverflowY = window.getComputedStyle(\n                scrollRef.current\n              ).overflowY\n\n              if (contentOverflowY !== 'visible') {\n                setErrorMessage(\n                  '.dnb-drawer__content was \"' +\n                    contentOverflowY +\n                    '\" and not \"visible\"'\n                )\n              } else if (innerOverflowY !== 'visible') {\n                setErrorMessage(\n                  '.dnb-drawer__inner was \"' +\n                    innerOverflowY +\n                    '\" and not \"visible\"'\n                )\n              } else if (scxrollOverflowY !== 'auto') {\n                setErrorMessage('.dnb-scroll-view was not \"auto\"')\n              }\n            }}\n          >\n            <Drawer.Body>\n              <div style={{ height: '100rem' }}>\n                <div className=\"drawer-scroll-view\">\n                  <P size=\"x-large\">{message}</P>\n                </div>\n              </div>\n            </Drawer.Body>\n          </Drawer>\n        )\n      }\n      return <DrawerMock />\n    }}\n  </ComponentBox>\n)\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {DrawerScrollViewSetup} from 'Docs/uilib/components/drawer/visual-tests/Examples';\nfunction _createMdxContent(props) {\n  return _jsx(DrawerScrollViewSetup, {});\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["DrawerScrollViewSetup","_createMdxContent","props","_jsx","wrapper","MDXLayout","Object","assign","_provideComponents","components","children"],"sourceRoot":""}