"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[4888],{69692:function(e,t,n){n.r(t);var s=n(52322),c=n(45392);function d(e){const t=Object.assign({h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",em:"em",strong:"strong",h3:"h3",p:"p",ul:"ul",li:"li"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{children:"Events"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Events"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"on_pre_change"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," will be called before ",(0,s.jsx)(t.code,{children:"on_change"}),", this way you can return false to prevent selection and to prevent ",(0,s.jsx)(t.code,{children:"on_change"})," execution. Returns the data item ",(0,s.jsx)(t.code,{children:"{ data, attributes }"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"on_change"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," will be called on state changes made by the user. Returns an object with the new selected ",(0,s.jsx)(t.code,{children:"data"})," item ",(0,s.jsx)(t.code,{children:"{ data, event, attributes, value, selected_item }"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"on_select"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," will be called once the user selects an item by a click or keyboard navigation. Returns an object with the new selected ",(0,s.jsx)(t.code,{children:"data"})," item ",(0,s.jsx)(t.code,{children:"{ data, event, attributes, value, active_item, selected_item }"}),". The ",(0,s.jsx)(t.strong,{children:"active_item"})," property is the currently selected item by keyboard navigation"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"on_show"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," will be called once the user presses the drawer-list. Returns the data item ",(0,s.jsx)(t.code,{children:"{ data, attributes }"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"on_hide"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," will be called once the user presses the drawer-list again, or clicks somewhere else. Returns the data item ",(0,s.jsx)(t.code,{children:"{ data, attributes }"}),"."]})]})]})]}),"\n",(0,s.jsxs)(t.h3,{children:["The ",(0,s.jsx)(t.code,{children:"on_change"})," vs ",(0,s.jsx)(t.code,{children:"on_select"})," difference"]}),"\n",(0,s.jsxs)(t.p,{children:["The difference between ",(0,s.jsx)(t.code,{children:"on_change"})," and ",(0,s.jsx)(t.code,{children:"on_select"})," is:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"on_change"})," will be called when the state changes, either with a ",(0,s.jsx)(t.strong,{children:"click"})," or ",(0,s.jsx)(t.strong,{children:"space/enter"})," keypress confirmation."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"on_select"})," differs most when the user is navigating by keyboard. Once the user is pressing e.g. the arrow keys, the selection is changing, but not the state."]}),"\n"]})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,c.ah)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(d,e)})):d(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-fragments-drawer-list-events-mdx-ae1db3a7e5afe1c01fef.js.map