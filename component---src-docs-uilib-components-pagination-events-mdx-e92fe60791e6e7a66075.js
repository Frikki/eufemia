"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[86560],{82626:function(e,n,t){t.r(n);var i=t(52322),s=t(45392);function r(e){const n=Object.assign({h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",em:"em",strong:"strong",p:"p",h3:"h3",pre:"pre",ul:"ul",li:"li"},(0,s.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{children:"Events"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Events"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"on_change"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.em,{children:"(optional)"})," will be called for every page change, regardless if the mode is ",(0,i.jsx)(n.code,{children:'mode="infinity"'})," or not. Returns an object with number of useful properties and methods. See below for more details."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"on_startup"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.em,{children:"(optional)"})," Only on ",(0,i.jsx)(n.strong,{children:"infinity"})," mode. Will be called once the component is ready for interaction. Returns an object with number of useful properties and methods. See below for more details. ",(0,i.jsx)(n.strong,{children:"NB:"})," Will be called again as soon as we reset the content by calling ",(0,i.jsx)(n.code,{children:"resetContent()"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"on_load"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.em,{children:"(optional)"})," Only on ",(0,i.jsx)(n.strong,{children:"infinity"})," mode. Will be called on every page interaction, also on the very first interaction. Returns an object with number of useful properties and methods. See below for more details."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"on_end"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.em,{children:"(optional)"})," Only on ",(0,i.jsx)(n.strong,{children:"infinity"})," mode. Will be called once ",(0,i.jsx)(n.code,{children:"page_count"})," is reached or ",(0,i.jsx)(n.code,{children:"endInfinity"})," was called."]})]})]})]}),"\n",(0,i.jsx)(n.h2,{children:"Returned object"}),"\n",(0,i.jsx)(n.p,{children:"Events have several useful methods to change / manipulate the content."}),"\n",(0,i.jsx)(n.h3,{children:"Pagination mode"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"<Pagination\n  on_change={({ pageNumber, ...methods }) => {\n    // ...\n  }}\n/>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pageNumber"})," the current page number"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setContent"})," use it to add update a page including content: ",(0,i.jsx)(n.code,{children:"setContent(pageNumber, ReactComponent)"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{children:"Infinity mode"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'<Pagination\n  mode="infinity"\n  on_change={({ pageNumber, ...methods }) => {\n    // ...\n  }}\n/>\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pageNumber"})," the current page number"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setContent"})," use it to add update a page including content: ",(0,i.jsx)(n.code,{children:"setContent(pageNumber, ReactComponent, position = 'after')"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"endInfinity"})," use it to tell the infinity pagination to end the infinity scrolling interaction. Use this handler to end the infinity scrolling procedure, in case the page_count is unknown: ",(0,i.jsx)(n.code,{children:"endInfinity(pageNumber)"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"resetContent"})," use it to invalidate all internal pages: ",(0,i.jsx)(n.code,{children:"resetContent()"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"resetInfinity"})," use it to reset the internal pagination states: ",(0,i.jsx)(n.code,{children:"resetInfinity(pageNumber = startup_page)"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"items"})," internal stored pages"]}),"\n"]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(r,e)})):r(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-pagination-events-mdx-e92fe60791e6e7a66075.js.map