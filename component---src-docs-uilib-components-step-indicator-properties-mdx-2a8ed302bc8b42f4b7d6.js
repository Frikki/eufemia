"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[9539],{34287:function(e,t,s){s.r(t);var n=s(52322),r=s(45392);function i(e){const t=Object.assign({h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",em:"em",a:"a",pre:"pre"},(0,r.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{children:"Component Properties"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Properties"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"mode"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(required)"})," defines how the StepIndicator should work. Use ",(0,n.jsx)(t.code,{children:"static"})," for non-interactive steps. Use ",(0,n.jsx)(t.code,{children:"strict"})," for a chronological step order, also, the user can navigate between visited steps. Use ",(0,n.jsx)(t.code,{children:"loose"})," if the user should be able to navigate freely."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"data"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(required)"})," defines the data/steps showing up in a JavaScript Array or JSON format like ",(0,n.jsx)(t.code,{children:"[{title,is_current}]"}),". See parameters and the example above."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"sidebar_id"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(required)"})," a unique string-based ID in order to bind together the main component and the sidebar (",(0,n.jsx)(t.code,{children:"<StepIndicator.Sidebar />"}),"). Both have to get the same ID."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"current_step"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," defines the active number marked step starting by 0. Defaults to ",(0,n.jsx)(t.code,{children:"0"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"hide_numbers"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," define whether to show automatically counted numbers or not. Defaults to ",(0,n.jsx)(t.code,{children:"false"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"no_animation"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," if set to ",(0,n.jsx)(t.code,{children:"true"}),", the height animation on the step items and the drawer button will be omitted. Defaults to ",(0,n.jsx)(t.code,{children:"false"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"on_item_render"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," callback function to manipulate or wrap every item. Has to return a React Node. You receive an object you can use in your custom HOC ",(0,n.jsx)(t.code,{children:"{ StepItem, element, attributes, props, context }"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"/uilib/components/space/properties",children:"Space"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," spacing properties like ",(0,n.jsx)(t.code,{children:"top"})," or ",(0,n.jsx)(t.code,{children:"bottom"})," are supported."]})]})]})]}),"\n",(0,n.jsx)(t.h2,{children:"Steps Parameters"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Parameters"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"title"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(required)"})," the title as a string or React element."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"is_current"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," if set to ",(0,n.jsx)(t.code,{children:"true"}),", this item step will be set as the current current selected step. This can be used instead of ",(0,n.jsx)(t.code,{children:"current_step"})," on the component itself."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"inactive"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," if set to ",(0,n.jsx)(t.code,{children:"true"}),", this item step will be handled as an inactive step and will not be clickable. Defaults to ",(0,n.jsx)(t.code,{children:"false"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"disabled"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," if set to ",(0,n.jsx)(t.code,{children:"true"}),", this item step will be visible as an disabled button and will not be clickable. Defaults to ",(0,n.jsx)(t.code,{children:"false"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"status"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," a status text."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"status_state"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," In case the status state should be ",(0,n.jsx)(t.code,{children:"info"})," or ",(0,n.jsx)(t.code,{children:"error"}),". Defaults to ",(0,n.jsx)(t.code,{children:"warn"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"on_render"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," callback function to manipulate or wrap a certain item. Has to return a React Node."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"on_click"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," event function that gets invoked once the users clicks on the active item."]})]})]})]}),"\n",(0,n.jsx)(t.h2,{children:"Steps example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"const steps = [\n  { title: 'Active' },\n  { title: 'Active and marked as current', is_current: true },\n  { title: 'Not active', inactive: true },\n  { title: 'Disabled', disabled: true },\n  {\n    title: 'Active item with status text',\n    status: 'Status text',\n    status_state: 'warn', // defaults to warning\n  },\n]\n"})})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,r.ah)(),e.components);return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(i,e)})):i(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-step-indicator-properties-mdx-2a8ed302bc8b42f4b7d6.js.map