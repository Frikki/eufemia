{"version":3,"file":"component---src-docs-uilib-components-switch-demos-mdx-05c8a619d30105e2d651.js","mappings":"4NASA,MAAMA,EAAYC,IAChBC,QAAAA,IAAAA,kBAAAA,EAAAA,EAGWC,EAAuB,8DACpC,YADoC,SAEpC,qDAIaC,EAAuB,8DACpC,YADoC,SAEpC,6HASaC,EAA4B,4DACzC,YADyC,SAEzC,+DAIaC,EAAsB,0BACnC,YADmC,SAEnC,sHAQaC,EAAqB,0OAQrBC,EAAwB,oHClDrC,SAASC,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKZ,EAAYG,GAAI,CAC9BQ,SAAU,UACR,MAAMC,EAAAA,EAAAA,KAAKZ,EAAYI,GAAI,CAC7BO,SAAU,qBACR,MAAMC,EAAAA,EAAAA,KAAKpB,EAAsB,CAAC,GAAI,MAAMoB,EAAAA,EAAAA,KAAKZ,EAAYI,GAAI,CACnEO,SAAU,mBACR,MAAMC,EAAAA,EAAAA,KAAKnB,EAAsB,CAAC,GAAI,MAAMmB,EAAAA,EAAAA,KAAKZ,EAAYI,GAAI,CACnEO,SAAU,sCACR,MAAMC,EAAAA,EAAAA,KAAKlB,EAA2B,CAAC,GAAI,MAAMkB,EAAAA,EAAAA,KAAKZ,EAAYI,GAAI,CACxEO,SAAU,uBACR,MAAMC,EAAAA,EAAAA,KAAKjB,EAAqB,CAAC,GAAI,MAAMiB,EAAAA,EAAAA,KAAKZ,EAAYI,GAAI,CAClEO,SAAU,8BACR,MAAMF,EAAAA,EAAAA,MAAMT,EAAYK,EAAG,CAC7BM,SAAU,CAAC,qCAAqCC,EAAAA,EAAAA,KAAKZ,EAAYM,KAAM,CACrEK,SAAU,WACR,2BACF,MAAMC,EAAAA,EAAAA,KAAKhB,EAAoB,CAAC,GAAI,MAAMgB,EAAAA,EAAAA,KAAKZ,EAAYI,GAAI,CACjEO,SAAU,6BACR,MAAMC,EAAAA,EAAAA,KAAKf,EAAuB,CAAC,KAE1C,CAOD,MANA,SAAoBE,QAAY,IAAZA,IAAAA,EAAQ,CAAC,GAC3B,MAAOc,QAASC,GAAab,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOM,GAAYF,EAAAA,EAAAA,KAAKE,EAAWb,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DY,UAAUC,EAAAA,EAAAA,KAAKd,EAAmBC,MAC9BD,EAAkBC,EACzB,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/switch/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/switch/demos.mdx"],"sourcesContent":["/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { Switch, HelpButton } from '@dnb/eufemia/src'\n\nconst onChange = (state) => {\n  console.log('onChangeHandler', state)\n}\n\nexport const SwitchExampleDefault = () => (\n  <ComponentBox data-visual-test=\"switch-default\" scope={{ onChange }}>\n    <Switch label=\"Switch\" on_change={onChange} />\n  </ComponentBox>\n)\n\nexport const SwitchExampleChecked = () => (\n  <ComponentBox data-visual-test=\"switch-checked\" scope={{ onChange }}>\n    <Switch\n      label=\"Label:\"\n      label_position=\"left\"\n      checked\n      on_change={({ checked }) => console.log(checked)}\n    />\n  </ComponentBox>\n)\n\nexport const SwitchExampleErrorMessage = () => (\n  <ComponentBox data-visual-test=\"switch-error\" scope={{ onChange }}>\n    <Switch label=\"Switch\" checked status=\"Error message\" />\n  </ComponentBox>\n)\n\nexport const SwitchExampleSuffix = () => (\n  <ComponentBox scope={{ onChange }}>\n    <Switch\n      label=\"Switch\"\n      checked\n      suffix={<HelpButton title=\"Modal Title\">Modal content</HelpButton>}\n    />\n  </ComponentBox>\n)\n\nexport const SwitchExampleSizes = () => (\n  <ComponentBox data-visual-test=\"switch-sizes\">\n    <Switch size=\"medium\" label=\"Medium\" right=\"large\" checked />\n    <Switch size=\"large\" label=\"Large\" right=\"large\" checked />\n    <Switch size=\"large\" label=\"Large\" />\n  </ComponentBox>\n)\n\nexport const SwitchExampleDisabled = () => (\n  <ComponentBox data-visual-test=\"switch-disabled\">\n    <Switch checked disabled label=\"Disabled\" />\n  </ComponentBox>\n)\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {SwitchExampleDefault, SwitchExampleChecked, SwitchExampleErrorMessage, SwitchExampleSuffix, SwitchExampleSizes, SwitchExampleDisabled} from 'Docs/uilib/components/switch/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Unchecked Switch\"\n    }), \"\\n\", _jsx(SwitchExampleDefault, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Checked Switch\"\n    }), \"\\n\", _jsx(SwitchExampleChecked, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Checked Switch with error message\"\n    }), \"\\n\", _jsx(SwitchExampleErrorMessage, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Switch with suffix\"\n    }), \"\\n\", _jsx(SwitchExampleSuffix, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Switch in different sizes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As for now, there are two sizes. \", _jsx(_components.code, {\n        children: \"medium\"\n      }), \" is the default size.\"]\n    }), \"\\n\", _jsx(SwitchExampleSizes, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Switch in disabled state\"\n    }), \"\\n\", _jsx(SwitchExampleDisabled, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["onChange","state","console","SwitchExampleDefault","SwitchExampleChecked","SwitchExampleErrorMessage","SwitchExampleSuffix","SwitchExampleSizes","SwitchExampleDisabled","_createMdxContent","props","_components","Object","assign","h2","h3","p","code","_provideComponents","components","_jsxs","_Fragment","children","_jsx","wrapper","MDXLayout"],"sourceRoot":""}