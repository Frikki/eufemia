{"version":3,"file":"component---src-docs-uilib-components-tag-visual-tests-clickable-tag-tsx-8c3b14812617f6b00962.js","mappings":"kNAGe,SAASA,IACtB,OACE,gBAAK,mBAAL,gBAAsCC,MAAO,CAAEC,OAAQ,QAAvD,UACE,cACEC,KADF,cAEEC,QAAS,KACPC,QAAAA,IAAAA,cAAAA,KAKT,C,gLCZM,MAAMC,EAAkBC,EAAAA,cAAxB,M,eCwCA,MAAMC,EAAe,CAC1BC,MAD0B,KAE1BC,UAF0B,KAG1BC,SAH0B,KAI1BC,UAJK,GC0CA,MAAMJ,EAAe,CAC1BI,SAD0B,KAE1BC,wBAFK,GAKDC,EAAOC,IAAyC,IAAD,EAEnD,MAAMC,EAAUT,EAAAA,WAAhB,KACMU,EAAkBV,EAAAA,WAAxB,GAGMW,GAAWC,EAAAA,EAAAA,GAAuB,EAAD,EAGrCH,SAHqC,QAAC,EAGtCA,EAHqC,gCAGrCA,EAHqC,IAIrCA,aAJqC,EAIrCA,EAJqC,IAAvC,IAQM,UAAC,EAAD,8GAAN,EAaMI,EAAUjB,GAAhB,EACMkB,IAAN,EACMC,IAAc,IAApB,EACMC,EAAgBF,GAAtB,EACMG,GAAiBC,EAAAA,EAAAA,IAAvB,GACMC,EAAgBC,IAAW,UAAD,IAI9BJ,GAJ8B,uBAK9BD,GALF,sBAOMM,EAAN,EA8BA,OAfA,IACEA,EAAAA,QAAAA,OACAA,EAAAA,KAAAA,IAGF,IACEA,EAAAA,MA6BE,cACEC,MADF,EAEEC,eAFF,EAGEC,MACE,iBACEC,MADF,KAEEC,OAFF,KAGEC,KAHF,OAIEC,MAJF,wCAME,iBACEC,EADF,qCAEE1B,UARJ,gCAUE,iBACE0B,EADF,wBAEE1B,UAFF,4BAGE2B,YAHF,MAIEC,cAJF,QAKEC,eApBV,gBAzBGtB,GAAL,IACEuB,EAAAA,EAAAA,IAAAA,uJAMA,cACEC,QADF,WAEEC,KAFF,QAGEC,cAAerB,EAAW,QAH5B,OAIEZ,UAJF,EAKEkC,SAAUxC,GALZ,EAMED,KANF,EAOES,SAPF,EAQEiC,QACEvB,IAAAA,EACKwB,IAAMC,OAhCIC,EA+Bf1B,OA9BA2B,IALFC,eAF2BA,EAO7B,GALEA,KADF,WACuCA,EAAAA,MAMrCD,EAAAA,IAFiBD,MANUE,CAqCzB5B,OATJ,KADF,GA8CD,EAEDR,EAAAA,MD7JkBC,IAEhB,MAAMC,EAAUT,EAAAA,WAAhB,MAEM,MAAC,EAAD,YAGJI,SAHI,SAKFQ,EAAAA,EAAAA,GAAuBJ,EAAW,EAAeC,aAA3B,EAA2BA,EAA3B,SAA8C,CACtEJ,SAAUI,aAAF,EAAEA,EANZ,WASA,IAAIL,EAAJ,EAEIwC,MAAAA,QAAJ,KACExC,GAAW,eAAuByC,GACzBA,KAIX,MAAM5B,GAAiBC,EAAAA,EAAAA,IAAvB,IACM,SAAC,KAAD,IAGF4B,EAAAA,EAAAA,IAAsB,CAAC,EAH3B,GAKA,OACE,SAAC/C,EAAgBgD,SAAjB,CAA0BC,MAA1B,YACE,kBACE7C,UAAWiB,IAAW,iBAAiB,EADzC,mBAIE,iBAAMjB,UAAN,uBAJF,IAFJ,QCoIF,O","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/tag/visual-tests/clickable-tag.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/tag/TagContext.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/tag/TagGroup.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/tag/Tag.tsx"],"sourcesContent":["import React from 'react'\nimport { Tag } from '@dnb/eufemia/src'\n\nexport default function ClickableTag() {\n  return (\n    <div data-visual-test=\"tag-clickable\" style={{ margin: '2rem' }}>\n      <Tag\n        text=\"Some filter\"\n        onClick={() => {\n          console.log('I was sent!')\n        }}\n      />\n    </div>\n  )\n}\n","import React from 'react'\n\nexport const TagGroupContext = React.createContext(null)\n","import React from 'react'\nimport classnames from 'classnames'\n\n// Components\nimport { createSpacingClasses } from '../space/SpacingHelper'\n\n// Shared\nimport {\n  validateDOMAttributes,\n  extendPropsWithContext,\n} from '../../shared/component-helper'\nimport Context from '../../shared/Context'\nimport type { SpacingProps } from '../../shared/types'\nimport { TagGroupContext } from './TagContext'\nimport type { SkeletonShow } from '../skeleton/Skeleton'\n\nexport interface TagGroupProps {\n  /**\n   * Aria label to describe the tag group\n   * Default: null\n   */\n  label: React.ReactNode\n\n  /**\n   * Custom className on the component root\n   * Default: null\n   */\n  className?: string\n\n  /**\n   * The tags to group.\n   * Default: null\n   */\n  children?: React.ReactNode\n\n  /**\n   * Skeleton should be applied when loading content\n   * Default: false\n   */\n  skeleton?: SkeletonShow\n}\n\nexport const defaultProps = {\n  label: null,\n  className: null,\n  children: null,\n  skeleton: false,\n}\n\nconst TagGroup = (localProps: TagGroupProps & SpacingProps) => {\n  // Every component should have a context\n  const context = React.useContext(Context)\n  // Extract additional props from global context\n  const {\n    label,\n    className,\n    children: childrenProp,\n    ...props\n  } = extendPropsWithContext(localProps, defaultProps, context?.TagGroup, {\n    skeleton: context?.skeleton,\n  })\n\n  let children = childrenProp\n\n  if (Array.isArray(childrenProp)) {\n    children = [...childrenProp].map((child) => {\n      return child\n    })\n  }\n\n  const spacingClasses = createSpacingClasses(props)\n  const {\n    skeleton, // eslint-disable-line\n    ...attributes\n  } = validateDOMAttributes({}, props)\n\n  return (\n    <TagGroupContext.Provider value={props}>\n      <span\n        className={classnames('dnb-tag__group', spacingClasses, className)}\n        {...attributes}\n      >\n        <span className=\"dnb-sr-only\">{label}</span>\n        {children}\n      </span>\n    </TagGroupContext.Provider>\n  )\n}\n\nexport default TagGroup\n","import React from 'react'\nimport classnames from 'classnames'\n\n// Components\nimport IconPrimary from '../icon-primary/IconPrimary'\nimport type { IconIcon } from '../icon/Icon'\nimport Button, { ButtonProps } from '../button/Button'\n\n// Shared\nimport Context from '../../shared/Context'\nimport type { SpacingProps } from '../../shared/types'\nimport type { SkeletonShow } from '../skeleton/Skeleton'\nimport {\n  warn,\n  extendPropsWithContext,\n} from '../../shared/component-helper'\n\n// Internal\nimport TagGroup from './TagGroup'\nimport { TagGroupContext } from './TagContext'\nimport { createSpacingClasses } from '../space/SpacingHelper'\n\nexport interface TagProps {\n  /**\n   * The content of the tag element, can be a string or a React Element.\n   * Default: null\n   */\n  text?: string | React.ReactNode\n\n  /**\n   * Icon displaying on the left side\n   * Default: null\n   */\n  icon?: IconIcon\n\n  /**\n   * If a label is given, typical inside a table or dl (definition list), then you can disable Tag.Group as a dependent of Tag. Use `true` to omit the `Tag group required:` warning.\n   * Default: null\n   */\n  hasLabel?: boolean\n\n  /**\n   * Custom className on the component root\n   * Default: null\n   */\n  className?: string\n\n  /**\n   * Skeleton should be applied when loading content\n   * Default: null\n   */\n  skeleton?: SkeletonShow\n\n  /**\n   * The content of the tag element, can be a string or a React Element. Will be overwritten by text prop\n   * Default: null\n   */\n  children?: string | React.ReactNode // ReactNode allows multiple elements, strings, numbers, fragments, portals...\n\n  /**\n   * Handle the click event on 'tag' element\n   * Default: null\n   */\n  onClick?: React.MouseEventHandler<HTMLButtonElement>\n\n  /**\n   * Handle the delete event on 'tag' element\n   * Default: null\n   */\n  onDelete?: React.MouseEventHandler<HTMLButtonElement>\n\n  /**\n   * Handle the delete event on 'tag' element\n   * Default: null\n   */\n  omitOnKeyUpDeleteEvent?: boolean\n\n  /**\n   * Internal property\n   * Has translation in context\n   */\n  removeIconTitle?: string\n}\n\nexport const defaultProps = {\n  skeleton: null,\n  omitOnKeyUpDeleteEvent: false,\n}\n\nconst Tag = (localProps: TagProps & SpacingProps) => {\n  // Every component should have a context\n  const context = React.useContext(Context)\n  const tagGroupContext = React.useContext(TagGroupContext)\n\n  // Extract additional props from global context\n  const allProps = extendPropsWithContext(\n    localProps,\n    defaultProps,\n    context?.translation?.Tag,\n    context?.Tag,\n    tagGroupContext\n  )\n\n  const {\n    className,\n    skeleton,\n    children,\n    text,\n    hasLabel,\n    onClick,\n    onDelete,\n    omitOnKeyUpDeleteEvent,\n    removeIconTitle, // has a translation in context\n    ...props\n  } = allProps\n\n  const content = text || children\n  const isClickable = !!onClick\n  const isRemovable = !!onDelete && !isClickable\n  const isInteractive = isClickable || isRemovable\n  const spacingClasses = createSpacingClasses(props)\n  const tagClassNames = classnames(\n    'dnb-tag',\n    className,\n    spacingClasses,\n    isInteractive && 'dnb-tag--interactive',\n    isRemovable && 'dnb-tag--removable'\n  )\n  const buttonAttr: typeof props & Pick<ButtonProps, 'element' | 'type'> =\n    props\n\n  const isDeleteKeyboardEvent = (keyboardEvent) => {\n    return (\n      keyboardEvent.key === 'Backspace' || keyboardEvent.key === 'Delete'\n    )\n  }\n\n  const handleKeyUp = (event) => {\n    if (onDelete && isDeleteKeyboardEvent(event)) {\n      onDelete(event)\n    }\n  }\n\n  if (!isInteractive) {\n    buttonAttr.element = 'span'\n    buttonAttr.type = ''\n  }\n\n  if (isRemovable) {\n    buttonAttr.icon = getDeleteIcon()\n  }\n\n  if (!tagGroupContext && !hasLabel) {\n    warn(\n      `Tag group required: A Tag requires a Tag.Group with label description as a parent component. This is to ensure correct semantic and accessibility.`\n    )\n  }\n\n  return (\n    <Button\n      variant=\"unstyled\"\n      size=\"small\"\n      icon_position={isRemovable ? 'right' : 'left'}\n      className={tagClassNames}\n      on_click={onClick || onDelete}\n      text={content}\n      skeleton={skeleton}\n      onKeyUp={\n        isRemovable && !omitOnKeyUpDeleteEvent\n          ? (e) => handleKeyUp(e)\n          : undefined\n      }\n      {...buttonAttr}\n    />\n  )\n\n  function getDeleteIcon() {\n    return (\n      <IconPrimary\n        title={removeIconTitle}\n        inherit_color={false}\n        icon={\n          <svg\n            width=\"16\"\n            height=\"16\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M0 8a8 8 0 1 1 16 0A8 8 0 1 1 0 8Z\"\n              className=\"dnb-icon-close-circle-path\"\n            />\n            <path\n              d=\"m5.5 10.5 5-5m0 5-5-5\"\n              className=\"dnb-icon-close-cross-path\"\n              strokeWidth=\"1.5\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            />\n          </svg>\n        }\n      />\n    )\n  }\n}\n\nTag.Group = TagGroup\n\nexport default Tag\n"],"names":["ClickableTag","style","margin","text","onClick","console","TagGroupContext","React","defaultProps","label","className","children","skeleton","omitOnKeyUpDeleteEvent","Tag","localProps","context","tagGroupContext","allProps","extendPropsWithContext","content","isClickable","isRemovable","isInteractive","spacingClasses","createSpacingClasses","tagClassNames","classnames","buttonAttr","title","inherit_color","icon","width","height","fill","xmlns","d","strokeWidth","strokeLinecap","strokeLinejoin","warn","variant","size","icon_position","on_click","onKeyUp","e","handleKeyUp","event","onDelete","keyboardEvent","Array","child","validateDOMAttributes","Provider","value"],"sourceRoot":""}