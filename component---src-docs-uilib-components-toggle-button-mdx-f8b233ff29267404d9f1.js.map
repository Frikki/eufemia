{"version":3,"file":"component---src-docs-uilib-components-toggle-button-mdx-f8b233ff29267404d9f1.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/toggle-button.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/toggle-button/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/toggle-button/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/toggle-button/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport ToggleButtonInfo from 'Docs/uilib/components/toggle-button/info';\nimport ToggleButtonDemos from 'Docs/uilib/components/toggle-button/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(ToggleButtonInfo, {}), \"\\n\", _jsx(ToggleButtonDemos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { ToggleButton, HelpButton } from '@dnb/eufemia/src'\n\nexport const ToggleButtonUnchecked = () => (\n  <ComponentBox data-visual-test=\"toggle-button-default\">\n    <ToggleButton label=\"Label:\" text=\"Toggle Me\" />\n  </ComponentBox>\n)\n\nexport const ToggleButtonChecked = () => (\n  <ComponentBox data-visual-test=\"toggle-button-checked\">\n    <ToggleButton\n      label=\"Label:\"\n      text=\"Checked ToggleButton\"\n      checked\n      on_change={({ checked }) => {\n        console.log('on_change', checked)\n      }}\n    />\n  </ComponentBox>\n)\n\nexport const ToggleButtonDefault = () => (\n  <ComponentBox data-visual-test=\"toggle-button-group-default\">\n    <ToggleButton.Group\n      label=\"ToggleButton Group:\"\n      value=\"first\"\n      on_change={({ value }) => {\n        console.log('on_change', value)\n      }}\n    >\n      <ToggleButton text=\"First\" value=\"first\" />\n      <ToggleButton text=\"Second\" value=\"second\" />\n      <ToggleButton text=\"Third\" value=\"third\" />\n    </ToggleButton.Group>\n  </ComponentBox>\n)\n\nexport const ToggleButtonMultiselect = () => (\n  <ComponentBox data-visual-test=\"toggle-button-group-multiselect\">\n    <ToggleButton.Group\n      label=\"Multi-select:\"\n      multiselect={true}\n      values={['first', 'third']}\n      on_change={({ values }) => {\n        console.log('on_change', values)\n      }}\n    >\n      <ToggleButton text=\"First\" value=\"first\" />\n      <ToggleButton text=\"Second\" value=\"second\" />\n      <ToggleButton text=\"Third\" value=\"third\" />\n    </ToggleButton.Group>\n  </ComponentBox>\n)\n\nexport const ToggleButtonVertical = () => (\n  <ComponentBox data-visual-test=\"toggle-button-group-vertical\">\n    <ToggleButton.Group\n      label=\"Vertical Group:\"\n      layout_direction=\"column\"\n      multiselect={true}\n      variant=\"checkbox\"\n      on_change={({ values }) => {\n        console.log('on_change', values)\n      }}\n    >\n      <ToggleButton text=\"First\" value=\"first\" />\n      <ToggleButton text=\"Second\" value=\"second\" />\n      <ToggleButton text=\"Third\" value=\"third\" checked />\n    </ToggleButton.Group>\n  </ComponentBox>\n)\n\nexport const ToggleButtonStatus = () => (\n  <ComponentBox>\n    <ToggleButton.Group\n      label=\"ToggleButton Group with status:\"\n      status=\"Error message\"\n      multiselect={true}\n      on_change={({ values }) => {\n        console.log('on_change', values)\n      }}\n    >\n      <ToggleButton text=\"First\" value=\"first\" />\n      <ToggleButton text=\"Second\" value=\"second\" checked />\n      <ToggleButton text=\"Third\" value=\"third\" checked={true} />\n    </ToggleButton.Group>\n  </ComponentBox>\n)\n\nexport const ToggleButtonStatusMessages = () => (\n  <ComponentBox data-visual-test=\"toggle-button-group-status\">\n    <ToggleButton.Group\n      label=\"ToggleButtons with status:\"\n      variant=\"radio\"\n      on_change={({ value }) => {\n        console.log('on_change', value)\n      }}\n    >\n      <ToggleButton text=\"First\" value=\"first\" status=\"error\" />\n      <ToggleButton\n        text=\"Second\"\n        value=\"second\"\n        checked\n        status=\"Error message\"\n      />\n      <ToggleButton\n        text=\"Third\"\n        value=\"third\"\n        status=\"Info message\"\n        status_state=\"info\"\n      />\n    </ToggleButton.Group>\n  </ComponentBox>\n)\n\nexport const ToggleButtonDisabledGroup = () => (\n  <ComponentBox data-visual-test=\"toggle-button-group-disabled\">\n    <ToggleButton.Group\n      label=\"Disabled Group:\"\n      disabled\n      variant=\"checkbox\"\n    >\n      <ToggleButton text=\"First\" value=\"first\" />\n      <ToggleButton text=\"Second\" value=\"second\" />\n      <ToggleButton text=\"Third\" value=\"third\" checked />\n    </ToggleButton.Group>\n  </ComponentBox>\n)\n\nexport const ToggleButtonSuffix = () => (\n  <ComponentBox>\n    <ToggleButton.Group\n      label=\"With suffixes:\"\n      suffix={<HelpButton title=\"Group suffix\">Group suffix</HelpButton>}\n    >\n      <ToggleButton text=\"First\" value=\"first\" />\n      <ToggleButton\n        text=\"Second\"\n        value=\"second\"\n        status=\"Error message\"\n        suffix={\n          <HelpButton title=\"Button suffix\">Button suffix</HelpButton>\n        }\n      />\n      <ToggleButton text=\"Third\" value=\"third\" checked />\n    </ToggleButton.Group>\n  </ComponentBox>\n)\n\nexport const ToggleButtonIconOnly = () => (\n  <ComponentBox>\n    <ToggleButton.Group label=\"Icons only:\">\n      <ToggleButton icon=\"bell\" value=\"first\" checked />\n      <ToggleButton icon=\"loupe\" value=\"second\" />\n      <ToggleButton icon=\"calendar\" value=\"third\" />\n    </ToggleButton.Group>\n  </ComponentBox>\n)\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {ToggleButtonUnchecked, ToggleButtonChecked, ToggleButtonDefault, ToggleButtonMultiselect, ToggleButtonVertical, ToggleButtonStatus, ToggleButtonStatusMessages, ToggleButtonDisabledGroup, ToggleButtonSuffix, ToggleButtonIconOnly} from 'Docs/uilib/components/toggle-button/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Unchecked ToggleButton\"\n    }), \"\\n\", _jsx(ToggleButtonUnchecked, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Checked ToggleButton\"\n    }), \"\\n\", _jsx(ToggleButtonChecked, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Default ToggleButton group\"\n    }), \"\\n\", _jsx(ToggleButtonDefault, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Multi-select ToggleButton group\"\n    }), \"\\n\", _jsx(ToggleButtonMultiselect, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Vertical aligned ToggleButton group with \", _jsx(_components.code, {\n        children: \"checkbox\"\n      }), \" variant and \", _jsx(_components.code, {\n        children: \"multiselect\"\n      })]\n    }), \"\\n\", _jsx(ToggleButtonVertical, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"ToggleButton group as \", _jsx(_components.code, {\n        children: \"multiselect\"\n      }), \" with a status message\"]\n    }), \"\\n\", _jsx(ToggleButtonStatus, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"ToggleButton with status messages and a group variant as \", _jsx(_components.code, {\n        children: \"radio\"\n      })]\n    }), \"\\n\", _jsx(ToggleButtonStatusMessages, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Disabled ToggleButton group\"\n    }), \"\\n\", _jsx(ToggleButtonDisabledGroup, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"ToggleButtons with a suffix\"\n    }), \"\\n\", _jsx(ToggleButtonSuffix, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"ToggleButtons with icons only\"\n    }), \"\\n\", _jsx(ToggleButtonIconOnly, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The ToggleButton component should be used to toggle on or off a limited number of choices.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the React component \", _jsx(_components.code, {\n        children: \"<ToggleButton.Group>\"\n      }), \" to wrap several \", _jsx(_components.code, {\n        children: \"ToggleButton\"\n      }), \". This makes it easier to handle the event \", _jsx(_components.code, {\n        children: \"on_change\"\n      }), \" on a higher level - as well as several other \", _jsx(_components.a, {\n        href: \"/uilib/components/toggle-button/properties\",\n        children: \"context related properties\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default the \", _jsx(_components.code, {\n        children: \"ToggleButton.Group\"\n      }), \" is single-select, like a \", _jsx(_components.a, {\n        href: \"/uilib/components/radio\",\n        children: \"Radio\"\n      }), \" button. But you can easily enable \", _jsx(_components.code, {\n        children: \"multiselect\"\n      }), \" as well.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"How to use\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the ToggleButton in different modes. Either as a stand-alone component or together with the \", _jsx(_components.code, {\n        children: \"ToggleButton.Group\"\n      }), \" context.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Multi select\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If \", _jsx(_components.code, {\n        children: \"multiselect\"\n      }), \" is enabled on the group, several items can be enabled/disabled by the user.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You would have to decide if you want to track the state by yourself by using the \", _jsx(_components.code, {\n        children: \"checked\"\n      }), \" property, or you want just to listen to the internal state with \", _jsx(_components.code, {\n        children: \"on_change(({ values } => console.log(values)))\"\n      }), \". You have then to give every item also a \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" property.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","ToggleButtonInfo","ToggleButtonDemos","wrapper","MDXLayout","Object","assign","_provideComponents","components","ToggleButtonUnchecked","ToggleButtonChecked","ToggleButtonDefault","ToggleButtonMultiselect","ToggleButtonVertical","ToggleButtonStatus","ToggleButtonStatusMessages","ToggleButtonDisabledGroup","ToggleButtonSuffix","ToggleButtonIconOnly","_components","h2","h3","code","p","a","href"],"sourceRoot":""}