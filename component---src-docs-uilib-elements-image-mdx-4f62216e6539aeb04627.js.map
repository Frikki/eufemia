{"version":3,"file":"component---src-docs-uilib-elements-image-mdx-4f62216e6539aeb04627.js","mappings":"uOAUO,MAAMA,EAAoB,6VAqBpBC,EAA4B,wMAiB5BC,EAAsB,iYAsBtBC,EAAuB,gsBClEpC,SAASC,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,KAAM,OACNC,EAAG,IACHC,IAAK,MACLC,GAAI,OACHC,EAAAA,EAAAA,MAAsBV,EAAMW,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKd,EAAYG,GAAI,CAC9BU,SAAU,UACR,MAAMF,EAAAA,EAAAA,MAAMX,EAAYI,EAAG,CAC7BS,SAAU,CAAC,gDAAgDC,EAAAA,EAAAA,KAAKd,EAAYK,KAAM,CAChFQ,SAAU,YACR,wHACF,MAAMF,EAAAA,EAAAA,MAAMX,EAAYI,EAAG,CAC7BS,SAAU,CAAC,8DAAgEC,EAAAA,EAAAA,KAAKd,EAAYK,KAAM,CAChGQ,SAAU,WACR,sBAAsBC,EAAAA,EAAAA,KAAKd,EAAYK,KAAM,CAC/CQ,SAAU,eACR,YAAYC,EAAAA,EAAAA,KAAKd,EAAYK,KAAM,CACrCQ,SAAU,QACR,+CAA+CC,EAAAA,EAAAA,KAAKd,EAAYM,EAAG,CACrES,KAAM,6BACNF,SAAU,aACR,gBACF,MAAMC,EAAAA,EAAAA,KAAKd,EAAYO,IAAK,CAC9BM,UAAUC,EAAAA,EAAAA,KAAKd,EAAYK,KAAM,CAC/BW,UAAW,eACXH,SAAU,mHAEV,MAAMC,EAAAA,EAAAA,KAAKd,EAAYQ,GAAI,CAC7BK,SAAU,wBACR,MAAMC,EAAAA,EAAAA,KAAKpB,EAAmB,CAAC,GAAI,MAAMoB,EAAAA,EAAAA,KAAKd,EAAYQ,GAAI,CAChEK,SAAU,8BACR,MAAMC,EAAAA,EAAAA,KAAKnB,EAA2B,CAAC,GAAI,MAAMmB,EAAAA,EAAAA,KAAKd,EAAYQ,GAAI,CACxEK,SAAU,uBACR,MAAMC,EAAAA,EAAAA,KAAKlB,EAAqB,CAAC,GAAI,MAAMkB,EAAAA,EAAAA,KAAKd,EAAYQ,GAAI,CAClEK,SAAU,gCACR,MAAMC,EAAAA,EAAAA,KAAKjB,EAAsB,CAAC,KAEzC,CAOD,MANA,SAAoBE,QAAY,IAAZA,IAAAA,EAAQ,CAAC,GAC3B,MAAOkB,QAASC,GAAajB,OAAOC,OAAO,CAAC,GAAGO,EAAAA,EAAAA,MAAsBV,EAAMW,YAC3E,OAAOQ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWjB,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1Dc,UAAUC,EAAAA,EAAAA,KAAKhB,EAAmBC,MAC9BD,EAAkBC,EACzB,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/elements/image/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/elements/image.mdx"],"sourcesContent":["/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { Skeleton, ToggleButton, Img } from '@dnb/eufemia/src'\nimport styled from '@emotion/styled'\n\nexport const ImagePlainExample = () => (\n  <ComponentBox data-visual-test=\"image-plain\" hideCode>\n    {() => {\n      const StyledImg = styled(Img)`\n        border-radius: 1rem;\n      `\n      const CustomImage = () => {\n        return (\n          <StyledImg\n            width=\"100\"\n            height=\"100\"\n            alt=\"DNB logo\"\n            src=\"/dnb/android-chrome-192x192.png\"\n          />\n        )\n      }\n      return CustomImage\n    }}\n  </ComponentBox>\n)\n\nexport const ImageInvalidSourceExample = () => (\n  <ComponentBox data-visual-test=\"image-no-source\" hideCode>\n    {() => {\n      const MyImg = Img\n\n      return (\n        <MyImg\n          width=\"100\"\n          height=\"100\"\n          alt=\"Alt text\"\n          src=\"https://invalid\"\n        />\n      )\n    }}\n  </ComponentBox>\n)\n\nexport const ImageCaptionExample = () => (\n  <ComponentBox data-visual-test=\"image-caption\" hideCode>\n    {() => {\n      const StyledImg = styled(Img)`\n        border-radius: 1rem;\n      `\n      const CustomImage = () => {\n        return (\n          <StyledImg\n            width=\"100\"\n            height=\"100\"\n            alt=\"Alt text\"\n            caption=\"Caption text\"\n            src=\"/dnb/android-chrome-192x192.png\"\n          />\n        )\n      }\n      return <CustomImage />\n    }}\n  </ComponentBox>\n)\n\nexport const ImageSkeletonExample = () => (\n  <ComponentBox data-visual-test=\"image-skeleton\">\n    {() => {\n      const StyledImg = styled(Img)`\n        border-radius: 1rem;\n      `\n      const CustomImage = () => {\n        const [state, setState] = React.useState(true)\n        return (\n          <Skeleton show={state}>\n            <StyledImg\n              width=\"100\"\n              height=\"100\"\n              alt=\"DNB logo\"\n              src=\"/dnb/android-chrome-192x192.png\"\n            />\n            <br />\n            <Skeleton.Exclude>\n              <ToggleButton\n                checked={state}\n                on_change={({ checked }) => setState(checked)}\n                top=\"large\"\n              >\n                Toggle\n              </ToggleButton>\n            </Skeleton.Exclude>\n          </Skeleton>\n        )\n      }\n      return <CustomImage />\n    }}\n  </ComponentBox>\n)\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {ImagePlainExample, ImageInvalidSourceExample, ImageCaptionExample, ImageSkeletonExample} from 'Docs/uilib/elements/image/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Image\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The image element associated with the class \", _jsx(_components.code, {\n        children: \"dnb-img\"\n      }), \" does not have much opinionated styling. It exists more to have a future possibility to optimize and add features.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As of now, the React image \\\"element\\\" (Img) does provide a \", _jsx(_components.code, {\n        children: \"figure\"\n      }), \" element with the \", _jsx(_components.code, {\n        children: \"role=\\\"img\\\"\"\n      }), \" and an \", _jsx(_components.code, {\n        children: \"img\"\n      }), \" tag inside. This is mainly to support the \", _jsx(_components.a, {\n        href: \"/uilib/components/skeleton\",\n        children: \"Skeleton\"\n      }), \" provider.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Img } from '@dnb/eufemia'\\n\\nrender(<InlineImg alt=\\\"...\\\" src=\\\"...\\\" width=\\\"100\\\" height=\\\"100\\\" />)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Basic image element\"\n    }), \"\\n\", _jsx(ImagePlainExample, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Image with invalid source\"\n    }), \"\\n\", _jsx(ImageInvalidSourceExample, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Image with caption\"\n    }), \"\\n\", _jsx(ImageCaptionExample, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Image element with skeleton\"\n    }), \"\\n\", _jsx(ImageSkeletonExample, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["ImagePlainExample","ImageInvalidSourceExample","ImageCaptionExample","ImageSkeletonExample","_createMdxContent","props","_components","Object","assign","h1","p","code","a","pre","h2","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","className","wrapper","MDXLayout"],"sourceRoot":""}