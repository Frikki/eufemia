{"version":3,"file":"component---src-docs-uilib-extensions-forms-data-context-provider-demos-mdx-7b48feffdab1ec2f614a.js","mappings":"gbASO,MAAMA,EAA8B,CACzCC,KAAM,SACNC,WAAY,CACVC,eAAgB,CAAEF,KAAM,UACxBG,OAAQ,CAAEH,KAAM,SAAUI,UAAW,GACrCC,OAAQ,CAAEL,KAAM,SAAUM,QAAS,IACnCC,QAAS,CAAEP,KAAM,WACjBQ,MAAO,CAAER,KAAM,UACfS,OAAQ,CACNT,KAAM,SACNC,WAAY,CACVS,WAAY,CAAEV,KAAM,UACpBW,aAAc,CAAEX,KAAM,SAAUM,QAAS,MAG7CM,KAAM,CACJZ,KAAM,QACNa,MAAO,CACLb,KAAM,SACNC,WAAY,CACVa,SAAU,CAAEd,KAAM,UAClBe,WAAY,CAAEf,KAAM,SAAUM,QAAS,QAK/CU,SAAU,CAAC,mBAmBAC,EAAqB,CAChCf,eAAgB,iBAChBC,OAAQ,eACRE,OAAQ,IACRE,SAAS,EACTC,MAAO,WACPC,OAAQ,CACNC,WAAY,cACZC,aAAc,IAEhBC,KAAM,CACJ,CACEE,SAAU,YACVC,WAAY,MAEd,CACED,SAAU,cACVC,WAAY,QAKLG,EAAUA,KACrBC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,MAAA,CACFC,YAAA,IACAC,OAAA,IACAC,MAAA,IACAC,MAAA,IACAR,WACAlB,kBACA2B,SAAA,o8DAmFaC,EAA2BA,KACtCR,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,MAAA,CACFC,YAAA,IACAC,OAAA,IACAC,MAAA,IACAC,MAAA,IACAR,WACAlB,kBACA2B,SAAA,q4DC3KA,SAASE,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBN,EAAMO,YAI/B,OAHKC,GAAUC,EAAqB,YAAY,GAC3CD,GAAkBC,EAAqB,oBAAoB,GAC3DD,GAAmCC,EAAqB,qCAAqC,IAC3FC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBd,SAAU,EAACP,EAAAA,EAAAA,KAAKW,EAAYG,GAAI,CAC9BP,SAAU,UACR,MAAMP,EAAAA,EAAAA,KAAKW,EAAYI,GAAI,CAC7BR,SAAU,6BACR,MAAMP,EAAAA,EAAAA,KAAKkB,EAAkB,CAAC,GAAI,MAAMlB,EAAAA,EAAAA,KAAKW,EAAYI,GAAI,CAC/DR,SAAU,gCACR,MAAMP,EAAAA,EAAAA,KAAKkB,EAAmC,CAAC,KAEvD,CAOA,MANA,SAAoBR,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOM,GAAYvB,EAAAA,EAAAA,KAAKuB,EAAWX,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DH,UAAUP,EAAAA,EAAAA,KAAKS,EAAmBC,MAC9BD,EAAkBC,EAC1B,EAEA,SAASS,EAAqBK,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/DataContext/Provider/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/DataContext/Provider/demos.mdx"],"sourcesContent":["import { JSONSchema7 } from 'json-schema'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport {\n  DataContext,\n  Layout,\n  Field,\n  Value,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport const TestdataSchema: JSONSchema7 = {\n  type: 'object',\n  properties: {\n    requiredString: { type: 'string' },\n    string: { type: 'string', minLength: 3 },\n    number: { type: 'number', minimum: 42 },\n    boolean: { type: 'boolean' },\n    email: { type: 'string' /* , format: 'email'*/ },\n    nested: {\n      type: 'object',\n      properties: {\n        nestedText: { type: 'string' },\n        nestedNumber: { type: 'number', minimum: 50 },\n      },\n    },\n    list: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          itemText: { type: 'string' },\n          itemNumber: { type: 'number', minimum: 50 },\n        },\n      },\n    },\n  },\n  required: ['requiredString'],\n}\n\nexport interface Testdata {\n  requiredString: string\n  string?: string\n  number?: number\n  boolean?: boolean\n  email?: string\n  nested?: {\n    nestedText: string\n    nestedNumber: number\n  }\n  list: Array<{\n    itemText: string\n    itemNumber: number\n  }>\n}\n\nexport const testdata: Testdata = {\n  requiredString: 'This is a text',\n  string: 'String value',\n  number: 123,\n  boolean: true,\n  email: 'm@il.com',\n  nested: {\n    nestedText: 'Nested text',\n    nestedNumber: 42,\n  },\n  list: [\n    {\n      itemText: 'Item text',\n      itemNumber: 1001,\n    },\n    {\n      itemText: 'Item text 2',\n      itemNumber: 1002,\n    },\n  ],\n}\n\nexport const Default = () => {\n  return (\n    <ComponentBox\n      scope={{\n        DataContext,\n        Layout,\n        Field,\n        Value,\n        testdata,\n        TestdataSchema,\n      }}\n    >\n      <DataContext.Provider\n        data={testdata}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n        onSubmitRequest={() => console.log('onSubmitRequest')}\n      >\n        <Layout.Section>\n          <Layout.Card>\n            <Layout.Column divider=\"line\" spacing=\"small\">\n              <Field.String\n                path=\"/requiredString\"\n                label=\"Required string\"\n                required\n              />\n              <Field.String path=\"/hmm\" label=\"Invalid path\" />\n              <Field.String path=\"/string\" label=\"String value\" />\n              <Field.String path=\"/string\" label=\"String value (copy)\" />\n              <Field.Number path=\"/number\" label=\"Number value\" />\n              <Field.String\n                path=\"/number\"\n                label=\"Number with Field.String\"\n              />\n              <Field.Boolean\n                path=\"/boolean\"\n                label=\"Boolean - Checkbox\"\n                variant=\"checkbox\"\n              />\n              <Field.Boolean\n                path=\"/boolean\"\n                label=\"Boolean - Toggle\"\n                variant=\"button\"\n              />\n              <div>\n                <Field.String\n                  path=\"/nested/nestedText\"\n                  label=\"Nested text\"\n                />\n                <Field.Number\n                  path=\"/nested/nestedNumber\"\n                  label=\"Nested number (minimum 50)\"\n                  minimum={50}\n                />\n              </div>\n              <div className=\"hmm\">\n                <Layout.Row>\n                  <Field.String\n                    path=\"/list/0/itemText\"\n                    label=\"Item text\"\n                  />\n                  <Field.Number\n                    path=\"/list/0/itemNumber\"\n                    label=\"Item number\"\n                  />\n                </Layout.Row>\n                <Layout.Row>\n                  <Field.String\n                    path=\"/list/1/itemText\"\n                    label=\"Item text\"\n                  />\n                  <Field.Number\n                    path=\"/list/1/itemNumber\"\n                    label=\"Item number\"\n                  />\n                </Layout.Row>\n              </div>\n              <Layout.ButtonRow>\n                <DataContext.SubmitButton />\n              </Layout.ButtonRow>\n            </Layout.Column>\n          </Layout.Card>\n        </Layout.Section>\n      </DataContext.Provider>\n    </ComponentBox>\n  )\n}\n\nexport const ValidationWithJsonSchema = () => {\n  return (\n    <ComponentBox\n      scope={{\n        DataContext,\n        Layout,\n        Field,\n        Value,\n        testdata,\n        TestdataSchema,\n      }}\n    >\n      <DataContext.Provider\n        data={testdata}\n        schema={TestdataSchema}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n        onSubmitRequest={() => console.log('onSubmitRequest')}\n      >\n        <Layout.Section>\n          <Layout.Card>\n            <Layout.Column divider=\"line\" spacing=\"small\">\n              <Field.String\n                path=\"/requiredString\"\n                label=\"Required string\"\n              />\n              <Field.String path=\"/hmm\" label=\"Invalid path\" />\n              <Field.String path=\"/string\" label=\"String value\" />\n              <Field.String path=\"/string\" label=\"String value (copy)\" />\n              <Field.Number path=\"/number\" label=\"Number value\" />\n              <Field.String\n                path=\"/number\"\n                label=\"Number with Field.String\"\n              />\n              <Field.Boolean\n                path=\"/boolean\"\n                label=\"Boolean - Checkbox\"\n                variant=\"checkbox\"\n              />\n              <Field.Boolean\n                path=\"/boolean\"\n                label=\"Boolean - Toggle\"\n                variant=\"button\"\n              />\n              <div>\n                <Field.String\n                  path=\"/nested/nestedText\"\n                  label=\"Nested text\"\n                />\n                <Field.Number\n                  path=\"/nested/nestedNumber\"\n                  label=\"Nested number\"\n                />\n              </div>\n              <div className=\"hmm\">\n                <Layout.Row>\n                  <Field.String\n                    path=\"/list/0/itemText\"\n                    label=\"Item text\"\n                  />\n                  <Field.Number\n                    path=\"/list/0/itemNumber\"\n                    label=\"Item number\"\n                  />\n                </Layout.Row>\n                <Layout.Row>\n                  <Field.String\n                    path=\"/list/1/itemText\"\n                    label=\"Item text\"\n                  />\n                  <Field.Number\n                    path=\"/list/1/itemNumber\"\n                    label=\"Item number\"\n                  />\n                </Layout.Row>\n              </div>\n              <Layout.ButtonRow>\n                <DataContext.SubmitButton />\n              </Layout.ButtonRow>\n            </Layout.Column>\n          </Layout.Card>\n        </Layout.Section>\n      </DataContext.Provider>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.Default) _missingMdxReference(\"Examples.Default\", true);\n  if (!Examples.ValidationWithJsonSchema) _missingMdxReference(\"Examples.ValidationWithJsonSchema\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Data and callback events\"\n    }), \"\\n\", _jsx(Examples.Default, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Validation with Json Schema\"\n    }), \"\\n\", _jsx(Examples.ValidationWithJsonSchema, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["TestdataSchema","type","properties","requiredString","string","minLength","number","minimum","boolean","email","nested","nestedText","nestedNumber","list","items","itemText","itemNumber","required","testdata","Default","_jsx","ComponentBox","scope","DataContext","Layout","Field","Value","children","ValidationWithJsonSchema","_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error"],"sourceRoot":""}