{"version":3,"file":"component---src-docs-uilib-extensions-forms-demos-mdx-0c7357b2b9ba422ab6f8.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/demos.mdx"],"sourcesContent":["import ComponentBox from '../../../../shared/tags/ComponentBox'\nimport {\n  DataContext,\n  Layout,\n  StepsLayout,\n  Field,\n  Value,\n  Visibility,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport const BaseFieldComponents = () => {\n  return (\n    <ComponentBox\n      scope={{\n        DataContext,\n        Layout,\n        StepsLayout,\n        Field,\n        Value,\n        Visibility,\n      }}\n    >\n      <Field.String\n        label=\"Text field\"\n        value=\"Lorem Ipsum\"\n        onChange={(value) => console.log('onChange', value)}\n      />\n      <Field.Number\n        label=\"Number Field\"\n        value={789}\n        onChange={(value) => console.log('onChange', value)}\n      />\n      <Field.Boolean\n        label=\"Boolean Field\"\n        value={true}\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const FeatureFields = () => {\n  return (\n    <ComponentBox\n      scope={{\n        DataContext,\n        Layout,\n        StepsLayout,\n        Field,\n        Value,\n        Visibility,\n      }}\n    >\n      <Field.FirstName value=\"John\" />\n      <Field.LastName value=\"Smith\" />\n      <Field.NationalIdentityNumber value=\"20058512345\" />\n      <Field.Email value=\"john@smith.email\" />\n      <Field.PhoneNumber value=\"+47 98765432\" />\n    </ComponentBox>\n  )\n}\n\nexport const LayoutComponents = () => {\n  return (\n    <ComponentBox\n      scope={{\n        DataContext,\n        Layout,\n        StepsLayout,\n        Field,\n        Value,\n        Visibility,\n      }}\n    >\n      <Layout.Section>\n        <Layout.MainHeading>Profile</Layout.MainHeading>\n\n        <Layout.Card stack>\n          <Layout.SubHeading>Name</Layout.SubHeading>\n\n          <Field.FirstName value=\"John\" />\n          <Field.LastName value=\"Smith\" />\n        </Layout.Card>\n\n        <Layout.Card stack>\n          <Layout.SubHeading>More information</Layout.SubHeading>\n\n          <Field.NationalIdentityNumber value=\"20058512345\" />\n          <Field.Email value=\"john@smith.email\" />\n          <Field.PhoneNumber value=\"+47 98765432\" />\n        </Layout.Card>\n      </Layout.Section>\n    </ComponentBox>\n  )\n}\n\nexport const VisibilityBasedOnData = () => {\n  return (\n    <ComponentBox\n      scope={{\n        DataContext,\n        Layout,\n        StepsLayout,\n        Field,\n        Value,\n        Visibility,\n      }}\n    >\n      <DataContext.Provider\n        data={{\n          firstName: undefined,\n          lastName: 'Smith',\n          advanced: false,\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Layout.Section>\n          <Layout.MainHeading>Profile</Layout.MainHeading>\n\n          <Layout.Card stack>\n            <Layout.SubHeading>Name</Layout.SubHeading>\n\n            <Field.FirstName path=\"/firstName\" />\n            <Field.LastName path=\"/lastName\" />\n          </Layout.Card>\n        </Layout.Section>\n        <Field.Boolean\n          path=\"/advanced\"\n          variant=\"checkbox-button\"\n          label=\"More fields\"\n        />\n        <Visibility pathTrue=\"/advanced\">\n          <Layout.Section>\n            <Layout.Card stack>\n              <Layout.SubHeading>More information</Layout.SubHeading>\n\n              <Field.NationalIdentityNumber value=\"20058512345\" />\n              <Field.Email value=\"john@smith.email\" />\n              <Field.PhoneNumber value=\"+47 98765432\" />\n            </Layout.Card>\n          </Layout.Section>\n        </Visibility>\n      </DataContext.Provider>\n    </ComponentBox>\n  )\n}\n\nexport const UsingDataContextProvider = () => {\n  return (\n    <ComponentBox\n      scope={{\n        DataContext,\n        Layout,\n        StepsLayout,\n        Field,\n        Value,\n        Visibility,\n      }}\n    >\n      <DataContext.Provider\n        data={{\n          firstName: 'John',\n          lastName: 'Smith',\n          ssn: '20058512345',\n          email: 'john@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Layout.MainHeading>Profile</Layout.MainHeading>\n\n        <Layout.Card stack>\n          <Field.FirstName path=\"/firstName\" />\n          <Field.LastName path=\"/lastName\" />\n          <Field.NationalIdentityNumber path=\"/ssn\" />\n          <Field.Email path=\"/email\" />\n          <Field.PhoneNumber path=\"/phone\" />\n\n          <Layout.ButtonRow>\n            <DataContext.SubmitButton />\n          </Layout.ButtonRow>\n        </Layout.Card>\n      </DataContext.Provider>\n    </ComponentBox>\n  )\n}\n\nexport const Validation = () => {\n  return (\n    <ComponentBox\n      scope={{\n        DataContext,\n        Layout,\n        StepsLayout,\n        Field,\n        Value,\n        Visibility,\n      }}\n    >\n      <DataContext.Provider\n        data={{\n          firstName: undefined,\n          lastName: 'Smith',\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Layout.MainHeading>Profile</Layout.MainHeading>\n\n        <Layout.Card stack>\n          <Field.FirstName path=\"/firstName\" required />\n          <Field.LastName path=\"/lastName\" required />\n          <Field.NationalIdentityNumber path=\"/ssn\" validateInitially />\n          <Field.Email path=\"/email\" validateInitially />\n          <Field.PhoneNumber path=\"/phone\" validateInitially />\n        </Layout.Card>\n      </DataContext.Provider>\n    </ComponentBox>\n  )\n}\n\nexport const WithSteps = () => {\n  return (\n    <ComponentBox\n      scope={{\n        DataContext,\n        Layout,\n        StepsLayout,\n        Field,\n        Value,\n        Visibility,\n      }}\n    >\n      <DataContext.Provider\n        data={{\n          firstName: undefined,\n          lastName: 'Smith',\n          advanced: false,\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <StepsLayout>\n          <StepsLayout.Step title=\"Name\">\n            <Layout.MainHeading>Profile</Layout.MainHeading>\n\n            <Layout.Card stack>\n              <Layout.SubHeading>Name</Layout.SubHeading>\n\n              <Field.FirstName path=\"/firstName\" required />\n              <Field.LastName path=\"/lastName\" required />\n            </Layout.Card>\n\n            <Layout.ButtonRow>\n              <StepsLayout.NextButton />\n            </Layout.ButtonRow>\n          </StepsLayout.Step>\n\n          <StepsLayout.Step title=\"More information\">\n            <Layout.MainHeading>Profile</Layout.MainHeading>\n\n            <Layout.Card stack>\n              <Layout.SubHeading>More information</Layout.SubHeading>\n\n              <Field.NationalIdentityNumber path=\"/ssn\" />\n              <Field.Email path=\"/email\" />\n              <Field.PhoneNumber path=\"/phone\" />\n            </Layout.Card>\n\n            <Layout.ButtonRow>\n              <StepsLayout.PreviousButton />\n              <StepsLayout.NextButton />\n            </Layout.ButtonRow>\n          </StepsLayout.Step>\n\n          <StepsLayout.Step title=\"Summary\">\n            <Layout.MainHeading>Profile</Layout.MainHeading>\n\n            <Layout.Card stack>\n              <Layout.FlexContainer direction=\"row\">\n                <Value.FirstName path=\"/firstName\" />\n                <Value.LastName path=\"/lastName\" />\n              </Layout.FlexContainer>\n\n              <Value.NationalIdentityNumber path=\"/ssn\" />\n              <Value.Email path=\"/email\" />\n              <Value.PhoneNumber path=\"/phone\" />\n            </Layout.Card>\n\n            <Layout.ButtonRow>\n              <StepsLayout.PreviousButton />\n              <DataContext.SubmitButton />\n            </Layout.ButtonRow>\n          </StepsLayout.Step>\n        </StepsLayout>\n      </DataContext.Provider>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.BaseFieldComponents) _missingMdxReference(\"Examples.BaseFieldComponents\", true);\n  if (!Examples.FeatureFields) _missingMdxReference(\"Examples.FeatureFields\", true);\n  if (!Examples.LayoutComponents) _missingMdxReference(\"Examples.LayoutComponents\", true);\n  if (!Examples.UsingDataContextProvider) _missingMdxReference(\"Examples.UsingDataContextProvider\", true);\n  if (!Examples.Validation) _missingMdxReference(\"Examples.Validation\", true);\n  if (!Examples.VisibilityBasedOnData) _missingMdxReference(\"Examples.VisibilityBasedOnData\", true);\n  if (!Examples.WithSteps) _missingMdxReference(\"Examples.WithSteps\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Base field components\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Base field components are targeting the data type they produce. They can\\nreceive values and change handlers directly by props.\"\n    }), \"\\n\", _jsx(Examples.BaseFieldComponents, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Feature fields\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Feature fields build on top of base field components and provide standard\\nprops for simplified form implementations.\"\n    }), \"\\n\", _jsx(Examples.FeatureFields, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Layout components\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Wrapping inputs in layout components provide the standard design without\\nthe need for local styles.\"\n    }), \"\\n\", _jsx(Examples.LayoutComponents, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Using DataContextProvider\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Wrapping fields with a DataContextProvider component lets them read and\\nwrite data to one common data set, and have input and output of data in\\none place instead of connecting to every single field component.\"\n    }), \"\\n\", _jsx(Examples.UsingDataContextProvider, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Visibility based on data\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Some fields are displayed when data fill specific requirements.\"\n    }), \"\\n\", _jsx(Examples.VisibilityBasedOnData, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Validation\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here are some examples of validation properties of field components.\"\n    }), \"\\n\", _jsx(Examples.Validation, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With steps\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Some fields are displayed when data fill specific requirements.\"\n    }), \"\\n\", _jsx(Examples.WithSteps, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["BaseFieldComponents","_jsx","ComponentBox","scope","DataContext","Layout","StepsLayout","Field","Value","Visibility","children","FeatureFields","LayoutComponents","VisibilityBasedOnData","UsingDataContextProvider","Validation","WithSteps","_createMdxContent","props","_components","Object","assign","h2","h3","p","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error"],"sourceRoot":""}