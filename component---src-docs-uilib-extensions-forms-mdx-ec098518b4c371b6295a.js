"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[6661,36790,8904],{22754:function(n,e,a){a.r(e);var t=a(52322),o=a(45392),i=a(83792),s=a(31870);function l(n){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.default,{}),"\n",(0,t.jsx)(s.default,{})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(l,n)})):l()}},31870:function(n,e,a){a.r(e),a.d(e,{default:function(){return v}});var t={};a.r(t),a.d(t,{BaseFieldComponents:function(){return c},FeatureFields:function(){return m},LayoutComponents:function(){return y},UsingDataContextProvider:function(){return L},Validation:function(){return g},VisibilityBasedOnData:function(){return f},WithSteps:function(){return b}});var o=a(52322),i=a(45392),s=a(82058),l=a(72210),d=a(21759),u=a(27197),r=a(16240),h=a(75482),p=a(10223);const c=()=>(0,o.jsx)(s.Z,{scope:{DataContext:l.Z,Layout:d.Z,StepsLayout:u.Z,Field:r.Z,Value:h.Z,Visibility:p.Z},children:'\n<Field.String\n  label="Text field"\n  value="Lorem Ipsum"\n  onChange={(value) => console.log(\'onChange\', value)}\n/>\n<Field.Number\n  label="Number Field"\n  value={789}\n  onChange={(value) => console.log(\'onChange\', value)}\n/>\n<Field.Boolean\n  label="Boolean Field"\n  value={true}\n  onChange={(value) => console.log(\'onChange\', value)}\n/>\n\n'}),m=()=>(0,o.jsx)(s.Z,{scope:{DataContext:l.Z,Layout:d.Z,StepsLayout:u.Z,Field:r.Z,Value:h.Z,Visibility:p.Z},children:'\n<Field.FirstName value="John" />\n<Field.LastName value="Smith" />\n<Field.NationalIdentityNumber value="20058512345" />\n<Field.Email value="john@smith.email" />\n<Field.PhoneNumber value="+47 98765432" />\n\n'}),y=()=>(0,o.jsx)(s.Z,{scope:{DataContext:l.Z,Layout:d.Z,StepsLayout:u.Z,Field:r.Z,Value:h.Z,Visibility:p.Z},children:'<Layout.Section>\n  <Layout.MainHeading>Profile</Layout.MainHeading>\n\n  <Layout.Card stack>\n    <Layout.SubHeading>Name</Layout.SubHeading>\n\n    <Field.FirstName value="John" />\n    <Field.LastName value="Smith" />\n  </Layout.Card>\n\n  <Layout.Card stack>\n    <Layout.SubHeading>More information</Layout.SubHeading>\n\n    <Field.NationalIdentityNumber value="20058512345" />\n    <Field.Email value="john@smith.email" />\n    <Field.PhoneNumber value="+47 98765432" />\n  </Layout.Card>\n</Layout.Section>\n'}),f=()=>(0,o.jsx)(s.Z,{scope:{DataContext:l.Z,Layout:d.Z,StepsLayout:u.Z,Field:r.Z,Value:h.Z,Visibility:p.Z},children:'<DataContext.Provider\n  data={{\n    firstName: undefined,\n    lastName: \'Smith\',\n    advanced: false,\n    ssn: \'123\',\n    email: \'@smith.email\',\n    phone: \'+47 98765432\',\n  }}\n  onChange={(data) => console.log(\'onChange\', data)}\n  onPathChange={(path, value) => console.log(\'onPathChange\', path, value)}\n  onSubmit={(data) => console.log(\'onSubmit\', data)}\n>\n  <Layout.Section>\n    <Layout.MainHeading>Profile</Layout.MainHeading>\n\n    <Layout.Card stack>\n      <Layout.SubHeading>Name</Layout.SubHeading>\n\n      <Field.FirstName path="/firstName" />\n      <Field.LastName path="/lastName" />\n    </Layout.Card>\n  </Layout.Section>\n  <Field.Boolean\n    path="/advanced"\n    variant="checkbox-button"\n    label="More fields"\n  />\n  <Visibility pathTrue="/advanced">\n    <Layout.Section>\n      <Layout.Card stack>\n        <Layout.SubHeading>More information</Layout.SubHeading>\n\n        <Field.NationalIdentityNumber value="20058512345" />\n        <Field.Email value="john@smith.email" />\n        <Field.PhoneNumber value="+47 98765432" />\n      </Layout.Card>\n    </Layout.Section>\n  </Visibility>\n</DataContext.Provider>\n'}),L=()=>(0,o.jsx)(s.Z,{scope:{DataContext:l.Z,Layout:d.Z,StepsLayout:u.Z,Field:r.Z,Value:h.Z,Visibility:p.Z},children:"<DataContext.Provider\n  data={{\n    firstName: 'John',\n    lastName: 'Smith',\n    ssn: '20058512345',\n    email: 'john@smith.email',\n    phone: '+47 98765432',\n  }}\n  onChange={(data) => console.log('onChange', data)}\n  onPathChange={(path, value) => console.log('onPathChange', path, value)}\n  onSubmit={(data) => console.log('onSubmit', data)}\n>\n  <Layout.MainHeading>Profile</Layout.MainHeading>\n\n  <Layout.Card stack>\n    <Field.FirstName path=\"/firstName\" />\n    <Field.LastName path=\"/lastName\" />\n    <Field.NationalIdentityNumber path=\"/ssn\" />\n    <Field.Email path=\"/email\" />\n    <Field.PhoneNumber path=\"/phone\" />\n\n    <Layout.ButtonRow>\n      <DataContext.SubmitButton />\n    </Layout.ButtonRow>\n  </Layout.Card>\n</DataContext.Provider>\n"}),g=()=>(0,o.jsx)(s.Z,{scope:{DataContext:l.Z,Layout:d.Z,StepsLayout:u.Z,Field:r.Z,Value:h.Z,Visibility:p.Z},children:"<DataContext.Provider\n  data={{\n    firstName: undefined,\n    lastName: 'Smith',\n    ssn: '123',\n    email: '@smith.email',\n    phone: '+47 98765432',\n  }}\n  onChange={(data) => console.log('onChange', data)}\n  onPathChange={(path, value) => console.log('onPathChange', path, value)}\n  onSubmit={(data) => console.log('onSubmit', data)}\n>\n  <Layout.MainHeading>Profile</Layout.MainHeading>\n\n  <Layout.Card stack>\n    <Field.FirstName path=\"/firstName\" required />\n    <Field.LastName path=\"/lastName\" required />\n    <Field.NationalIdentityNumber path=\"/ssn\" validateInitially />\n    <Field.Email path=\"/email\" validateInitially />\n    <Field.PhoneNumber path=\"/phone\" validateInitially />\n  </Layout.Card>\n</DataContext.Provider>\n"}),b=()=>(0,o.jsx)(s.Z,{scope:{DataContext:l.Z,Layout:d.Z,StepsLayout:u.Z,Field:r.Z,Value:h.Z,Visibility:p.Z},children:'<DataContext.Provider\n  data={{\n    firstName: undefined,\n    lastName: \'Smith\',\n    advanced: false,\n    ssn: \'123\',\n    email: \'@smith.email\',\n    phone: \'+47 98765432\',\n  }}\n  onChange={(data) => console.log(\'onChange\', data)}\n  onPathChange={(path, value) => console.log(\'onPathChange\', path, value)}\n  onSubmit={(data) => console.log(\'onSubmit\', data)}\n>\n  <StepsLayout>\n    <StepsLayout.Step title="Name">\n      <Layout.MainHeading>Profile</Layout.MainHeading>\n\n      <Layout.Card stack>\n        <Layout.SubHeading>Name</Layout.SubHeading>\n\n        <Field.FirstName path="/firstName" required />\n        <Field.LastName path="/lastName" required />\n      </Layout.Card>\n\n      <Layout.ButtonRow>\n        <StepsLayout.NextButton />\n      </Layout.ButtonRow>\n    </StepsLayout.Step>\n\n    <StepsLayout.Step title="More information">\n      <Layout.MainHeading>Profile</Layout.MainHeading>\n\n      <Layout.Card stack>\n        <Layout.SubHeading>More information</Layout.SubHeading>\n\n        <Field.NationalIdentityNumber path="/ssn" />\n        <Field.Email path="/email" />\n        <Field.PhoneNumber path="/phone" />\n      </Layout.Card>\n\n      <Layout.ButtonRow>\n        <StepsLayout.PreviousButton />\n        <StepsLayout.NextButton />\n      </Layout.ButtonRow>\n    </StepsLayout.Step>\n\n    <StepsLayout.Step title="Summary">\n      <Layout.MainHeading>Profile</Layout.MainHeading>\n\n      <Layout.Card stack>\n        <Layout.FlexContainer direction="row">\n          <Value.FirstName path="/firstName" />\n          <Value.LastName path="/lastName" />\n        </Layout.FlexContainer>\n\n        <Value.NationalIdentityNumber path="/ssn" />\n        <Value.Email path="/email" />\n        <Value.PhoneNumber path="/phone" />\n      </Layout.Card>\n\n      <Layout.ButtonRow>\n        <StepsLayout.PreviousButton />\n        <DataContext.SubmitButton />\n      </Layout.ButtonRow>\n    </StepsLayout.Step>\n  </StepsLayout>\n</DataContext.Provider>\n'});function x(n){const e=Object.assign({h2:"h2",h3:"h3",p:"p"},(0,i.ah)(),n.components);return t||C("Examples",!1),c||C("Examples.BaseFieldComponents",!0),m||C("Examples.FeatureFields",!0),y||C("Examples.LayoutComponents",!0),L||C("Examples.UsingDataContextProvider",!0),g||C("Examples.Validation",!0),f||C("Examples.VisibilityBasedOnData",!0),b||C("Examples.WithSteps",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:"Demos"}),"\n",(0,o.jsx)(e.h3,{children:"Base field components"}),"\n",(0,o.jsx)(e.p,{children:"Base field components are targeting the data type they produce. They can\nreceive values and change handlers directly by props."}),"\n",(0,o.jsx)(c,{}),"\n",(0,o.jsx)(e.h3,{children:"Feature fields"}),"\n",(0,o.jsx)(e.p,{children:"Feature fields build on top of base field components and provide standard\nprops for simplified form implementations."}),"\n",(0,o.jsx)(m,{}),"\n",(0,o.jsx)(e.h3,{children:"Layout components"}),"\n",(0,o.jsx)(e.p,{children:"Wrapping inputs in layout components provide the standard design without\nthe need for local styles."}),"\n",(0,o.jsx)(y,{}),"\n",(0,o.jsx)(e.h3,{children:"Using DataContextProvider"}),"\n",(0,o.jsx)(e.p,{children:"Wrapping fields with a DataContextProvider component lets them read and\nwrite data to one common data set, and have input and output of data in\none place instead of connecting to every single field component."}),"\n",(0,o.jsx)(L,{}),"\n",(0,o.jsx)(e.h3,{children:"Visibility based on data"}),"\n",(0,o.jsx)(e.p,{children:"Some fields are displayed when data fill specific requirements."}),"\n",(0,o.jsx)(f,{}),"\n",(0,o.jsx)(e.h3,{children:"Validation"}),"\n",(0,o.jsx)(e.p,{children:"Here are some examples of validation properties of field components."}),"\n",(0,o.jsx)(g,{}),"\n",(0,o.jsx)(e.h3,{children:"With steps"}),"\n",(0,o.jsx)(e.p,{children:"Some fields are displayed when data fill specific requirements."}),"\n",(0,o.jsx)(b,{})]})}var v=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(x,n)})):x(n)};function C(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},83792:function(n,e,a){a.r(e);var t=a(52322),o=a(45392);function i(n){const e=Object.assign({h2:"h2",p:"p",h3:"h3",pre:"pre",code:"code"},(0,o.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:"Description"}),"\n",(0,t.jsx)(e.p,{children:"Reusable components for data input, data display and surrounding layout for simplified user interface creation in React, built on top of base Eufemia components."}),"\n",(0,t.jsx)(e.p,{children:"The goal of the Forms extension is to make it easy to build forms and other data input features in DNB applications built with React."}),"\n",(0,t.jsx)(e.p,{children:"The components constitute flexible building blocks that can be used individually, or together for a more practical data flow. They must also be easy to combine with components from other sources and local functionality in the individual application."}),"\n",(0,t.jsx)(e.h3,{children:"Data driven and loosely coupled"}),"\n",(0,t.jsx)(e.p,{children:"The components in Forms are data-driven. This means that they are built on the premises of the source data."}),"\n",(0,t.jsx)(e.p,{children:'A form in a web application usually consists of two "steps". Data in, preferably from a database or a default data set to be distributed in fields on the screen, and data out, where what the user has typed or selected in the components must be collected in a corresponding data set before it is stored or sent to an API.'}),"\n",(0,t.jsx)(e.h3,{children:"How to use"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:"import '@dnb/eufemia/extensions/forms/style'\nimport {\n  Field,\n  Value,\n  Layout,\n  DataContext,\n  StepsLayout,\n  ...\n} from '@dnb/eufemia/extensions/forms'\n"})})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(i,n)})):i(n)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-mdx-ec098518b4c371b6295a.js.map