"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[51378],{67286:function(e,n,s){s.r(n);var t=s(52322),i=s(45392);function o(e){const n=Object.assign({h1:"h1",h2:"h2",p:"p",code:"code"},(0,i.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{children:"useField"}),"\n",(0,t.jsx)(n.h2,{children:"Description"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"useField"})," hook standardize handling of the value flow for a single field. It holds error state, hides it while the field is in focus, connects to surrounding ",(0,t.jsx)(n.code,{children:"DataContext"})," (if present) and other things that all field components needs to do. By implementing custom field components and passing the received props (extending ",(0,t.jsx)(n.code,{children:"FieldProps"}),") through ",(0,t.jsx)(n.code,{children:"useField"}),", all these features work the same way as other field components, and you only need to implement the specific unique features of that field."]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(o,e)})):o(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-use-field-mdx-a9b59dafe2beb480fe94.js.map