{"version":3,"file":"component---src-docs-uilib-extensions-forms-use-field-mdx-a9b59dafe2beb480fe94.js","mappings":"6KAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKZ,EAAYG,GAAI,CAC9BQ,SAAU,aACR,MAAMC,EAAAA,EAAAA,KAAKZ,EAAYI,GAAI,CAC7BO,SAAU,gBACR,MAAMF,EAAAA,EAAAA,MAAMT,EAAYK,EAAG,CAC7BM,SAAU,CAAC,QAAQC,EAAAA,EAAAA,KAAKZ,EAAYM,KAAM,CACxCK,SAAU,aACR,yJAAyJC,EAAAA,EAAAA,KAAKZ,EAAYM,KAAM,CAClLK,SAAU,gBACR,4JAA4JC,EAAAA,EAAAA,KAAKZ,EAAYM,KAAM,CACrLK,SAAU,eACR,cAAcC,EAAAA,EAAAA,KAAKZ,EAAYM,KAAM,CACvCK,SAAU,aACR,oJAGV,CAOA,UANA,SAAoBZ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOc,QAASC,GAAab,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOM,GAAYF,EAAAA,EAAAA,KAAKE,EAAWb,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DY,UAAUC,EAAAA,EAAAA,KAAKd,EAAmBC,MAC9BD,EAAkBC,EAC1B,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/useField.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"useField\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useField\"\n      }), \" hook standardize handling of the value flow for a single field. It holds error state, hides it while the field is in focus, connects to surrounding \", _jsx(_components.code, {\n        children: \"DataContext\"\n      }), \" (if present) and other things that all field components needs to do. By implementing custom field components and passing the received props (extending \", _jsx(_components.code, {\n        children: \"FieldProps\"\n      }), \") through \", _jsx(_components.code, {\n        children: \"useField\"\n      }), \", all these features work the same way as other field components, and you only need to implement the specific unique features of that field.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","h2","p","code","_provideComponents","components","_jsxs","_Fragment","children","_jsx","wrapper","MDXLayout"],"sourceRoot":""}