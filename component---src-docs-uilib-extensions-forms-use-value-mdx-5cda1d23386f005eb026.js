"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[78902],{31515:function(e,n,s){s.r(n);var t=s(52322),o=s(45392);function a(e){const n=Object.assign({h1:"h1",h2:"h2",p:"p",code:"code"},(0,o.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{children:"useValue"}),"\n",(0,t.jsx)(n.h2,{children:"Description"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"useValue"})," hook standardize handling of the value flow for a single value. It connects to surrounding ",(0,t.jsx)(n.code,{children:"DataContext"})," (if present) and other things that all value components needs to do. By implementing custom value components and passing the received props (extending ",(0,t.jsx)(n.code,{children:"ValueProps"}),") through ",(0,t.jsx)(n.code,{children:"useValue"}),", all these features work the same way as other value components, and you only need to implement the specific unique features of that component."]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(a,e)})):a(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-use-value-mdx-5cda1d23386f005eb026.js.map