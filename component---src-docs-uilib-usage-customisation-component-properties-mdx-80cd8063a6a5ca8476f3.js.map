{"version":3,"file":"component---src-docs-uilib-usage-customisation-component-properties-mdx-80cd8063a6a5ca8476f3.js","mappings":"wOAMO,MAAMA,EAA8B,oNAY9BC,EAAkB,0BAC/B,cAD+B,KAE/B,YAF+B,SAE/B,ugBChBA,SAASC,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,EAAG,IACHC,KAAM,OACNC,GAAI,KACJC,OAAQ,WACPC,EAAAA,EAAAA,MAAsBV,EAAMW,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKd,EAAYG,GAAI,CAC9BU,SAAU,yBACR,MAAMF,EAAAA,EAAAA,MAAMX,EAAYI,EAAG,CAC7BS,SAAU,CAAC,UAAUC,EAAAA,EAAAA,KAAKd,EAAYK,EAAG,CACvCU,KAAM,oBACNF,SAAU,cACR,iBAAiBC,EAAAA,EAAAA,KAAKd,EAAYM,KAAM,CAC1CO,SAAU,eACR,4IAA4IC,EAAAA,EAAAA,KAAKd,EAAYK,EAAG,CAClKU,KAAM,sCACNF,SAAU,sBACR,OACF,MAAMC,EAAAA,EAAAA,KAAKd,EAAYO,GAAI,CAC7BM,SAAU,WACR,MAAMF,EAAAA,EAAAA,MAAMX,EAAYI,EAAG,CAC7BS,SAAU,CAAC,oDAAoDC,EAAAA,EAAAA,KAAKd,EAAYQ,OAAQ,CACtFK,SAAU,cACR,4BAA4BC,EAAAA,EAAAA,KAAKd,EAAYK,EAAG,CAClDU,KAAM,qBACNF,SAAU,sBACR,OACF,MAAMC,EAAAA,EAAAA,KAAKd,EAAYO,GAAI,CAC7BM,SAAU,0BACR,MAAMC,EAAAA,EAAAA,KAAKd,EAAYI,EAAG,CAC5BS,SAAU,iFACR,MAAMC,EAAAA,EAAAA,KAAKlB,EAA6B,CAAC,GAAI,MAAMkB,EAAAA,EAAAA,KAAKd,EAAYO,GAAI,CAC1EM,SAAU,qBACR,MAAMC,EAAAA,EAAAA,KAAKjB,EAAiB,CAAC,KAEpC,CAOD,MANA,SAAoBE,QAAY,IAAZA,IAAAA,EAAQ,CAAC,GAC3B,MAAOiB,QAASC,GAAahB,OAAOC,OAAO,CAAC,GAAGO,EAAAA,EAAAA,MAAsBV,EAAMW,YAC3E,OAAOO,GAAYH,EAAAA,EAAAA,KAAKG,EAAWhB,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1Dc,UAAUC,EAAAA,EAAAA,KAAKhB,EAAmBC,MAC9BD,EAAkBC,EACzB,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/usage/customisation/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/usage/customisation/component-properties.mdx"],"sourcesContent":["import React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { Button, Icon } from '@dnb/eufemia/src'\nimport styled from '@emotion/styled'\nimport { hamburger as hamburgerIcon } from '@dnb/eufemia/src/icons'\n\nexport const LargeButtonsAndIconsExample = () => (\n  <ComponentBox>\n    <Button\n      variant=\"secondary\"\n      text=\"Secondary Button\"\n      icon=\"chevron_right_medium\"\n      size=\"large\"\n    />\n    <Button icon=\"chevron_right\" icon_size=\"medium\" size=\"large\" />\n  </ComponentBox>\n)\n\nexport const ExtendedExample = () => (\n  <ComponentBox scope={{ hamburgerIcon }}>\n    {() => {\n      const Wrapper = styled.div`\n        .dnb-button {\n          --button-width: 4rem;\n          --button-height: 4rem;\n          --button-border-radius: 2rem;\n          svg {\n            color: fuchsia;\n          }\n        }\n      `\n      const myHandler = () => alert('Hello')\n\n      return (\n        <Wrapper>\n          <Button\n            variant=\"secondary\"\n            icon={hamburgerIcon}\n            size=\"default\"\n            on_click={myHandler}\n          />\n          <Button variant=\"secondary\" size=\"default\" on_click={myHandler}>\n            <Icon icon={hamburgerIcon} />\n          </Button>\n        </Wrapper>\n      )\n    }}\n  </ComponentBox>\n)\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {LargeButtonsAndIconsExample, ExtendedExample} from 'Docs/uilib/usage/customisation/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Component Properties\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Every \", _jsx(_components.a, {\n        href: \"/uilib/components\",\n        children: \"Component\"\n      }), \" has its own \", _jsx(_components.code, {\n        children: \"properties\"\n      }), \" to make them work for a variety of cases. You may have a look at the table describing all the possibilities. Check out for example the \", _jsx(_components.a, {\n        href: \"/uilib/components/button/properties\",\n        children: \"Button Properties\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Naming\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Both the properties- and event names should use \", _jsx(_components.strong, {\n        children: \"camelCase\"\n      }), \" to support a universal \", _jsx(_components.a, {\n        href: \"/contribute/naming\",\n        children: \"naming convention\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Large Buttons & Icons\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Below are some examples. You can even modify them right away in the Browser.\"\n    }), \"\\n\", _jsx(LargeButtonsAndIconsExample, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Extended example\"\n    }), \"\\n\", _jsx(ExtendedExample, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["LargeButtonsAndIconsExample","ExtendedExample","_createMdxContent","props","_components","Object","assign","h1","p","a","code","h2","strong","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","wrapper","MDXLayout"],"sourceRoot":""}