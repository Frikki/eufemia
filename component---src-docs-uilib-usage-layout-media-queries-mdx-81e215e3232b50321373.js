"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[6773],{68937:function(e,n,s){s.r(n),s.d(n,{default:function(){return g}});var i=s(52322),r=s(45392),d=s(2784),a=s(92310),t=s(35235),o=s(32831),c=s(67571),l=s(75879);const h={small:{min:0,max:"small"},medium:{min:"small",max:"medium"},large:{min:"medium"}};function u(e){void 0===e&&(e={});const{disabled:n,log:s}=e,i=()=>Object.entries(h).reduce(((e,s)=>{var i;let[d,a]=s;const o=`is${(0,l.Mh)(d)}`;if(n)return e[o]=!1,e;u.current[o]=!1;const c=r({name:o,when:a});return e[o]=(null==c||null===(i=c.mediaQueryList)||void 0===i?void 0:i.matches)||!1,t.current[d]=c,e}),{isSSR:!(0,c.aY)()}),r=e=>{let{when:i,name:r}=e;if(!(0,c.aY)())return;const d=(0,c.eO)({when:i,disabled:n,log:s},a.breakpoints);return{event:(0,c.n8)(d,(e=>{if(!m.current&&e){const n={...u.current,isSSR:x.isSSR};n[r]=e,j(n)}})),mediaQueryList:d}};d.useEffect((()=>{m.current&&!n&&j(i()),m.current=n}),[n]),d.useEffect((()=>p),[]);const a=d.useContext(o.Z),t=d.useRef({}),u=d.useRef({}),m=d.useRef(n),[x,j]=d.useState(i),p=()=>{Object.values(t.current).forEach((e=>(null==e?void 0:e.event)&&e.event()))};return x}var m=s(81858);const x=()=>{const[e,n]=d.useState("undefined"!=typeof window?window.innerWidth:0);return d.useEffect((()=>{const e=()=>{n(window.innerWidth)};return window.addEventListener("resize",e),()=>window.removeEventListener("resize",e)}),[]),{innerWidth:e}},j=()=>(0,i.jsx)(a.Z,{scope:{useMedia:u,useWindowWidth:x},hideCode:!0,noInline:!0,children:"const Playground = () => {\n  const { isSmall, isMedium, isLarge, isSSR } = useMedia()\n  const { innerWidth } = useWindowWidth()\n  return (\n    <Code>\n      <pre>\n        {JSON.stringify(\n          {\n            isSmall,\n            isMedium,\n            isLarge,\n            isSSR,\n            innerWidth,\n          },\n          null,\n          2\n        )}\n      </pre>\n    </Code>\n  )\n}\nrender(<Playground />)\n"}),p=()=>(0,i.jsx)(a.Z,{scope:{MediaQuery:t.Z,useMediaQuery:m.Z},hideCode:!0,noInline:!0,children:"const Playground = () => {\n  const [query, updateQuery] = React.useState({\n    screen: true,\n    not: true,\n    min: 'small',\n    max: 'large',\n  })\n  const match1 = useMediaQuery({\n    matchOnSSR: true,\n    when: query,\n  })\n  const match2 = useMediaQuery({\n    matchOnSSR: true,\n    not: true,\n    when: query,\n  })\n  React.useEffect(() => {\n    console.log('mediaQuery:', match1, match2)\n  }, [match1, match2])\n  return (\n    <>\n      <Button\n        onClick={() => {\n          updateQuery({\n            ...query,\n            screen: !query.screen,\n          })\n        }}\n        right\n      >\n        Switch\n      </Button>\n      <MediaQuery when={query}>\n        <Code>when</Code>\n      </MediaQuery>\n      <MediaQuery not when={query}>\n        <Code>not when</Code>\n      </MediaQuery>\n    </>\n  )\n}\nrender(<Playground />)\n"});function y(e){const n=Object.assign({h1:"h1",p:"p",a:"a",code:"code",h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",strong:"strong",ul:"ul",li:"li",h3:"h3",pre:"pre",h4:"h4"},(0,r.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{children:"Media Queries and Breakpoints"}),"\n",(0,i.jsxs)(n.p,{children:["In order to make it as declarative and easy to handle media queries from JavaScript, you may be interested to ",(0,i.jsx)(n.a,{href:"/uilib/usage/layout/media-queries#mediaquery-component-and-the-usemediaquery-hook",children:"use both"})," the ",(0,i.jsx)(n.code,{children:"MediaQuery"})," React component and the ",(0,i.jsx)(n.code,{children:"useMediaQuery"})," React hook."]}),"\n",(0,i.jsx)(n.h2,{children:"Media Queries Properties Table"}),"\n",(0,i.jsx)(n.p,{children:"UX designers are using a 12 column system during their design processes."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Pixel"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Rem"}),(0,i.jsx)(n.th,{children:"Custom Property"}),(0,i.jsx)(n.th,{children:"Comments"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"640"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"small"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"40em"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--layout-small"})}),(0,i.jsx)(n.td,{children:"4 columns"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"960"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"medium"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"60em"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--layout-medium"})}),(0,i.jsx)(n.td,{children:"6 columns"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1152"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"large"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"72em"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--layout-large"})}),(0,i.jsx)(n.td,{children:"12 columns"})]})]})]}),"\n",(0,i.jsx)(n.h2,{children:"MediaQuery component and React Hooks"}),"\n",(0,i.jsxs)(n.p,{children:["Both the component and the React Hooks uses the JavaScript API ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia",children:"matchMedia"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/uilib/usage/layout/media-queries/#usemedia-hook-usage",children:"useMedia"})," React Hook for screen width only."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/uilib/usage/layout/media-queries/#usemediaquery-hook-usage",children:"useMediaQuery"})," React Hook for all kinds of media queries."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/uilib/usage/layout/media-queries/#mediaquery-component",children:"MediaQuery"})," Component for all kinds of media queries."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{children:"Re-render and performance"}),"\n",(0,i.jsxs)(n.p,{children:["By using ",(0,i.jsx)(n.code,{children:"matchMedia"})," we only render when the requested media query actually changes. So we do not need to listen to e.g. ",(0,i.jsx)(n.code,{children:"window.addEventListener('resize', ...)"})," which is a performance waste, even with a debounce helper."]}),"\n",(0,i.jsx)(n.h3,{children:"CSS similarity"}),"\n",(0,i.jsxs)(n.p,{children:["It uses the same query API as CSS uses. You are able to provide your query also raw, by using e.g. ",(0,i.jsx)(n.code,{children:'query="(min-width: 60em)"'}),". But your custom queries will quickly grow and mess up your application code unnecessarily."]}),"\n",(0,i.jsx)(n.h3,{children:"Properties"}),"\n",(0,i.jsxs)(n.p,{children:["You can both use ",(0,i.jsx)(n.code,{children:"min"})," and ",(0,i.jsx)(n.code,{children:"max"}),", they are equivalent to ",(0,i.jsx)(n.code,{children:"minWidth"})," and ",(0,i.jsx)(n.code,{children:"maxWidth"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"CamelCase properties will be converted to kebab-case."}),"\n",(0,i.jsx)(n.h3,{children:"SSR"}),"\n",(0,i.jsxs)(n.p,{children:["During a SSR (Server Side Render) we do not have the clients ",(0,i.jsx)(n.code,{children:"window.matchMedia"}),". In order to make the initial render to a positive match, you can set the ",(0,i.jsx)(n.code,{children:"matchOnSSR={true}"})," property."]}),"\n",(0,i.jsx)(n.h3,{children:"Units"}),"\n",(0,i.jsxs)(n.p,{children:["Numeric values will be handled as an ",(0,i.jsx)(n.code,{children:"em"})," unit."]}),"\n",(0,i.jsxs)(n.h3,{children:[(0,i.jsx)(n.code,{children:"useMedia"})," hook usage"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { useMedia } from '@dnb/eufemia/shared'\n\nfunction Component() {\n  const { isSmall, isMedium, isLarge, isSSR } = useMedia()\n\n  return isSmall ? 'true' : 'false'\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To lower the possibility of CLS (Cumulative Layout Shift) on larger screens â€“ you can make use of the ",(0,i.jsx)(n.code,{children:"isSSR"})," property. Try to use it in combination with ",(0,i.jsx)(n.code,{children:"isLarge"}),", because the negative CLS experience is most recoginzeable on larger screens:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { useMedia } from '@dnb/eufemia/shared'\n\nfunction Component() {\n  const { isSmall, isMedium, isLarge, isSSR } = useMedia()\n\n  return isLarge || isSSR ? 'true' : 'false'\n}\n"})}),"\n",(0,i.jsx)(j,{}),"\n",(0,i.jsxs)(n.p,{children:["You can disable the usage of ",(0,i.jsx)(n.code,{children:"window.matchMedia"})," by providing ",(0,i.jsx)(n.code,{children:"useMedia({ disabled: true })"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["You can log the media query by providing ",(0,i.jsx)(n.code,{children:"useMedia({ log: true })"}),"."]}),"\n",(0,i.jsxs)(n.h3,{children:[(0,i.jsx)(n.code,{children:"useMediaQuery"})," hook usage"]}),"\n",(0,i.jsx)(n.p,{children:"This React Hook is a more extended version, where you can define all sorts of Media Queries."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { useMediaQuery } from '@dnb/eufemia/shared'\n// or\nimport useMediaQuery from '@dnb/eufemia/shared/useMediaQuery'\n\nfunction Component() {\n  const match = useMediaQuery({\n    matchOnSSR: true,\n    when: { min: 'medium' },\n  })\n\n  return match ? 'true' : 'false'\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can disable the usage of ",(0,i.jsx)(n.code,{children:"window.matchMedia"})," by providing ",(0,i.jsx)(n.code,{children:"useMedia({ disabled: true })"}),"."]}),"\n",(0,i.jsx)(n.h3,{children:"Live example"}),"\n",(0,i.jsxs)(n.p,{children:["This example uses the ",(0,i.jsx)(n.code,{children:"not"})," property to reverse the behavior."]}),"\n",(0,i.jsx)(p,{}),"\n",(0,i.jsxs)(n.h3,{children:[(0,i.jsx)(n.code,{children:"MediaQuery"})," component"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { MediaQuery } from '@dnb/eufemia/shared'\n// or\nimport MediaQuery from '@dnb/eufemia/shared/MediaQuery'\n"})}),"\n",(0,i.jsx)(n.p,{children:"You have plenty of possibilities to mix and match:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"<MediaQuery when={{ min: 'medium' }}>\n  matches all above medium screens\n</MediaQuery>\n\n<MediaQuery when={{ screen: true, orientation: 'landscape' }}>\n  matches orientation landscape screens\n</MediaQuery>\n\n<MediaQuery not when={{ min: 'large' }}>\n  matches all, but beneath large screens\n</MediaQuery>\n\n<MediaQuery matchOnSSR when={{ min: 'small', max: 'medium' }}>\n  matches small and medium screens and during SSR\n</MediaQuery>\n\n<MediaQuery when={[{ min: 'small', max: 'large' }, { print: true }]}>\n  matches all between small and large screens or all print media\n</MediaQuery>\n\n<MediaQuery when={{ max: '60em' }}>\n  matches screens to a max of 60em\n</MediaQuery>\n\n<MediaQuery query=\"(min-width: 40em) and (max-width: 72em)\">\n  matches screens between 40em and 72em\n</MediaQuery>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You find the ",(0,i.jsx)(n.a,{href:"/uilib/shared/media-query/properties",children:"properties on this page"}),"."]}),"\n",(0,i.jsx)(n.h4,{children:"Interceptor on change listener"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"import { onMediaQueryChange } from '@dnb/eufemia/shared/MediaQuery'\n\nconst remove = onMediaQueryChange({ min: 'medium' }, (match, event) => {\n  // callback\n})\n\n// Will remove the listeners\nremove()\n"})}),"\n",(0,i.jsx)(n.h3,{children:"Use different breakpoints"}),"\n",(0,i.jsx)(n.p,{children:"It is possible to change the used breakpoint types by providing them to the Eufemia Provider."}),"\n",(0,i.jsxs)(n.p,{children:["Both the ",(0,i.jsx)(n.code,{children:"MediaQuery"})," component and the hooks ",(0,i.jsx)(n.code,{children:"useMedia"})," and ",(0,i.jsx)(n.code,{children:"useMediaQuery"})," will merge and use these custom breakpoints."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NB:"})," It should be done only temporary, because DNB should align on one set of breakpoints for best UX and consistency."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"import { Provider } from '@dnb/eufemia/shared'\n...\n<Provider\n  value={{\n    breakpoints: {\n      small: '40em',\n      medium: '60em',\n      large: '72em',\n    },\n  }}\n>\n  <App />\n</Provider>\n"})}),"\n",(0,i.jsx)(n.h3,{children:"Import breakpoints into JavaScript"}),"\n",(0,i.jsx)(n.p,{children:"You get an object with the values and the types as the keys."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { defaultBreakpoints } from '@dnb/eufemia/shared/MediaQueryUtils'\n"})}),"\n",(0,i.jsx)(n.h2,{children:"SASS / SCSS mixins"}),"\n",(0,i.jsx)(n.p,{children:"You can re-use the SASS mixins from Eufemia:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scss",children:"// breakpoints.scss\n@import '@dnb/eufemia/style/core/utilities';\n$layout-small: map-get($breakpoints, 'small');\n$layout-medium: map-get($breakpoints, 'medium');\n$layout-large: map-get($breakpoints, 'large');\n"})}),"\n",(0,i.jsx)(n.p,{children:"or like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scss",children:"@import '@dnb/eufemia/style/core/utilities';\n\n@include allBelow(large) {\n  /* Your CSS */\n}\n\n@include allAbove(small) {\n  /* Your CSS */\n}\n"})}),"\n",(0,i.jsx)(n.h2,{children:"Media Queries Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:"@media screen and (max-width: 40em) {\n  /* small */\n}\n@media screen and (max-width: 60em) {\n  /* medium */\n}\n@media screen and (max-width: 72em) {\n  /* large */\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Based of the findings of ",(0,i.jsx)(n.a,{href:"https://zellwk.com/blog/media-query-units/",children:"this article"})," and ",(0,i.jsx)(n.a,{href:"https://bugs.webkit.org/show_bug.cgi?id=156684",children:"this webkit bug"})," Eufemia recommends to use ",(0,i.jsx)(n.code,{children:"em"})," units for media query usage to meet the best overall browser support. Read ",(0,i.jsx)(n.a,{href:"/uilib/usage/best-practices/for-styling#units",children:"more about units"}),"."]}),"\n",(0,i.jsx)(n.h2,{children:"How to deal with Jest"}),"\n",(0,i.jsxs)(n.p,{children:["You can mock ",(0,i.jsx)(n.code,{children:"window.matchMedia"})," with e.g. ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/jest-matchmedia-mock",children:"jest-matchmedia-mock"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import MatchMediaMock from 'jest-matchmedia-mock'\n\nconst matchMedia = new MatchMediaMock()\n\nit('your test', () => {\n  matchMedia.useMediaQuery('(min-width: 40em) and (max-width: 60em)')\n  ...\n})\n"})})]})}var g=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(y,e)})):y(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-usage-layout-media-queries-mdx-81e215e3232b50321373.js.map