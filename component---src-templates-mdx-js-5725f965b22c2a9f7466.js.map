{"version":3,"sources":["webpack://dnb-design-system-portal/../node_modules/gatsby-plugin-mdx/index.js","webpack://dnb-design-system-portal/../node_modules/gatsby-plugin-mdx/mdx-renderer.js","webpack://dnb-design-system-portal/./src/templates/mdx.js"],"names":["MDXRenderer","require","module","React","mdx","useMDXScope","scope","children","props","mdxScope","End","fullScope","keys","Object","values","key","fn","Tabbar","tags","ContentWrapper","MdxTemplate","this","location","data","body","frontmatter","title","description","fullscreen","showTabs","tableOfContents","site","siteMetadata","mainTitle","mainDescription","href","includes","global","IS_TEST","window","child","pageTitle","pageDescription","Array","isArray","items","name","content","Boolean","pageContext","usePath","fields","slug","MDXProvider","components","propTypes","PropTypes","isRequired"],"mappings":"6HAMA,IAAMA,EAAcC,EAApB,OAEAC,UAAiB,CACfF,YADFE,I,gqFCRA,IAAMC,EAAQF,EAAd,MACQG,EAAQH,EAAhB,WACQI,EAAgBJ,EAAxB,mBAEAC,EAAA,QAAiB,SAAqB,GACpCI,MAGC,EAHDA,MACAC,EAEC,EAFDA,SACGC,EACF,0BACKC,EAAWJ,EAAjB,GAGMK,EAAMP,WAAc,WACxB,MACE,OAAO,KAGT,IAAMQ,EAAS,GAGbR,MAHa,EAIbC,IAJa,GAAf,GAQMQ,EAAOC,YAAb,GACMC,EAASF,OAAS,SAAAG,GAAG,OAAIJ,EAAJ,MAG3B,OAFQ,0CAAR,MAEOK,2BAAP,OACC,CAACT,EAlBJ,IAoBA,OAAOJ,uBAAP,M,kyDCjBF,IAAMc,EAASC,WACTC,EAAiBF,EAAOE,eAETC,E,+VACnB,WAAU,IAAD,IACP,EAaIC,KAAKb,MAZPc,EADF,EACEA,SADF,IAEEC,KAFF,IAGInB,IACEoB,EAJN,EAIMA,KAJN,IAKMC,YAAeC,EALrB,EAKqBA,MAAOC,EAL5B,EAK4BA,YAAaC,EALzC,EAKyCA,WAAYC,EALrD,EAKqDA,SAC/CC,EANN,EAMMA,gBACAvB,EAPN,EAOMA,SAPN,IASIwB,KACEC,aAAuBC,EAV7B,EAUsBP,MAA+BQ,EAVrD,EAUwCP,YAKpCL,EAASa,MAAQb,EAASa,KAAKC,SAAS,sBAC1CC,IAAOC,SAAU,EACK,oBAAXC,SACTA,OAAOD,SAAU,IAIrB,IAOsD,IAE7C,EATHE,EAAQjC,EAAS,IAAM,KACzBkC,EAAYf,EACZgB,EACFf,IAAea,SAAJ,UAAIA,EAAOf,mBAAX,aAAI,EAAoBE,cAAeO,EAWpD,OARKO,IAEDA,EADED,GAASG,MAAMC,QAAQd,aAAd,EAAcA,EAAiBe,OACjC,UAAML,SAAN,UAAMA,EAAOf,mBAAb,aAAM,EAAoBC,MAA1B,wBAAqCI,EAAgBe,MAAM,UAA3D,aAAqC,EAA0BnB,QAE5Dc,SAAA,UAAAA,EAAOf,mBAAP,eAAoBC,QAASO,IAK3C,yBACE,QAAC,IAAD,MACE,qBAAQQ,IACR,gBAAMK,KAAK,cAAcC,QAASL,MAGpC,QAAC,IAAD,CACE3B,IAAI,SACJO,SAAUA,EACVM,WACEoB,QAAQpB,IAAeP,KAAKb,MAAMyC,YAAYrB,YAG/CC,IACC,QAACZ,EAAD,GACEF,IAAI,SACJO,SAAUA,IACLkB,aAAA,EAAAA,EAAOf,cAAe,GAH7B,CAIEyB,QAAS,MAAOV,SAAA,UAAAA,EAAOW,cAAP,eAAeC,OAAQ,QAI3C,QAACjC,EAAD,MACE,QAAC,EAAAkC,YAAD,CAAaC,WAAYpC,MACvB,QAAC,EAAAlB,YAAD,KAAcwB,Y,8BA/DarB,iBAwEzCiB,EAAYmC,UAAY,CACtBjC,SAAUkC,sBACVP,YAAaO,UAAgB,CAC3B5B,WAAY4B,WACXC,WACHlC,KAAMiC,UAAgB,CACpBpD,IAAKoD,UAAgB,CACnBhC,KAAMgC,sBACN/B,YAAa+B,sBACb1B,gBAAiB0B,sBACjBjD,SAAUiD,uBACTC,WACH1B,KAAMyB,UAAgB,CACpBxB,aAAcwB,wBACbC,aACFA","file":"component---src-templates-mdx-js-5725f965b22c2a9f7466.js","sourcesContent":["/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","const React = require(`react`)\nconst { mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  children,\n  ...props\n}) {\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, {...props })\n}\n","/**\n * MDX Template\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { MDXProvider } from '@mdx-js/react'\nimport { MDXRenderer } from 'gatsby-plugin-mdx'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../shared/parts/Layout'\nimport { Helmet as Head } from 'react-helmet'\nimport tags from '../shared/tags'\n\nconst Tabbar = tags.Tabbar\nconst ContentWrapper = Tabbar.ContentWrapper\n\nexport default class MdxTemplate extends React.PureComponent {\n  render() {\n    const {\n      location,\n      data: {\n        mdx: {\n          body,\n          frontmatter: { title, description, fullscreen, showTabs },\n          tableOfContents,\n          children,\n        },\n        site: {\n          siteMetadata: { title: mainTitle, description: mainDescription },\n        },\n      },\n    } = this.props\n\n    if (location.href && location.href.includes('data-visual-test')) {\n      global.IS_TEST = true\n      if (typeof window !== 'undefined') {\n        window.IS_TEST = true\n      }\n    }\n\n    const child = children[1] || null\n    let pageTitle = title\n    let pageDescription =\n      description || child?.frontmatter?.description || mainDescription\n\n    // Extend the title with a sub tab title\n    if (!pageTitle) {\n      if (child && Array.isArray(tableOfContents?.items)) {\n        pageTitle = `${child?.frontmatter?.title} â€“ ${tableOfContents.items[0]?.title}`\n      } else {\n        pageTitle = child?.frontmatter?.title || mainTitle\n      }\n    }\n\n    return (\n      <>\n        <Head>\n          <title>{pageTitle}</title>\n          <meta name=\"description\" content={pageDescription} />\n        </Head>\n\n        <Layout\n          key=\"layout\"\n          location={location}\n          fullscreen={\n            Boolean(fullscreen) || this.props.pageContext.fullscreen\n          }\n        >\n          {showTabs && (\n            <Tabbar\n              key=\"tabbar\"\n              location={location}\n              {...(child?.frontmatter || {})}\n              usePath={'/' + (child?.fields?.slug || '')}\n            />\n          )}\n\n          <ContentWrapper>\n            <MDXProvider components={tags}>\n              <MDXRenderer>{body}</MDXRenderer>\n            </MDXProvider>\n          </ContentWrapper>\n        </Layout>\n      </>\n    )\n  }\n}\n\nMdxTemplate.propTypes = {\n  location: PropTypes.object.isRequired,\n  pageContext: PropTypes.shape({\n    fullscreen: PropTypes.bool,\n  }).isRequired,\n  data: PropTypes.shape({\n    mdx: PropTypes.shape({\n      body: PropTypes.string.isRequired,\n      frontmatter: PropTypes.object.isRequired,\n      tableOfContents: PropTypes.object.isRequired,\n      children: PropTypes.array.isRequired,\n    }).isRequired,\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.object.isRequired,\n    }).isRequired,\n  }).isRequired,\n}\n\nexport const pageQuery = graphql`\n  query MDXQuery($id: String!) {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        description\n        fullscreen\n        showTabs\n      }\n      tableOfContents\n      body\n      children {\n        ... on Mdx {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            menuTitle\n            showTabs\n            tabs {\n              title\n              key\n            }\n            hideTabs {\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}