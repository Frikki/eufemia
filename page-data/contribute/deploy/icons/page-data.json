{"componentChunkName":"component---src-templates-mdx-js","path":"/contribute/deploy/icons/","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"contribute/deploy/icons","frontmatter":{"title":"Icons Library","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null},"tableOfContents":{"items":[{"url":"#icons-library","title":"Icons Library","items":[{"url":"#how-to-sync-new-icons","title":"How to sync new icons?"},{"url":"#how-to-fix-icons","title":"How to fix icons?"},{"url":"#icons-cicd-process-description","title":"Icons CI/CD process description"},{"url":"#access-denied","title":"Access denied"}]}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Icons Library\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Icons Library\"), mdx(\"p\", null, \"Icons are getting added (more or less) automatically by extracting them from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.figma.com/file/2aNwT4Lbyt9hFmDv8k34yN/Eufemia---Icons?node-id=1%3A9\"\n  }, \"Figma Icons Library\"), \".\"), mdx(\"h2\", null, \"How to sync new icons?\"), mdx(\"p\", null, \"To fetch new icons from the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.figma.com/file/2aNwT4Lbyt9hFmDv8k34yN/Eufemia---Icons?node-id=1%3A9\"\n  }, \"Figma Icons Library\"), \" file, you have to:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Re-branch \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main\"), \", and name it \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"icons/{your-branch-name}\"), \" (it needs to include icons in the name):\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"git checkout main && git pull origin main\\n\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"git checkout -b icons/{your-branch-name} && git push -u origin\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"After the CI/CD process has finished it should have made a commit back to the branch including the new optimized icons.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"With that commit, make a PR back to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main\"), \", review, and (squash) merge it.\"))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Notes:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The PR or commit needs a \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/contribute/style-guides/git\"\n  }, \"appropriate title\"), \" e.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"feat(Icons): add [icon names]\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fix(Icon): fix cropped [icon name]\"), \". You can either give the commit a good title during the squash merge of the PR or you may pull and rebase interactive \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git pull && git rebase -i\"), \" or amend.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Depending on the situation, you may have to pull the changes down locally, and run all tests, to eventually \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/contribute/getting-started#running-tests-locally\"\n  }, \"update broken visual snapshots\"), \". But ideally, all of that should be handled during the CI/CD process.\")), mdx(\"h2\", null, \"How to fix icons?\"), mdx(\"p\", null, \"If you need to re-fetch one or several icons that got updated or changed in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.figma.com/file/2aNwT4Lbyt9hFmDv8k34yN/Eufemia---Icons?node-id=1%3A9\"\n  }, \"Figma Icons Library\"), \" you can force the icons to get re-processed before the cache timeout of 30 days:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Find the icon in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"icons-svg.lock\"), \" file and change the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"updated\"), \" field to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Commit the change \\u2013 but ensure the git branch name starts with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"icon/\"), \" (more details above).\")), mdx(\"h2\", null, \"Icons CI/CD process description\"), mdx(\"p\", null, \"This is a description of what happens during adding new icons to the icons library.\"), mdx(\"p\", null, \"Icons are getting added (more or less) automatically by extracting them from Figma. Following is how the process is tied together.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The connection happens on CI.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Checks if a new Figma Icons library version is available.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Download the Figma file (JSON) by a stream basis, and cache that.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Store the new version, in a version file.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Parse the JSON Figma file for valid icon IDs.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For PDF only: unpack the existing zip file with icons.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Checks if an icon file (SVG or PDF) exists in the repo.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If no, download it.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Details about the icon file are getting stored in a \\\"lock\\\" file, so we can compare it next time against.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For PDF only: pack the icon files to a zip (tar) and delete the files.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For SVG only: store a meta data file, so the portal can display more relevant data about the icons.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For SVG only: optimize the SVG file for a lower size.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For SVG only: Create a JSX component.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For SVG only: run integration and visual tests.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Commit the extracted / generated files back to the repo.\")), mdx(\"h2\", null, \"Access denied\"), mdx(\"p\", null, \"If you get an access denied request from the Figma API \\u2013 while streaming down by the GET image endpoint, you may reset the URLs from inside the icons.lock file by running this command: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn figma:reset\"), \" and commit the re-generated files. Image URL's expires after 30 days.\"));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"contribute/deploy","frontmatter":{"menuTitle":null,"title":"Deployment","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"contribute","frontmatter":{"menuTitle":null,"title":"Contribution Guide","description":"Project overview, development guides, conventions etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"d4d3ba59-0a99-5084-af0e-d6e19ab9815d","slug":"contribute/deploy/icons","prev":{"id":"63bf48d6-eaa1-5cc1-a559-dca1abd50376","slug":"uilib/typography","frontmatter":{"title":"Typography","description":"DNB Headings and paragraphs, their properties and styling."}},"next":{"id":"ae832aac-509b-5798-bc6e-46d6d68815b5","slug":"uilib/usage","frontmatter":{"title":"Usage","description":null}}}},"staticQueryHashes":["2315317908","3001504130","573224243"]}