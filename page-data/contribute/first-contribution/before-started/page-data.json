{
    "componentChunkName": "component---src-templates-mdx-js",
    "path": "/contribute/first-contribution/before-started",
    "result": {"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"contribute/first-contribution/before-started","frontmatter":{"title":"Before getting started","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null},"tableOfContents":{"items":[{"url":"#what-you-should-know-before-getting-started","title":"What you should know before getting started","items":[{"url":"#about-technology","title":"About technology"},{"url":"#eufemia-is-a-mono-repository","title":"Eufemia is a Mono Repository","items":[{"url":"#dnb-eufemia","title":"dnb-eufemia"},{"url":"#dnb-design-system-portal","title":"dnb-design-system-portal"},{"url":"#configuration-files","title":"Configuration files"},{"url":"#about-types","title":"About Types","items":[{"url":"#manual-type-definitions","title":"Manual type definitions"},{"url":"#sharing-proptypes-between-components","title":"Sharing PropTypes between components"},{"url":"#shared-properties-docs","title":"Shared Properties docs"},{"url":"#local-development","title":"Local development"}]}]},{"url":"#about-component-structure","title":"About component structure","items":[{"url":"#component-folder","title":"Component folder","items":[{"url":"#modifications","title":"Modifications"}]}]},{"url":"#development-environments","title":"Development environments","items":[{"url":"#storybook-development","title":"Storybook development"},{"url":"#eufemia-portal","title":"Eufemia portal","items":[{"url":"#local-build","title":"Local build"}]},{"url":"#testing","title":"Testing"},{"url":"#run-algolia-search-queries-locally","title":"Run Algolia search queries locally"}]},{"url":"#what-happens-in-the-build-steps","title":"What happens in the build steps","items":[{"url":"#during-prebuild","title":"During prebuild"},{"url":"#during-postbuild","title":"During postbuild"}]}]}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Before getting started\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"What you should know before getting started\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Last updated\"), \": \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"24. November 2021\")), mdx(\"p\", null, \"Before you get started, there are some technical decisions you should know about - as in every project.\"), mdx(\"p\", null, \"Skip to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/contribute/first-contribution/before-started#about-technology\"\n  }, \"About technology\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/contribute/first-contribution/before-started#eufemia-is-a-mono-repository\"\n  }, \"Mono repository\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/contribute/first-contribution/before-started#dnb-eufemia\"\n  }, \"About project structure\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/contribute/first-contribution/before-started#configuration-files\"\n  }, \"About configuration files\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"\"\n  }, \"About types\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/contribute/first-contribution/before-started#about-component-structure\"\n  }, \"About components\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/contribute/first-contribution/before-started#component-folder\"\n  }, \"Component folder\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/contribute/first-contribution/before-started#development-environments\"\n  }, \"Development environments\"))), mdx(\"h2\", null, \"About technology\"), mdx(\"p\", null, \"The library exists of React components. The newer components are written as functional components, with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/hooks-intro.html\"\n  }, \"React hooks\"), \". This was added to React version 16.8 and has become the new standard of React.\"), mdx(\"p\", null, \"Files in the library were first written in JavaScript using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/typechecking-with-proptypes.html\"\n  }, \"PropTypes\"), \" to define component types. For newer components we adopt using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.typescriptlang.org/\"\n  }, \"TypeScript\"), \", substituting the use of PropTypes.\"), mdx(\"p\", null, \"Components are styled using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://medium.com/@andrew_barnes/bem-and-sass-a-perfect-match-5e48d9bc3894\"\n  }, \"nested CSS class selectors\"), \" with SASS (SCSS) and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://getbem.com/naming/\"\n  }, \"BEM\"), \" (Block Element Modifier).\"), mdx(\"h2\", null, \"Eufemia is a Mono Repository\"), mdx(\"p\", null, \"The Eufemia repository is a mono repo consisting of the following workspaces:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"dnb-design-system-portal\"), \": Source code of the portal website - this website.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"dnb-eufemia\"), \": Source code of the npm package - where all the components are located.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"dnb-eufemia-sandbox\"), \": A development sandbox for playing around with components (not deployed, only for development purposes).\")), mdx(\"h3\", null, \"dnb-eufemia\"), mdx(\"p\", null, \"The only folders you should need to know about to add new features are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src/components\"), \": The folder containing all the components, structured in \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/contribute/first-contribution/before-started#component-folder\"\n  }, \"component folders\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src/elements\"), \": The folder containing all elements, one file for each element.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src/extensions\"), \": The folder containing all extensions, also structured in \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/contribute/first-contribution/before-started#component-folder\"\n  }, \"component folders\"), \".\")), mdx(\"h3\", null, \"dnb-design-system-portal\"), mdx(\"p\", null, \"The documentation in markdown is located at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/docs\"), \" and the portal will automatically create pages and menu items based on that current structure.\"), mdx(\"p\", null, \"All you need to do to add a new page is to create a new markdown (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".md\"), \") file within one of the folders. All documentation for components and elements are located at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/docs/uilib\"), \", which corresponds to the URL \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"eufemia.dnb.no/uilib\"\n  }, \"eufemia.dnb.no/uilib\"), \".\"), mdx(\"h3\", null, \"Configuration files\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ncurc.json\"), \" is used to ignore certain dependencies during a dependency update made by \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.npmjs.com/package/npm-check-updates\"\n  }, \"npm-check-updates\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".eslintrc\"), \" is a file with configurations to \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://eslint.org/docs/user-guide/configuring/\"\n  }, \"ESLint\"), \", which is a tool for identifying and reporting on patterns found in ECMAScript/Javascript code, with the goal of making code more consistent and avoiding bugs.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".prettierrc\"), \" is a file with configurations to \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://prettier.io/docs/en/configuration.html\"\n  }, \"Prettier\"), \", which is a codeformatter for multiple languages.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".stylelintrc\"), \" is a file with configurations to \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://stylelint.io/user-guide/configure\"\n  }, \"stylelint\"), \", which is a linter for styling (SCSS/CSS).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"babel.config.js\"), \" configures \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://babeljs.io/docs/en/configuration\"\n  }, \"Babel\"), \", a JavaScript compiler.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jest.config.js\"), \" configures \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://jestjs.io/docs/configuration\"\n  }, \"Jest\"), \", the JavaScript Testing Framework for this project.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jest.config.screenshots.js\"), \" configures \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.npmjs.com/package/jest-screenshot\"\n  }, \"Jest screenshots\"), \", which is related to the screenshot testing.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"tsconfig.json\"), \" is a file with configurations to \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\"\n  }, \"TypeScript\"), \".\")), mdx(\"h3\", null, \"About Types\"), mdx(\"p\", null, \"As of now, the TypeScript types are mainly generated during the package build step on the CI. The two main purposes of delivering TypeScript types are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Inline property documentation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Property validation and type safety\")), mdx(\"p\", null, \"While the documentation, including the property tables, have to be kept in Markdown Tables, they get extracted, parsed, and inserted in the type definition files.\"), mdx(\"h4\", null, \"Manual type definitions\"), mdx(\"p\", null, \"If a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*.d.ts\"), \" file is included in the source code, it will not be overwritten. But the documentation part about property types will still be inserted during the build.\"), mdx(\"h4\", null, \"Sharing PropTypes between components\"), mdx(\"p\", null, \"You can share PropTypes between files. You can either export them explicitly (named export):\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Named Export\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// Make sure you include `*PropType` in the variable name. This also effects references inside a single file.\\nexport const componentPropTypes = {\\n  ...otherPropTypes,\\n  children: PropTypes.node,\\n  property: PropTypes.string,\\n}\\n\")), mdx(\"p\", null, \"and import them in other components by using the spread operator:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { componentPropTypes } from './component'\\n\\nconst Other = () => {}\\n\\nOther.propTypes = {\\n  ...componentPropTypes,\\n  otherProperty: PropTypes.string,\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Default Export\")), mdx(\"p\", null, \"or as a static reference on the component itself (default export):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const Component = () => {}\\nComponent.propTypes = {\\n  children: PropTypes.node,\\n  property: PropTypes.string,\\n}\\n\\nexport default Component\\n\")), mdx(\"p\", null, \"and import them in other components by using the spread operator:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import Component from './component'\\n\\nconst Other = () => {}\\n\\nOther.propTypes = {\\n  ...Component.propTypes,\\n  otherProperty: PropTypes.string,\\n}\\n\")), mdx(\"p\", null, \"There are a couple of components doing so. You may have a look at:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Input\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"InputMasked\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Icon\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"IconPrimary\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Also the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SpacingHelper\"), \" shares \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"spacingPropTypes\"), \" with almost every component\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NB:\"), \" In order to activate the type generation, a component needs to import the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prop-types\"), \" dependency.\"), mdx(\"h4\", null, \"Shared Properties docs\"), mdx(\"p\", null, \"If you have one \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/properties.md\"), \" file, but e.g. two components share most or all of the properties. Like a component and a provider for that component (Accordion and AccordionProvider) \\u2013 then you can define in the markdown table header name both of the components: You can then provide a second table with a more specific table for a second component.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-md\"\n  }, \"#### Properties\\n\\n| Accordion and AccordionProvider Properties  | Description                                                           |\\n| ------------------------------------------- | --------------------------------------------------------------------- |\\n| `id`                                        | _(optional)_ docs.                                                    |\\n| [Space](/uilib/components/space/properties) | _(optional)_ spacing properties like `top` or `bottom` are supported. |\\n\\n| AccordionProvider Properties | Description                    |\\n| ---------------------------- | ------------------------------ |\\n| `expanded_id`                | _(optional)_ expanded_id docs. |\\n\")), mdx(\"h4\", null, \"Local development\"), mdx(\"p\", null, \"You can either run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn build:types\"), \" to generate type for all files, or use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn build:types:dev\"), \" to only build a certain and custom defined amount of files. Have a look at the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const isOfInterest = ...\"), \" part in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"generateTypes.js\"), \".\"), mdx(\"h2\", null, \"About component structure\"), mdx(\"p\", null, \"Eufemia has a couple of common parts, so every component behaves consistent:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/uilib/usage/customisation/localization\"\n  }, \"Locale\"), \" support\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/uilib/usage/customisation/provider\"\n  }, \"Provider\"), \" support for centralized property forwarding\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/uilib/components/space\"\n  }, \"Spacing\"), \" support\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/uilib/components/skeleton\"\n  }, \"Skeleton\"), \" support\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/uilib/components/form-row\"\n  }, \"FormRow\"), \" / \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/uilib/components/form-set\"\n  }, \"FormSet\"), \" / \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/uilib/components/form-label\"\n  }, \"FormLabel\"), \" support if its a form component\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automatic id generation and linking of HTML elements to enhance accessibility\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Handling of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-describedby\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"combineDescribedBy\"), \" etc.\")), mdx(\"p\", null, \"How to add support for every one of these are explained in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/contribute/getting-started#additional-support\"\n  }, \"Additional support - Getting started\"), \".\"), mdx(\"h3\", null, \"Component folder\"), mdx(\"p\", null, \"Every component and extension should have a similar structure, as described here.\"), mdx(\"p\", null, \"As an example, we show the folder structure of component Breadcrumb. You can also check out the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/dnbexperience/eufemia/tree/main/packages/dnb-eufemia/src/components/breadcrumb\"\n  }, \"source on Github\"), \".\"), mdx(InlineImg, {\n    src: \"/images/folder-structure.png\",\n    width: \"360\",\n    caption: \"Folder structure of component Breadcrumb\",\n    alt: \"Folder structure with tests, style, typescript files and index files\",\n    right: true,\n    mdxType: \"InlineImg\"\n  }), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"/__tests__\")), \": Contains the tests (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Breadcrumb.test.tsx\"), \") and screenshot tests (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Breadcrumb.screenshot.test.tsx\"), \") for the component. All screenshots will be placed within the folder \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"__snapshots__\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"/style\")), \": Contains the styling of the component. The file \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"_breadcrumb.scss\"), \" defines all styling using \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://getbem.com/naming/\"\n  }, \"BEM\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dnb-breadcrumb.scss\"), \" contains the component style exports.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Breadcrumb.tsx\")), \" and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"BreadcrumbItem.tsx\")), \": The React components for the Breadcrumb are defined and exported from these files.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"index.js\")), \": Contains component exports.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"style.js\")), \": Contains component style exports.\")), mdx(\"h4\", null, \"Modifications\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adding theming files under a folder \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"style/themes\"), \" will unlock the possibility of having different themes in the future. Check out the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/dnbexperience/eufemia/tree/main/packages/dnb-eufemia/src/components/button/style\"\n  }, \"source for theming in Button\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adding support for \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/Web_Components\"\n  }, \"Web Components\"), \" by including a file \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"web-component.js\"), \" in the folder structure. Check out how this is carried out by Button in the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/dnbexperience/eufemia/blob/main/packages/dnb-eufemia/src/components/button/web-component.js\"\n  }, \"source code\"), \". You also have to add a tag name and register the web component inside the component declaration.\")), mdx(\"h2\", null, \"Development environments\"), mdx(\"p\", null, \"There are a couple of environments for different purposes.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For developing and styling new components, you can run a \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/contribute/first-contribution/before-started#storybook-development\"\n  }, \"storybook development sandbox\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For writing documentation and displaying the components, you can run \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/contribute/first-contribution/before-started#eufemia-portal\"\n  }, \"the portal\"), \" locally.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"After development, you can run \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/contribute/first-contribution/before-started#testing\"\n  }, \"your tests\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If you want to see the local changes of the search results, you can run \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/\"\n  }, \"Algolia search queries locally\"), \".\")), mdx(\"h3\", null, \"Storybook development\"), mdx(\"p\", null, \"The sandbox is made with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://storybook.js.org/\"\n  }, \"Storybook\"), \", a tool for building UI components and pages in isolation.\"), mdx(\"p\", null, \"Run the sandbox locally by running\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"yarn dev\\n\")), mdx(\"p\", null, \"in the root folder. Then you can view the Storybook website by visiting \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://localhost:8002/\"\n  }, \"localhost:8002\"), \".\"), mdx(\"p\", null, \"Add new pages to the storybook by adding a new file under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dnb-eufemia-sandbox/stories/components\"), \" and following the similar structure of the other files.\"), mdx(\"h3\", null, \"Eufemia portal\"), mdx(\"p\", null, \"The portal is currently handled by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.gatsbyjs.com/\"\n  }, \"Gatsby\"), \", a framework for building static websites.\"), mdx(\"p\", null, \"Run the Portal locally\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ yarn start\\n\")), mdx(\"p\", null, \"This will start the Portal. You can view the portal website by visiting \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://localhost:8000/\"\n  }, \"localhost:8000\"), \".\"), mdx(\"p\", null, \"Content changes to both Markdown files and styles (SCSS) and code changes will be reflected immediately.\"), mdx(\"h4\", null, \"Local build\"), mdx(\"p\", null, \"In case you have to create a local static build of the portal website (for various reasons), you can do so by:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# In the `dnb-design-system-portal` directory, run:\\n$ yarn build\\n\")), mdx(\"p\", null, \"The build will be exported to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/public\"), \" directory. You can now also run a local static server to view it at the given port \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://localhost:8000/\"\n  }, \"localhost:8000\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# In the `dnb-design-system-portal` directory, run:\\n$ yarn serve\\n\")), mdx(\"h3\", null, \"Testing\"), mdx(\"p\", null, \"Testing is currently handled by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://jestjs.io/\"\n  }, \"Jest\"), \" and written using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://testing-library.com/\"\n  }, \"Testing Library\"), \".\"), mdx(\"p\", null, \"Run the integration tests with\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"yarn test <file/folder>\\n\")), mdx(\"p\", null, \"Run the screenshot tests (make sure to have a portal running locally) with\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"yarn test:screenshots <file/folder>\\n\")), mdx(\"p\", null, \"Check out the results of the screenshot test with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"open ./packages/dnb-eufemia/jest-screenshot-report/index.html\"), \".\"), mdx(\"h3\", null, \"Run Algolia search queries locally\"), mdx(\"p\", null, \"In order to commit Algolia search queries to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dev_eufemia_docs\"), \" index, you have to:\"), mdx(\"p\", null, \"Create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".env\"), \" file inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dnb-design-system-portal\"), \" with valid:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ALGOLIA_INDEX_NAME=dev_eufemia_docs\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ALGOLIA_APP_ID=SLD6KEYMQ9\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ALGOLIA_API_KEY=secret\"))), mdx(\"h2\", null, \"What happens in the build steps\"), mdx(\"p\", null, \"During the build, a lot of various things will happen. First, a prebuild before the build and afterward a postbuild.\"), mdx(\"h3\", null, \"During prebuild\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ yarn build\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Assets are getting generated\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All index and lib files are getting generated\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All the lib code gets compiled (ECMAScript 6 and ECMAScript 5.1)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All SASS styles are validated and compiled (to support IE)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All bundles get minified\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Icons are getting converted\")), mdx(\"p\", null, \"To use the local build, you can either run the portal, or use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn link\"), \" to link the package with a totally different project.\"), mdx(\"h3\", null, \"During postbuild\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ yarn workspace @dnb/eufemia postbuild:ci\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Assets are getting generated\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All the lib code gets compiled (ECMAScript 6 and ECMAScript 5.1)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"UMD/ESM/ES/CJS bundles are getting generated\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"TypeScript definitions are getting generated\")));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"contribute/first-contribution","frontmatter":{"menuTitle":null,"title":"New contributor","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"contribute","frontmatter":{"menuTitle":null,"title":"Contribution Guide","description":"Project overview, development guides, conventions etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"1d7d34e5-9b85-526f-9714-852ff50af848","slug":"contribute/first-contribution/before-started","prev":{"id":"3f2bbf24-e8fd-5eb5-99ec-77294bd7849b","slug":"quickguide-designer/accessibility/checklist"},"next":{"id":"11ded61a-5d9e-512c-94a5-4be4c3d25941","slug":"quickguide-designer/typography/font-weights"}}},
    "staticQueryHashes": ["2315317908","3001307379","573224243"]}