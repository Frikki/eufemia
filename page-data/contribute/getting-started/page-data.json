{"componentChunkName":"component---src-templates-mdx-js","path":"/contribute/getting-started/","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"contribute/getting-started","frontmatter":{"title":"Getting started","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null},"tableOfContents":{"items":[{"url":"#getting-started","title":"Getting started","items":[{"url":"#1-get-the-repo-on-your-local-computer","title":"1. Get the repo on your local computer"},{"url":"#2-install-the-dependencies","title":"2. Install the dependencies"},{"url":"#3-making-changes","title":"3. Making changes","items":[{"url":"#check-out-a-new-branch","title":"Check out a new branch"},{"url":"#add-changes","title":"Add changes"},{"url":"#styling-css-and-scss-of-components","title":"Styling, CSS and SCSS of components","items":[{"url":"#scss-dependencies","title":"SCSS dependencies"},{"url":"#scss-theming","title":"SCSS Theming"},{"url":"#scss-utilities-and-properties","title":"SCSS utilities and properties"}]},{"url":"#create-a-local-build","title":"Create a local build"},{"url":"#additional-component-support","title":"Additional component support","items":[{"url":"#locale-support","title":"Locale support"},{"url":"#provider-support","title":"Provider support"},{"url":"#formrow-support-with-includevalidprops","title":"FormRow support with includeValidProps"},{"url":"#spacing-support","title":"Spacing support"},{"url":"#skeleton-support","title":"Skeleton support"},{"url":"#typescript-types","title":"TypeScript types"}]},{"url":"#write-documentation","title":"Write documentation"}]},{"url":"#4-make-and-run-tests","title":"4. Make and run tests","items":[{"url":"#running-tests-locally","title":"Running tests locally"},{"url":"#support-scss-snapshot-test","title":"Support SCSS snapshot test"},{"url":"#support-axe-test","title":"Support Axe test"}]},{"url":"#5-optional-update-change-logs","title":"5. (Optional) Update change logs"},{"url":"#6-commit-changes","title":"6. Commit changes"}]}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Getting started\",\n  \"icon\": \"tools\",\n  \"order\": 3\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Getting started\"), mdx(\"p\", null, \"You are now ready to get started. Here you will find a step-by-step guide to making changes in the Eufemia repo.\\nIf you are new to the repository, first check out \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/contribute/first-contribution#what-should-i-know-before-getting-started\"\n  }, \"what I should know before getting started\"), \".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Table of Contents\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#getting-started\"\n  }, \"Getting started\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#1-get-the-repo-on-your-local-computer\"\n  }, \"1. Get the repo on your local computer\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#2-install-the-dependencies\"\n  }, \"2. Install the dependencies\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#3-making-changes\"\n  }, \"3. Making changes\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#check-out-a-new-branch\"\n  }, \"Check out a new branch\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#add-changes\"\n  }, \"Add changes\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#styling-css-and-scss-of-components\"\n  }, \"Styling, CSS and SCSS of components\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#scss-dependencies\"\n  }, \"SCSS dependencies\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#scss-theming\"\n  }, \"SCSS Theming\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#scss-utilities-and-properties\"\n  }, \"SCSS utilities and properties\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#create-a-local-build\"\n  }, \"Create a local build\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#additional-component-support\"\n  }, \"Additional component support\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#locale-support\"\n  }, \"Locale support\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#provider-support\"\n  }, \"Provider support\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#formrow-support-with-includevalidprops\"\n  }, \"FormRow support with \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"includeValidProps\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#spacing-support\"\n  }, \"Spacing support\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#skeleton-support\"\n  }, \"Skeleton support\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#typescript-types\"\n  }, \"TypeScript types\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#write-documentation\"\n  }, \"Write documentation\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#4-make-and-run-tests\"\n  }, \"4. Make and run tests\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#running-tests-locally\"\n  }, \"Running tests locally\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#support-scss-snapshot-test\"\n  }, \"Support SCSS snapshot test\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#support-axe-test\"\n  }, \"Support Axe test\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#5-optional-update-change-logs\"\n  }, \"5. (Optional) Update change logs\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#6-commit-changes\"\n  }, \"6. Commit changes\"))))), mdx(Hr, {\n    top: \"large\",\n    light: true,\n    mdxType: \"Hr\"\n  }), mdx(\"h2\", null, \"1. Get the repo on your local computer\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Clone\"), \" the repo if you have commit access,\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"git clone https://github.com/dnbexperience/eufemia.git\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"or \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Fork\"), \" the repo by clicking \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Fork\"), \" in the top right corner in \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/dnbexperience/eufemia\"\n  }, \"Eufemia on GitHub\"), \".\")), mdx(InlineImg, {\n    src: \"/images/fork-repo.png\",\n    width: \"500\",\n    alt: \"Fork button location on Github\",\n    mdxType: \"InlineImg\"\n  }), mdx(\"h2\", null, \"2. Install the dependencies\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"yarn install\\n\")), mdx(\"h2\", null, \"3. Making changes\"), mdx(\"h3\", null, \"Check out a new branch\"), mdx(\"p\", null, \"Make a new working branch and name it e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fix/my-branch-name\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"feat/my-feature-name\"), \". Check out \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/contribute/style-guides/git\"\n  }, \"Git convention\"), \" for naming.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# Make a Feature branch\\n$ git checkout -b feat/my-feature\\n\")), mdx(\"h3\", null, \"Add changes\"), mdx(\"p\", null, \"Inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./packages/dnb-eufemia\"), \" you will find the directory \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/src/components\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/src/elements\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/src/extensions\"), \". There you can place a new directory with all the necessary sub folders. As a reference, take a look at Component folder section in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/contribute/first-contribution/before-started#component-folder\"\n  }, \"Before getting started\"), \".\"), mdx(\"p\", null, \"Run an environment with either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn dev\"), \" (for Storybook) or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn start\"), \" (for Eufemia Portal). Make sure you follow the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/contribute/style-guides/coding\"\n  }, \"Code guide\"), \" under development.\"), mdx(\"h3\", null, \"Styling, CSS and SCSS of components\"), mdx(\"p\", null, \"Each component has two or three SCSS files.\"), mdx(\"p\", null, \"All layout and position related styles go here:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"./packages/dnb-eufemia/src/components/button/style/_button.scss\"), \" (with leading underscore)\")), mdx(\"h4\", null, \"SCSS dependencies\"), mdx(\"p\", null, \"SCSS file names staring with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dnb-\"), \" are later possible to get imported as self-contained, individual packages:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"./packages/dnb-eufemia/src/components/button/style/dnb-button.scss\"))), mdx(\"p\", null, \"There you can \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@import\"), \" related \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SCSS dependencies\"), \". Like the button component also includes the icon component styles.\"), mdx(\"h4\", null, \"SCSS Theming\"), mdx(\"p\", null, \"Styles that belong to a \\\"theming footprint\\\" \\u2013 like colors or individual variants \\u2013 can be put inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/themes\"), \" directory:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"./packages/dnb-eufemia/src/components/button/style/themes/dnb-button-theme-ui.scss\"))), mdx(\"p\", null, \"Theming file names ending with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-ui\"), \" will during the package release get packed into the global theming package. More details in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/usage/customisation/theming\"\n  }, \"theming section\"), \".\"), mdx(\"h4\", null, \"SCSS utilities and properties\"), mdx(\"p\", null, \"Use the same sass setup as all the other components. You may re-use all the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/helpers/classes\"\n  }, \"helper classes\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"./packages/dnb-eufemia/src/style/core/utilities.scss\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"./packages/dnb-eufemia/src/style/core/properties.scss\"))), mdx(\"h3\", null, \"Create a local build\"), mdx(\"p\", null, \"Next, we need to create a local build (prebuild) by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn build\"), \" again.\"), mdx(\"p\", null, \"Running the build command will walk through all parts and tie together all needed parts (index files of new components) in order to generate valid build bundles.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ yarn build\\n\")), mdx(\"p\", null, \"You find the output in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./packages/dnb-eufemia/build\"), \" folder.\"), mdx(\"h3\", null, \"Additional component support\"), mdx(\"h4\", null, \"Locale support\"), mdx(\"p\", null, \"Put your translation inside: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./packages/dnb-eufemia/src/shared/locales/nb-NO.js\"), \" as well as to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"en-GB.js\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"export default {\\n  'nb-NO': {\\n    MyComponent: {\\n      myString: '...',\\n    },\\n  },\\n}\\n\")), mdx(\"p\", null, \"And use it as so:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { Context } from '../../shared'\\nimport { extendPropsWithContext } from '../../shared/component-helper'\\n\\nimport type { LocaleProps } from '../../shared/types'\\n\\nexport type ComponentProps = {\\n  myParam?: string\\n}\\nexport type ComponentAllProps = ComponentProps &\\n  LocaleProps &\\n  React.HTMLProps<HTMLElement>\\n\\nconst defaultProps = {\\n  myParam: 'value',\\n}\\n\\nfunction MyComponent(props: ComponentAllProps) {\\n  const context = React.useContext(Context)\\n\\n  const { myString } = extendPropsWithContext(\\n    props,\\n    defaultProps,\\n    context.getTranslation(props).MyComponent // details below \\uD83D\\uDC47\\n    // ...\\n  )\\n\\n  // Use myString ...\\n}\\n\")), mdx(\"p\", null, \"The function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getTranslation\"), \" will along with the properties support both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"locale\"), \" and the HTML \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lang\"), \" attribute. This way, these properties can be set by a component basis and a context basis.\"), mdx(\"h4\", null, \"Provider support\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { Context } from '../../shared'\\nimport { extendPropsWithContext } from '../../shared/component-helper'\\n\\nexport type ComponentProps = {\\n  myParam?: string\\n}\\nexport type ComponentAllProps = ComponentProps &\\n  LocaleProps &\\n  React.HTMLProps<HTMLElement>\\n\\nconst defaultProps = {\\n  myParam: 'value',\\n}\\n\\nfunction MyComponent(props: ComponentAllProps) {\\n  const context = React.useContext(Context)\\n\\n  const { myParam, ...rest } = extendPropsWithContext(\\n    props,\\n    defaultProps,\\n    context.MyComponent\\n    // ...\\n  )\\n\\n  // Use myParam and spread the ...rest\\n}\\n\")), mdx(\"h4\", null, \"FormRow support with \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"includeValidProps\")), mdx(\"p\", null, \"Form elements, like input, checkbox, slider etc. do support some \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/form-row\"\n  }, \"FormRow\"), \" properties. In order to support them, you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"includeValidProps\"), \", so only valid properties will effected the component.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { Context } from '../../shared'\\nimport { extendPropsWithContext } from '../../shared/component-helper'\\nimport { includeValidProps } from '../../components/form-row/FormRowHelpers'\\n\\nconst defaultProps = {\\n  myParam: 'value',\\n}\\n\\nfunction MyComponent(props: Types) {\\n  const context = React.useContext(Context)\\n\\n  const { myParam, skeleton, ...rest } = extendPropsWithContext(\\n    props,\\n    defaultProps,\\n    includeValidProps(context?.FormRow)\\n    context.MyComponent,\\n  )\\n\\n  // Use myParam and spread the ...rest\\n}\\n\")), mdx(\"h4\", null, \"Spacing support\"), mdx(\"p\", null, \"It depends from case to case on how you would make \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/space\"\n  }, \"spacing\"), \" support available. But you may always give the developer to send in the spacing properties to the very root element of your component.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { Context } from '../../shared'\\nimport classnames from 'classnames'\\nimport {\\n  validateDOMAttributes,\\n  extendPropsWithContext,\\n} from '../../shared/component-helper'\\nimport { createSpacingClasses } from '../space/SpacingHelper'\\n\\nimport type { SpacingProps } from '../../shared/types'\\n\\nexport type ComponentProps = {\\n  myParam?: string\\n}\\nexport type ComponentAllProps = ComponentProps & SpacingProps\\n\\nconst defaultProps = {\\n  myParam: 'value',\\n}\\n\\nfunction MyComponent(props: ComponentAllProps) {\\n  const context = React.useContext(Context)\\n\\n  const { myParam, className, ...rest } = extendPropsWithContext(\\n    props,\\n    defaultProps\\n    // ...\\n  )\\n\\n  // This helper will remove e.g. all spacing properties so you get only valid HTML attributes\\n  validateDOMAttributes(props, rest)\\n\\n  // This helper will add needed spacing css classes based on the given properties\\n  rest.className = classnames(\\n    'dnb-my-component',\\n    createSpacingClasses(props),\\n    className\\n  )\\n\\n  // Spread the ...rest on your root element\\n}\\n\")), mdx(\"h4\", null, \"Skeleton support\"), mdx(\"p\", null, \"It depends from case to case on how you would make skeleton support available. There are also more info on how to create a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/skeleton#create-custom-skeleton\"\n  }, \"custom skeleton\"), \". But in case your component supports the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"skeleton\"), \" boolean property, then you may ensure it both can be set locally on the component, and it reacts on the global Context.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { Context } from '../../shared'\\nimport { extendPropsWithContext } from '../../shared/component-helper'\\nimport {\\n  skeletonDOMAttributes,\\n  createSkeletonClass,\\n} from '../skeleton/SkeletonHelper'\\n\\nimport type { SkeletonShow } from '../skeleton/Skeleton'\\n\\nexport type ComponentProps = {\\n  /**\\n   * Skeleton should be applied when loading content\\n   * Default: null\\n   */\\n  skeleton?: SkeletonShow\\n}\\nexport type ComponentAllProps = ComponentProps &\\n  React.HTMLProps<HTMLElement>\\n\\nconst defaultProps = {}\\n\\nfunction MyComponent(props: ComponentAllProps) {\\n  const context = React.useContext(Context)\\n\\n  const { skeleton, className, ...rest } = extendPropsWithContext(\\n    props,\\n    defaultProps,\\n    { skeleton: context?.skeleton }\\n    // ...\\n  )\\n\\n  // This helper will add some needed HTML attributes like \\\"disabled\\\", \\\"aria-disabled\\\" and \\\"aria-label\\\"\\n  skeletonDOMAttributes(rest, skeleton, context)\\n\\n  // This helper will add needed skeleton css classes in order to create a custom skeleton\\n  rest.className = createSkeletonClass(\\n    'shape',\\n    skeleton,\\n    context,\\n    className\\n  )\\n\\n  // Use skeleton and spread the ...rest\\n}\\n\")), mdx(\"h4\", null, \"TypeScript types\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React from 'react'\\nimport type { SpacingProps } from '../../shared/types'\\nimport type { ComponentProps } from './my-component/types'\\n\\nexport type * from './new-component/types'\\n\\nexport type ComponentAllProps = ComponentProps &\\n  React.HTMLProps<HTMLElement>\\n\\nfunction MyComponent(props: ComponentAllProps) {}\\n\")), mdx(\"h3\", null, \"Write documentation\"), mdx(\"p\", null, \"All components have their own directory inside:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"./packages/dnb-design-system-portal/src/docs/uilib/...\"))), mdx(\"p\", null, \"You may have a look at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/contribute/style-guides/documentation\"\n  }, \"Documentation guide\"), \" and existing docs in order to get the right structure.\"), mdx(\"h2\", null, \"4. Make and run tests\"), mdx(\"p\", null, \"Make tests for the new component (or for your current issue) and set up screenshot tests from the Eufemia portal. The tests should be located under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__tests__\"), \" in the component folder.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tip 1: Create tests for each \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"prop\"), \" that change your component.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tip 2: Always check and make the tests fail when you are writing tests.\")), mdx(\"p\", null, \"More on testing in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/usage/best-practices/for-testing#testing-frontend-code\"\n  }, \"UI Library\"), \".\"), mdx(\"h3\", null, \"Running tests locally\"), mdx(\"p\", null, \"Run the commands from the repository's root folder. Replace \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"breadcrumb\"), \" with your component's name in the commands.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Run the integration tests:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# Run all tests\\nyarn test\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# Execute the tests on file (git) changes\\nyarn test:watch\\n\\n# Run all tests including the word 'breadcrumb'\\nyarn test breadcrumb\\n\\n# Or be more specific\\nyarn test /breadcrumb.test.tsx\\n\\n# Run several together\\nyarn test breadcrumb avatar button\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Update the changed snapshots:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"yarn test:update\\n\\n# More specific\\nyarn test:update breadcrumb avatar\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Run the visual test against the portal:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# 1. First start the portal\\nyarn start\\n\\n# 2. Then run all screenshot tests including 'breadcrumb' or 'avatar'\\nyarn test:screenshots breadcrumb avatar\\n\")), mdx(\"p\", null, \"You can also create a screenshot report for all components running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn test:screenshots\"), \". Check the result / reports, located in: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"open ./packages/dnb-eufemia/jest-screenshot-report/index.html\")), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Update eventually new or valid PNG snapshots:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# Update all screenshot tests including 'breadcrumb'\\nyarn test:screenshots:update breadcrumb\\n\")), mdx(\"ol\", {\n    \"start\": 5\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"How to deal with failing tests on the CI server?\")), mdx(\"p\", null, \"You may check out the logs for detailed reports.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Failing visual screenshot tests\")), mdx(\"p\", null, \"If visual screenshot tests are failing on the CI, you can scroll all the way to the end of the logs. There you will find a link \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Download the Report\"), \" you can use to download a zip file containing the visual test reports and diffs.\"), mdx(\"h3\", null, \"Support SCSS snapshot test\"), mdx(\"p\", null, \"Add a similar code snippet to your tests for watching changes in the SCSS you just created.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import { loadScss } from '../../../core/jest/jestSetup'\\ndescribe('Breadcrumb scss', () => {\\n  it('have to match snapshot', () => {\\n    const scss = loadScss(require.resolve('../style/dnb-breadcrumb.scss'))\\n    expect(scss).toMatchSnapshot()\\n  })\\n})\\n\")), mdx(\"h3\", null, \"Support Axe test\"), mdx(\"p\", null, \"Add a similar code snippet to your tests (as the last test). It will test the accessibility of your new component. Read more on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/nickcolley/jest-axe\"\n  }, \"Jest Axe\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"describe('Breadcrumb aria', () => {\\n  it('should validate', async () => {\\n    const Component = render(\\n      <Breadcrumb\\n        data={[\\n          { href: '/' },\\n          { href: '/page1', text: 'Page 1' },\\n          { href: '/page1/page2', text: 'Page 2' },\\n        ]}\\n        variant=\\\"collapse\\\"\\n        isCollapsed={false}\\n      />\\n    )\\n    expect(await axeComponent(Component)).toHaveNoViolations()\\n  })\\n})\\n\")), mdx(\"h2\", null, \"5. (Optional) Update change logs\"), mdx(\"p\", null, \"Changes to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@dnb/eufemia\"), \" have to be mentioned by using a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/contribute/style-guides/git/#commit-messages\"\n  }, \"git commit messages decoration\"), \". During the next release, the package \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CHANGELOG.md\"), \" file will be updated and changes will get listed on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/dnbexperience/eufemia/releases\"\n  }, \"GitHub Releases\"), \" page.\"), mdx(\"p\", null, \"General Eufemia \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Design System\"), \" changes have to be written down in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EUFEMIA_CHANGELOG.md\"), \" file, located in the docs. This file should only be updated if there is a change in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@dnb/eufemia\"), \" package, which affects the components, elements or extensions.\"), mdx(\"h2\", null, \"6. Commit changes\"), mdx(\"p\", null, \"Commit your change and create a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Pull Request\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"origin/main\"), \" branch. Check out the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/contribute/style-guides/git\"\n  }, \"Git convention\"), \" for how to commit and make \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Pull Request\"), \".\"), mdx(\"p\", null, \"From a Fork:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make your changes in your Fork and create a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Pull Request\"), \" back to the Eufemia repo and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"origin/main\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Watch the result of the tests.\")), mdx(\"p\", null, \"From a clone:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make your changes and commit it to the repo in a new branch.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Pull Request\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"origin/main\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Watch the result of the tests.\")));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"contribute","frontmatter":{"menuTitle":null,"title":"Contribution Guide","description":"Project overview, development guides, conventions etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"372440b8-e594-5eab-a892-432f8ceb5acd","slug":"contribute/getting-started","prev":{"id":"2f2cadc5-be13-5744-aed9-309c62624def","slug":"contribute/first-contribution","frontmatter":{"title":"New contributor","description":null}},"next":{"id":"fb5f8bef-9f4e-5411-b09e-632f9f2281e2","slug":"contribute/style-guides","frontmatter":{"title":"Style guides","description":null}}}},"staticQueryHashes":["2315317908","3001504130","573224243"]}