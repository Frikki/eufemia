{"componentChunkName":"component---src-templates-mdx-js","path":"/contribute/style-guides/git/","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"contribute/style-guides/git","frontmatter":{"title":"Git convention","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null},"tableOfContents":{"items":[{"url":"#git-convention","title":"Git convention","items":[{"url":"#commit-messages","title":"Commit Messages","items":[{"url":"#ignore-ci-run","title":"Ignore CI run"},{"url":"#rebasing","title":"Rebasing","items":[{"url":"#squash-commits","title":"Squash commits"},{"url":"#rebase-onto-main","title":"Rebase onto main"}]}]},{"url":"#pull-requests","title":"Pull Requests"}]}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Git convention\",\n  \"order\": 5\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Git convention\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Make sure you follow \", mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"https://semver.org\"\n  }, \"Semantic Versioning\"))), mdx(\"p\", null, \"Version numbers are handled automatically by using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/semantic-release/semantic-release#readme\"\n  }, \"semantic-release\"), \".\"), mdx(\"h2\", null, \"Commit Messages\"), mdx(\"p\", null, \"Make sure to decorate your \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"commit messages\"), \" with either \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.conventionalcommits.org/en/v1.0.0/#summary\"\n  }, \"Conventional Commits\"), \" or \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/bahmutov/simple-commit-message\"\n  }, \"simple-commit-message\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fix: an example fix message\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"feat: this is a new feature\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"BREAKING CHANGE (must be in the footer of the commit)\"))), mdx(\"p\", null, \"If you are working on a single component update, you can use\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fix(ExampleComponent): an example fix message\"), \" or\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"feat(ExampleComponent): this is a new feature\"), \".\")), mdx(\"p\", null, \"You can also use the following decorators \\u2013 but keep in mind, they won't be included in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/dnbexperience/eufemia/releases\"\n  }, \"releases change log\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"chore:\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docs:\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"style:\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"build:\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ci:\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"refactor:\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"perf:\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"test:\"))), mdx(\"h3\", null, \"Ignore CI run\"), mdx(\"p\", null, \"You can either include \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[skip ci]\"), \" in your \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/\"\n  }, \"commit message\"), \" or let your branch name end with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--skip-ci\"), \".\"), mdx(\"h3\", null, \"Rebasing\"), mdx(\"h4\", null, \"Squash commits\"), mdx(\"p\", null, \"If you have to make a small fix after you committed:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make and commit the new change\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Squash and rebase with the previous commit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Force push to your branch\")), mdx(\"h4\", null, \"Rebase onto main\"), mdx(\"p\", null, \"If you are working on a branch for a long period, it might be necessary to do a rebase on main once in a while:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"git fetch origin && git rebase origin/main\\n\")), mdx(\"h2\", null, \"Pull Requests\"), mdx(\"p\", null, \"When you have committed changes to your branch, go to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/dnbexperience/eufemia/pulls\"\n  }, \"Github Pull Requests\"), \" and open a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"New pull request\"), \".\"), mdx(InlineImg, {\n    src: \"/images/pull-request.png\",\n    width: \"900\",\n    alt: \"Screenshot of the location of new pull request button on Github\",\n    top: true,\n    bottom: true,\n    mdxType: \"InlineImg\"\n  }), mdx(\"p\", null, \"You will most likely get the yellow notification bar mentioning that a branch had a recent push. Click on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Compare and pull request\"), \" button. This will take you to the page for opening a pull request. Fill out the template under the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Write tab\"), \".\"), mdx(InlineImg, {\n    src: \"/images/pull-request-part-2.png\",\n    width: \"900\",\n    alt: \"Screenshot of opening a new pull request on Github\",\n    top: true,\n    bottom: true,\n    mdxType: \"InlineImg\"\n  }), mdx(\"p\", null, \"Request a reviewer, create the pull request and watch the results of the pipeline checks.\"));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"contribute/style-guides","frontmatter":{"menuTitle":null,"title":"Style guides","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"contribute","frontmatter":{"menuTitle":null,"title":"Contribution Guide","description":"Project overview, development guides, conventions etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"4643e59f-b133-5324-8045-f8c49cc45044","slug":"contribute/style-guides/git","prev":{"id":"8e50b411-58a6-5da6-a294-685014b67adc","slug":"contribute/style-guides/coding","frontmatter":{"title":"Code guide","description":null}},"next":{"id":"56f47ad3-aa32-5d9e-a5b8-33e1bf251513","slug":"contribute/style-guides/documentation","frontmatter":{"title":"Documentation","description":null}}}},"staticQueryHashes":["2315317908","3001504130","573224243"]}