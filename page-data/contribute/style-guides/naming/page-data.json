{"componentChunkName":"component---src-templates-mdx-js","path":"/contribute/style-guides/naming/","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"contribute/style-guides/naming","frontmatter":{"title":"Naming convention","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null},"tableOfContents":{"items":[{"url":"#naming-convention","title":"Naming convention","items":[{"url":"#react-components","title":"React components"},{"url":"#web-components","title":"Web components"},{"url":"#css--scss","title":"CSS / SCSS"},{"url":"#javascript","title":"Javascript"},{"url":"#events-and-properties","title":"Events and Properties"},{"url":"#icons","title":"Icons"},{"url":"#documentation","title":"Documentation"},{"url":"#why-snake_case-property-naming","title":"Why snake_case property naming"}]}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Naming convention\",\n  \"order\": 5\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Naming convention\"), mdx(\"p\", null, \"The DNB Design System Eufemia uses the following naming conventions.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Formatting styles\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"pascal case\"), \" also known as \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"upper camel case\"), \". Every word upper case. Example: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PascalCase\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"camel case\"), \" also known as \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"lower camel case\"), \". First word lower case. Example: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"camelCase\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"kebab case\"), \" also known as \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"kebab case\"), \". Only lower case letters. Example: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"kebab-case\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"snake case\"), \". Only lower case letters. Example: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"snake_case\"))), mdx(\"h2\", null, \"React components\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"React Components, both as files and as components use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"pascal case\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The folder containing the component uses \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"kebab case\"), \".\")), mdx(\"h2\", null, \"Web components\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Web components use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"kebab case\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"They are prefixed with: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dnb-\"))), mdx(\"h2\", null, \"CSS / SCSS\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CSS classes and the files containing the styles use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"kebab case\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CSS classes are prefixed with: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dnb-\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CSS \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Custom Properties\"), \" (CSS Variables) use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"kebab case\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SCSS Mixins use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"camel case\"), \".\")), mdx(\"h2\", null, \"Javascript\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Functions\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Variables\"), \" use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"camel case\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Classes\"), \" use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"pascal case\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Other JavaScript files use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"kebab case\"), \".\")), mdx(\"h2\", null, \"Events and Properties\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Event names use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"camel case\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"They have to describe what they are aiming to do. Like: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onClick\"))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NB:\"), \" Existing components use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"snake case\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"on_click\"), \") \\u2013 but you are free to use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"camel case\"), \".\"), mdx(\"h2\", null, \"Icons\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Icon names use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"snake case\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"They have to describe what they are aiming to meant for. Like: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"chevron_right\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sizes are added as a postfix. Like: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"chevron_right_medium\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Only alphabetic characters (a to z) without special chars, due to import statements.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Figma icon naming has to match the same (icon archive) as they will define the import names.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Figma page and frame names (icon archive) do have to consist the same, due to the automated import mechanism.\")), mdx(\"h2\", null, \"Documentation\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Pages\"), \" and directories use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"kebab case\"), \".\")), mdx(\"h2\", null, \"Why \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"snake_case\"), \" property naming\"), mdx(\"p\", null, \"The decision to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"snake_case\"), \" was made to not just adopt React terms (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"camelCase\"), \"), because we wanted to be open for future changes in the front end world.\"), mdx(\"p\", null, \"But also the technical limitation that \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Web Components\"), \" do not support \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"camelCase\"), \" made us more confident to use another case style.\"), mdx(\"p\", null, \"HTML attributes uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kebab-case\"), \", so we needed something between.\"), mdx(\"p\", null, \"The aspect to distinguish between case styles will also make code easier to read and support future code changes and refactoring.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Component aria-hidden=\\\"true\\\" myReactProp={...} on_click={...} />\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Update:\"), \" Eufemia does not need to support \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Web Components\"), \" anymore. That makes it possible to use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"camel case\"), \" for React Component Properties.\"));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"contribute/style-guides","frontmatter":{"menuTitle":null,"title":"Style guides","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"contribute","frontmatter":{"menuTitle":null,"title":"Contribution Guide","description":"Project overview, development guides, conventions etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"dab36e88-f72b-5495-991c-884024b38f8f","slug":"contribute/style-guides/naming","prev":{"id":"b9e00838-40c2-5cf1-9201-4c6e8aa4ccb7","slug":"uilib/components/toggle-button","frontmatter":{"title":"ToggleButton","description":"The ToggleButton component should be used to toggle on or off a limited number of choices."}},"next":{"id":"12ff6b5c-731b-53fc-96db-d5486e87dd0d","slug":"uilib/components/tooltip","frontmatter":{"title":"Tooltip","description":null}}}},"staticQueryHashes":["2315317908","2480288490","3000541721","3001504130","573224243"]}