{
    "componentChunkName": "component---src-templates-mdx-js",
    "path": "/uilib/components/autocomplete/info",
    "result": {"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true},"tableOfContents":{"items":[{"url":"#description","title":"Description"},{"url":"#type-ahead-and-combobox","title":"Type Ahead and ComboBox","items":[{"url":"#when-to-use-it","title":"When to use it:"},{"url":"#highlighting","title":"Highlighting","items":[{"url":"#using-components-inside-content","title":"Using Components inside content"}]},{"url":"#numbers","title":"Numbers"},{"url":"#screen-reader-support","title":"Screen reader support"}]},{"url":"#custom-size","title":"Custom size"}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Description\"), mdx(\"p\", null, \"The Autocomplete component is a combination of an \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/input\"\n  }, \"Input\"), \" and a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/dropdown\"\n  }, \"Dropdown\"), \", also called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ComboBox\"), \". During typing, matching data items gets suggested in an option menu (listbox).\"), mdx(\"h2\", null, \"Type Ahead and ComboBox\"), mdx(\"p\", null, \"The Autocomplete component may also be known as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Type Ahead\"), \" or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ComboBox\"), \". But autocomplete describes the purpose more pricey and descriptive, therefore Eufemia is using this term.\"), mdx(\"h3\", null, \"When to use it:\"), mdx(\"p\", null, \"Use it for both small autocomplete purposes and large (async) data set search. The component supports two ways of showing \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/progress-indicator\"\n  }, \"ProgressIndicator\"), \".\"), mdx(\"p\", null, \"You may check out the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/dropdown/info\"\n  }, \"Dropdown\"), \" component for more details on how to use it etc. They both share the same \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/fragments/drawer-list\"\n  }, \"DrawerList\"), \".\"), mdx(\"h3\", null, \"Highlighting\"), mdx(\"p\", null, \"Words found during typing are highlighted. The rules are:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The two first words will match the beginning of a word\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The third word will match inside a word (can be changed with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"search_in_word_index\"), \")\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Case insensitive\")), mdx(\"h4\", null, \"Using Components inside content\"), mdx(\"p\", null, \"It is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not\"), \" possible to wrap them inside of React Components. The reason is because the Autocomplete component needs to know the data is wants to search, before your React Component has rendered. But also, the component can't update the HTML in order to make the bold highlighting \\u2013 \\\"after\\\" your component has rendered.\"), mdx(\"p\", null, \"That means, you can't run a component that will render as soon as it is displayed.\"), mdx(\"p\", null, \"If you need to format numbers, then do it before you send in the data content.\"), mdx(\"p\", null, \"It is possible to wrap your content inside one HTML Element. Nested elements are \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not\"), \" supported.\"), mdx(\"p\", null, \"In order to wrap your content only visually, you can provide your wrappers inside an array:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"{\\n  content: [\\n    <IconPrimary icon=\\\"bell\\\" />,\\n    <span className=\\\"custom-selector-a\\\">The Shawshank Redemption</span>,\\n    <span className=\\\"custom-selector-b\\\">The Dark Knight</span>,\\n    // etc.\\n    <NumberFormat value={1234} />, // <-- Not searchable nor highlightable\\n  ]\\n}\\n\")), mdx(\"p\", null, \"or you can provide it inside a fragment:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"{\\n  content: <>\\n    <IconPrimary icon=\\\"bell\\\" />\\n    <span className=\\\"custom-selector-a\\\">The Shawshank Redemption</span>\\n    <span className=\\\"custom-selector-b\\\">The Dark Knight</span>\\n  </>\\n}\\n\")), mdx(\"p\", null, \"and if you need to decouple the searchable content form whats displayed, then you can put your searchable content inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"search_content\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"{\\n  content: ['your visual content'],\\n  search_content: ['your search content'],\\n}\\n\")), mdx(\"h3\", null, \"Numbers\"), mdx(\"p\", null, \"Numbers are often different than a word filter. You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"search_numbers={true}\"), \" to enable a number specialized filtering. See example in the demos.\"), mdx(\"p\", null, \"Now the user could search for e.g. bank account numbers by just entering \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"201\"), \", even if you format it like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"2000 12 34567\"), \" (e.g. use format(20001234567, { ban: true }) from /components/number-format/NumberUtils)\"), mdx(\"h3\", null, \"Screen reader support\"), mdx(\"p\", null, \"To enhance screen-reader usage, this component uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-live\"), \" to announce the amount of options found (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria_live_options\"), \").\"), mdx(\"h2\", null, \"Custom size\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \".dnb-autocomplete {\\n  --autocomplete-width: 20rem; /* custom width */\\n}\\n\")), mdx(\"p\", null, \"You can also set the width directly, but then it has to be defined like so (including \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"min-width\"), \"):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \"/** Because of the included label/status etc. we target the \\\"__shell\\\" */\\n.dnb-autocomplete__shell {\\n  width: 10rem;\\n}\\n\\n/** In order to change only the drawer-list width */\\n.dnb-autocomplete .dnb-drawer-list__root {\\n  width: 10rem;\\n}\\n\")), mdx(AutocompleteMethods, {\n    mdxType: \"AutocompleteMethods\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","children":[{"fields":{"slug":"uilib"},"frontmatter":{"title":"UI Library","menuTitle":null,"showTabs":null,"tabs":null,"hideTabs":null}},{"fields":{"slug":"uilib/components/autocomplete"},"frontmatter":{"title":"Autocomplete","menuTitle":null,"showTabs":true,"tabs":null,"hideTabs":null}}]}},"pageContext":{"id":"8f3178ca-b92f-5f74-a790-b358f34b2308","prev":{"id":"ae1cc939-2e32-5529-b24a-c857530b2d3c","fields":{"slug":"uilib/components/autocomplete/events"}},"next":{"id":"65ba34f7-4992-590c-a5c9-72fa8f71a4eb","fields":{"slug":"uilib/components/autocomplete/properties"}}}},
    "staticQueryHashes": ["182237034","2315317908","786658678"]}