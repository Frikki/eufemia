{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/components/autocomplete/info","result":{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Description\"), mdx(\"p\", null, \"The Autocomplete component is a combination of an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/uilib/components/input\"\n  }), \"Input\"), \" and a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/uilib/components/dropdown\"\n  }), \"Dropdown\"), \", also called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ComboBox\"), \". During typing, matching data items gets suggested in an option menu (listbox).\"), mdx(\"h2\", null, \"Type Ahead and ComboBox\"), mdx(\"p\", null, \"The Autocomplete component may also be known as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Type Ahead\"), \" or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ComboBox\"), \". But autocomplete describes the purpose more pricey and descriptive, therefore Eufemia is using this term.\"), mdx(\"h3\", null, \"When to use it:\"), mdx(\"p\", null, \"Use it for both small autocomplete purposes and large (async) data set search. The component supports two ways of showing \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/uilib/components/progress-indicator\"\n  }), \"ProgressIndicator\"), \".\"), mdx(\"p\", null, \"You may check out the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/uilib/components/dropdown/info\"\n  }), \"Dropdown\"), \" component for more details on how to use it etc. They both share the same \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/uilib/components/fragments/drawer-list\"\n  }), \"DrawerList\"), \".\"), mdx(\"h3\", null, \"Highlighting\"), mdx(\"p\", null, \"Words found during typing are highlighted. The rules are:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The two first words will match the beginning of an option\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The third word will match inside an option (can be changed with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"search_in_word_index\"), \")\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Case insensitive\")), mdx(\"h3\", null, \"Screen reader support\"), mdx(\"p\", null, \"To enhance screen-reader usage, this component uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-live\"), \" to announce the amount of options found (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria_live_options\"), \").\"), mdx(\"h2\", null, \"Custom size\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \".dnb-autocomplete {\\n  --autocomplete-width: 20rem; /* custom width */\\n}\\n\")), mdx(\"p\", null, \"You can also set the width directly, but then it has to be defined like so (including \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"min-width\"), \"):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"/** Because of the included label/status etc. we target the \\\"__shell\\\" */\\n.dnb-autocomplete__shell {\\n  width: 10rem;\\n}\\n\\n/** In order to change only the drawer-list width */\\n.dnb-autocomplete .dnb-drawer-list__root {\\n  width: 10rem;\\n}\\n\")), mdx(AutocompleteMethods, {\n    mdxType: \"AutocompleteMethods\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","children":[{"__typename":"Mdx","fields":{"slug":"uilib"},"frontmatter":{"title":"UI Library","menuTitle":null,"showTabs":null,"tabs":null,"hideTabs":null}},{"__typename":"Mdx","fields":{"slug":"uilib/components/autocomplete"},"frontmatter":{"title":"Autocomplete","menuTitle":null,"showTabs":true,"tabs":null,"hideTabs":null}}]}},"pageContext":{"id":"4329216a-6275-54ab-b1bf-0877add04292","prev":{"id":"5917a9a6-054b-5618-b7f1-254a5fb38ed5","fields":{"slug":"uilib/components/autocomplete/methods"}},"next":{"id":"5f1779d7-22d7-5c6a-b71c-09f2c9a0881a","fields":{"slug":"uilib/components/autocomplete/events"}}}}}