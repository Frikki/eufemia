{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/components/checkbox/checkbox-properties","result":{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"","description":null,"fullscreen":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"draft\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Properties\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"checked\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" determine whether the checkbox is checked or not. Default will be \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"default_state\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" boolean value. The state of the checkbox. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \". Set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" if otherwise.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"title\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"title\"), \" of the input - describing it a bit further for accessibility reasons.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"label\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" use either the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"label\"), \" property or provide custom one.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"label_position\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" defines the position of the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"label\"), \". Use either \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"left\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"right\"), \". Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"right\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"status\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" text with a status message. The style defaults to an error message.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"status_state\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" defines the state of the status. Currently there are two statuses \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"[error, info]\"), \". Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"error\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"global_status_id\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"status_id\"), \" used for the target \", mdx(\"a\", _extends({\n    parentName: \"td\"\n  }, {\n    \"href\": \"/uilib/components/global-status\"\n  }), \"GlobalStatus\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"suffix\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" text describing the content of the Checkbox more than the label. You can also send in a React component, so it gets wrapped inside the Checkbox component.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"a\", _extends({\n    parentName: \"td\"\n  }, {\n    \"href\": \"/uilib/components/space#tab-properties\"\n  }), \"Space\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" spacing properties like \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"top\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"bottom\"), \" are supported.\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"e029d136-22e9-5766-986b-9e02f5c3e4f8","prev":{"id":"c840c83c-616a-560d-a465-de531938ad79","fields":{"slug":"uilib/components/checkbox/checkbox-info"}},"next":{"id":"19d8fe40-3ab3-50e3-83e5-c75f84bfa0b6","fields":{"slug":"uilib/components/date-picker/date-picker-events"}}}}}