{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/components/dialog/info/","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"uilib/components/dialog/info","frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null},"tableOfContents":{"items":[{"url":"#description","title":"Description","items":[{"url":"#variants","title":"Variants"},{"url":"#parts-in-dialog","title":"Parts in Dialog"},{"url":"#more-detailed-information","title":"More detailed information","items":[{"url":"#converting-from-modal","title":"Converting from Modal"}]}]}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Description\"), mdx(\"p\", null, \"The Dialog component is a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/modal\"\n  }, \"Modal\"), \" variation that appears at the center of the screen. The Dialog has similar functionality to a traditional popup window. Similar to Modal, it has to be triggered by the user to appear. Typical usage would be to read an explanation, then closing it.\"), mdx(\"h3\", null, \"Variants\"), mdx(\"p\", null, \"There are two variants of the Dialog component: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"information\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"confirmation\"), \".\"), mdx(InlineImg, {\n    height: \"230\",\n    width: \"auto\",\n    src: DialogInformExample,\n    caption: \"Example of an informational Dialog\",\n    className: \"mint-green-12\",\n    mdxType: \"InlineImg\"\n  }), mdx(InlineImg, {\n    height: \"230\",\n    width: \"auto\",\n    src: DialogConfirmExample,\n    caption: \"Example of a confirmation Dialog\",\n    className: \"mint-green-12\",\n    mdxType: \"InlineImg\"\n  }), mdx(\"p\", null, \"The informational variant (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"information\"), \") is used for informational purposes, for example explaining a word/something on the page. It has to be triggered by the user to appear. Typical usage for it would be to read an explanation, then closing it.\"), mdx(\"p\", null, \"The confirmation variant (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"confirmation\"), \") is used when some action is needed, or if we have to inform of something without the users triggering it. A couple of examples would be a scenario where the user confirms to delete something, or if the user has been logged out automatically, which we would need to inform of, or a cookie consent dialogue.\"), mdx(\"h3\", null, \"Parts in Dialog\"), mdx(\"p\", null, \"To provide custom content to parts of the Dialog, a set of component parts are provided:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Dialog.Navigation>\"), \": The navigation field at the top of the component, default with a close button (Equal to the prop \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"navContent\"), \").\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Dialog.Header>\"), \": The header field of the component, where the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"title\"), \" will appear (Equal to the prop \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"headerContent\"), \").\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Dialog.Actions>\"), \": An optional field for buttons at the bottom of the component. This field will appear by default for variant \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"confirmation\"), \".\")), mdx(\"h3\", null, \"More detailed information\"), mdx(\"p\", null, \"For more details regarding the component functionality, check out the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/modal\"\n  }, \"Modal documentation\"), \".\"), mdx(\"h4\", null, \"Converting from Modal\"), mdx(\"p\", null, \"If you are converting from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Modal />\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Dialog />\"), \", there are a few differences you need to take into consideration:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"trigger_*\"), \" props are not supported for Dialog, use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"triggerAttributes\"), \" instead to pass in props for the trigger button.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Change prop \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"trigger_hidden\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"omitTriggerButton\"), \" to omit the default trigger button from Modal.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Only camelCase props are supported for Dialog, so you will need to update the prop names.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Modal.Inner\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Modal.Content\"), \" converts to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Dialog.Body\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Modal.Bar\"), \" converts to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Dialog.Navigaton\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Modal\"), \" was a class component and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Dialog\"), \" is a functional component.\")));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"uilib/components/dialog","frontmatter":{"menuTitle":null,"title":"Dialog","description":"The Dialog component is a Modal variation that appears at the center of the screen.","fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null}},{"slug":"uilib/components","frontmatter":{"menuTitle":null,"title":"Components","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"uilib","frontmatter":{"menuTitle":null,"title":"UI Library","description":"Buttons, dropdowns, input fields, components etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"9c622d3e-69f4-5da5-9f00-74135ca2972a","slug":"uilib/components/dialog/info","prev":{"id":"c9abf096-6fc2-5b4a-9114-57b24a9bbc4c","slug":"uilib/components/dialog/demos","frontmatter":{"title":"","description":null}},"next":{"id":"7f11979d-8bc6-50ec-ad70-7ced67a68b23","slug":"uilib/components/drawer/events","frontmatter":{"title":"","description":null}}}},"staticQueryHashes":["2315317908","3001504130","573224243"]}