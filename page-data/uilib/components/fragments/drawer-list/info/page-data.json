{
    "componentChunkName": "component---src-templates-mdx-js",
    "path": "/uilib/components/fragments/drawer-list/info",
    "result": {"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"uilib/components/fragments/drawer-list/info","frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null},"tableOfContents":{"items":[{"url":"#description","title":"Description"},{"url":"#data-structure","title":"Data structure","items":[{"url":"#example-usage-of-options_render","title":"Example usage of options_render"},{"url":"#data-dnb-drawer-list-active","title":"data-dnb-drawer-list-active"}]}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Description\"), mdx(\"p\", null, \"The DrawerList component is a fragment inside other components.\"), mdx(\"p\", null, \"It is used e.g. in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/dropdown\"\n  }, \"Dropdown\"), \".\"), mdx(\"h2\", null, \"Data structure\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// as array\\nconst data = [\\n  // Every data item can, beside \\\"content\\\" - contain what ever\\n  {\\n    // (optional) can be what ever\\n    selected_key: 'key_0',\\n\\n    // (optional) is show instead of \\\"content\\\", once selected\\n    selected_value: 'Item 1 Value',\\n\\n    // Item content as a string or array\\n    content: 'Item 1 Content',\\n  },\\n\\n  // more items ...\\n  {\\n    selected_key: 'key_1',\\n    content: ['Item 2 Value', 'Item 2 Content'],\\n  },\\n  {\\n    selected_key: 'key_2',\\n    selected_value: 'Item 3 Value',\\n    content: ['Item 3 Content A', 'Item 3 Content B'],\\n  },\\n  {\\n    selected_key: 'key_3',\\n    selected_value: 'Item 4 Value',\\n    content: ['Item 4 Content A', <>Custom Component</>],\\n  },\\n]\\n\\n// as object\\nconst data = {\\n  a: 'A',\\n  b: 'B',\\n}\\n\")), mdx(\"h3\", null, \"Example usage of \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"options_render\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"render(\\n  <DrawerList\\n    options_render={({ Items, Item, data }) => (\\n      <>\\n        <Items />\\n        <Item>Addition</Item>\\n        {data.length > 1 && <li>Addition</li>}\\n      </>\\n    )}\\n  />\\n)\\n\")), mdx(\"h3\", null, \"data-dnb-drawer-list-active\"), mdx(\"p\", null, \"When a DrawerList is open, it will set an HTML attribute on the main HTML Element called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data-dnb-drawer-list-active\"), \". The attribute value will be the ID of the current DrawerList.\"), mdx(\"p\", null, \"This can be used to handle z-index issues from within CSS only:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \"html[data-dnb-drawer-list-active='DrawerList-ID'] {\\n  /* Your css */\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"uilib/components/fragments/drawer-list","frontmatter":{"menuTitle":null,"title":"DrawerList","description":"The DrawerList component is a fragment inside other components.","fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null}},{"slug":"uilib/components/fragments","frontmatter":{"menuTitle":null,"title":"Fragments","description":"Fragments are small, low-level and reusable parts used inside other components.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"uilib/components","frontmatter":{"menuTitle":null,"title":"Components","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"uilib","frontmatter":{"menuTitle":null,"title":"UI Library","description":"Buttons, dropdowns, input fields, components etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"47d0e66c-5cc2-5b93-9909-21e759d4899e","slug":"uilib/components/fragments/drawer-list/info","prev":{"id":"56fa21df-72cb-5b6e-baa8-34ddc123c256","slug":"uilib/components/fragments/drawer-list/events"},"next":{"id":"cd97e180-a3b3-575d-8ff5-a4ed31148cc3","slug":"uilib/components/fragments/drawer-list/properties"}}},
    "staticQueryHashes": ["2315317908","3001307379","573224243"]}