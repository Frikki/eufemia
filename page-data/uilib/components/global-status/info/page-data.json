{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/components/global-status/info","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true},"tableOfContents":{"items":[{"url":"#description","title":"Description","items":[{"url":"#formstatus-default-behavior","title":"FormStatus default behavior"},{"url":"#several-global-statuses","title":"Several Global statuses"},{"url":"#where-to-put-it","title":"Where to put it"},{"url":"#smooth-scrolling","title":"Smooth scrolling"},{"url":"#manually-updates","title":"Manually updates"},{"url":"#javascript-interceptor-situation","title":"JavaScript (interceptor situation)"},{"url":"#jsx","title":"JSX"}]}]},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Description\"), mdx(\"p\", null, \"The GlobalStatus is a complex component meant for displaying global Application notifications or a summary of a form ( displaying form errors, messages etc. ).\\nBy default, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GlobalStatus\"), \" is automatically connected together with the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/uilib/components/form-status\"\n  }), \"FormStatus\"), \" component. This means, that every form component showing a status, will send the status message along to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GlobalStatus\"), \".\"), mdx(\"h3\", null, \"FormStatus default behavior\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Once a \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"FormStatus\"), \" is shown, the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"main\"), \" \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"GlobalStatus\"), \" will show up.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The page will scroll (if needed) to the dedicated \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"GlobalStatus\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Form components will send along both the status text, and it's label to show a good and accessible summary.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Screen reader uses will automatically hear the whole content of the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GlobalStatus\"), \" once it shows up.\")), mdx(\"h3\", null, \"Several Global statuses\"), mdx(\"p\", null, \"Normally, You only want to have \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"one\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GlobalStatus\"), \" inside Your application. But You can have several in parallel. But make sure You give every other a new ID:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<GlobalStatus id=\\\"other-global-status\\\" />\\n\")), mdx(\"h3\", null, \"Where to put it\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GlobalStatus\"), \" component should be positioned right under the header. By default, it uses \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"main\"), \" as the ID.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Or as a secondary summary of errors in a submit form. Keep in mind, by default, form components like \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/uilib/components/input\"\n  }), \"Input\"), \" are using the ID \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"main\"), \". To make sure the build in \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/uilib/components/form-status\"\n  }), \"FormStatus\"), \" is sending along the message to another \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GlobalStatus\"), \", You have to set the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"global_status_id\"), \", like:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<GlobalStatus id=\\\"other-global-status\\\" />\\n...\\n<Input global_status_id=\\\"other-global-status\\\" ... />\\n\")), mdx(\"p\", null, \"But You can also make use of the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/uilib/components/form-set\"\n  }), \"FormSet\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/uilib/components/form-row\"\n  }), \"FormRow\"), \" which will send along the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"global_status_id\"), \" the underlaying/wrapped components, like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<GlobalStatus id=\\\"other-global-status\\\" />\\n...\\n<FormSet global_status_id=\\\"other-global-status\\\">\\n  <Input status=\\\"Message\\\" />\\n  ...\\n</FormSet>\\n\")), mdx(\"h3\", null, \"Smooth scrolling\"), mdx(\"p\", null, \"Not every browser (e.g. Safari, Edge and IE) supports smooth scrolling. Therefore, add the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/iamdustan/smoothscroll\"\n  }), \"smoothscroll-polyfill\"), \" to your project:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import smoothscroll from 'smoothscroll-polyfill'\\n\\n// kick off the polyfill!\\nsmoothscroll.polyfill()\\n\")), mdx(\"h3\", null, \"Manually updates\"), mdx(\"p\", null, \"Beside the automated connection between the error states of form components (\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/uilib/components/form-status\"\n  }), \"FormStatus\"), \"), You can update messages from everywhere in Your application on any time:\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NB:\"), \" The GlobalStatus will \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"autoclose\"), \" by default, once all messages are removed.\"), mdx(\"h3\", null, \"JavaScript (interceptor situation)\"), mdx(\"p\", null, \"You can access and manipulate an existing GlobalStatus from outside of the React render tree.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Given you have already defined a GlobalStatus in JSX:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<GlobalStatus id=\\\"other-global-status\\\" />\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Then you can control it from within a JavaScript context when ever you need to:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { GlobalStatus } from '@dnb/eufemia/components'\\n\\n// 1. Update / extend the the status like so:\\nconst statusOne = GlobalStatus.create({\\n  id: 'other-global-status', // or main\\n  status_id: 'custom-id-1',\\n  text: 'New Text',\\n  item: 'Item from status #1'\\n})\\n\\n// 2. and removes \\\"custom-id-1\\\" again if needed\\nstatusOne.update({\\n  text: 'Updated Text'\\n})\\n\\n// 3. and removes \\\"custom-id-1\\\" again if needed\\nstatusOne.remove()\\n\")), mdx(\"h3\", null, \"JSX\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import { GlobalStatus } from '@dnb/eufemia/components'\\n\\n// 1. Place it under the header bar\\n<GlobalStatus text=\\\"Optional default text\\\" />\\n\\n// 2. later on, You can show a message\\n<GlobalStatus.Add\\n  status_id=\\\"custom-id-1\\\"\\n  title=\\\"New title\\\"\\n  text=\\\"First long info text ...\\\"\\n  item=\\\"Item from status #1\\\"\\n/>\\n\\n// 3. and remove it again\\n<GlobalStatus.Remove status_id=\\\"custom-id-1\\\" />\\n\")), mdx(\"p\", null, \"If You need an additional \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GlobalStatus\"), \", define a custom ID (custom-status):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import { GlobalStatus } from '@dnb/eufemia/components'\\n\\n// 1. Place it somewhere in Your application\\n<GlobalStatus id=\\\"custom-status\\\" />\\n\\n// 2. later on, You can show a message\\n<GlobalStatus.Add\\n  id=\\\"custom-status\\\"\\n  status_id=\\\"custom-id-1\\\"\\n  title=\\\"New title\\\"\\n  text=\\\"First long info text ...\\\"\\n  item=\\\"Item from status #1\\\"\\n/>\\n\\n// 3. and remove it again\\n<GlobalStatus.Remove id=\\\"custom-status\\\" status_id=\\\"custom-id-1\\\" />\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","children":[{"fields":{"slug":"uilib"},"frontmatter":{"title":"UI Library","menuTitle":null,"showTabs":null,"tabs":null,"hideTabs":null}},{"fields":{"slug":"uilib/components/global-status"},"frontmatter":{"title":"GlobalStatus","menuTitle":null,"showTabs":true,"tabs":null,"hideTabs":null}}]}},"pageContext":{"id":"1f99666e-21f4-539c-81d8-566dc43960de","prev":{"id":"2e88340c-613a-5c7c-8434-4067f3dcdcb0","fields":{"slug":"uilib/components/heading/demos"}},"next":{"id":"edd61098-1588-5dea-b288-0a47791fa0dd","fields":{"slug":"uilib/components/global-error/properties"}}}},"staticQueryHashes":["2315317908","3433733815","786658678"]}