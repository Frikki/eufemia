{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/components/global-status/properties","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true},"tableOfContents":{"items":[{"url":"#properties","title":"Properties"},{"url":"#item-object","title":"Item Object"},{"url":"#controllers","title":"Controllers"}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Properties\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Properties\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"id\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" the main ID. Defaults to the prop\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"title\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" the title appears as a part of the status content. Use \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \" to hide / remove the title and icon. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"En feil har skjedd\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"text\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"children\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" the text appears as the status content. Beside plain text, You can send in a React component as well. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"null\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"items\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" the items (list items) appears as a part of the status content. You can both use an JSON array, or a vanilla array with a string or an object content. Se \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"Item Object\"), \" example below.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"icon\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" the icon show before the status title. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"exclamation\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"state\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" defines the visual appearance of the status. There are two main statuses \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"error\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"info\"), \". The default status is \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"error\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"icon_size\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" the icon size of the title icon shows. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"medium\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"show\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \" to manually make the global status visible. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"show\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"autoclose\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" to automatically close the global status if there are no more left items in the provider stack. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"autoscroll\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" to automatically scroll the page to the appeared global status. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"no_animation\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" to disable the show/hide/slide/fade/grow/shrink animation. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"delay\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" defines the delay on how long the automated visibility should wait, before it appears to the user. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"200ms\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"hide_close_button\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" if the close button should be hidden for the user. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"close_text\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" text of the close button. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Lukk\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"status_anchor_text\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" defines the anchor text showing up after every item, in case there is a \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"status_id\"), \" defined. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"G\\xE5 til %s\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"%s\"), \" represents the optional and internal handled label addition.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"omit_set_focus\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" to omit setting the focus during visibility. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \". Additionally, there is \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"omit_set_focus_on_update\"), \" which is set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" by default.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/uilib/components/space/properties\"\n  }, \"Space\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" spacing properties like \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"top\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"bottom\"), \" are supported.\")))), mdx(\"h2\", null, \"Item Object\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// simple\\nconst items = ['Item #1', 'Item #2']\\n\\n// advanced\\nconst items = [\\n  { text: 'Item #1', status_id: 'id-1' },\\n  { text: 'Item #2', status_id: 'id-2', status_anchor_url: 'https://' },\\n]\\n\")), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Advanced Item Properties\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"text\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(required)\"), \" the text appears as the status content. Beside plain text, You can send in a React component as well.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"status_id\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(required)\"), \" defines an unique ID so the message can be either updated or removed individual.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"status_anchor_url\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" Use \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"status_anchor_url=\\\"true\\\"\"), \" to enable the go to link, defined as a url hash using the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"status_id\"), \". Or provide it with an actual url: \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"status_anchor_url=\\\"https://\\\"\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"status_anchor_text\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" defines the anchor text showing up after every item. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"G\\xE5 til %s\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"%s\"), \" represents the optional and internal handled label addition.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"status_anchor_label\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" adds an additional text to the anchor (replaces \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"%s\"), \"), showing up after every item. Is used by default by other form components, if they have an \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"label\"), \".\")))), mdx(\"h2\", null, \"Controllers\"), mdx(\"p\", null, \"In React You can make use of the helper components, the function as a kind of a controller component.\\nThe goal is to update the content (properties/events) of the target GlobalStatus.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// Place the status where ever you have to.\\n<GlobalStatus id=\\\"custom-id\\\" />\\n\\n// Manipulate the status later on. Every property is optional.\\n<GlobalStatus.Add id=\\\"custom-id\\\" status_id=\\\"status-1\\\" item=\\\"Item #1\\\" text=\\\"New Text\\\" />\\n<GlobalStatus.Add id=\\\"custom-id\\\" status_id=\\\"status-2\\\" item=\\\"Item #2\\\" title=\\\"New Title\\\" />\\n<GlobalStatus.Add id=\\\"custom-id\\\" status_id=\\\"status-3\\\" item=\\\"Item #3\\\" />\\n\\n// or update the status.\\n<GlobalStatus.Update id=\\\"custom-id\\\" show />\\n\\n// Later You can remove a resolved item.\\n<GlobalStatus.Remove id=\\\"custom-id\\\" status_id=\\\"status-3\\\" />\\n\")), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Controller Properties\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"id\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" the main ID. Defaults to the prop \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"main\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"status_id\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" define a new stack ID so You can remove it with the same ID later on. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"null\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"remove_on_unmount\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" if You want that the component \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"<GlobalStatus.Add remove_on_unmount=\\\"true\\\" ... />\"), \" should automatically remove the stacked status from the target \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"GlobalStatus\"), \" on component unmount. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \".\")))));\n}\n;\nMDXContent.isMDXComponent = true;","children":[{"fields":{"slug":"uilib"},"frontmatter":{"title":"UI Library","menuTitle":null,"showTabs":null,"tabs":null,"hideTabs":null}},{"fields":{"slug":"uilib/components/global-status"},"frontmatter":{"title":"GlobalStatus","menuTitle":null,"showTabs":true,"tabs":null,"hideTabs":null}}]}},"pageContext":{"id":"63dd90bd-32cd-5239-996a-83b9de84b862","prev":{"id":"f5eb8c42-7f03-5748-96c0-704e1d9f21da","fields":{"slug":"uilib/components/global-status/events"}},"next":{"id":"2e88340c-613a-5c7c-8434-4067f3dcdcb0","fields":{"slug":"uilib/components/heading/demos"}}}},"staticQueryHashes":["2315317908","3433733815","786658678"]}