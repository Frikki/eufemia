{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/components/input-masked/properties","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true},"tableOfContents":{"items":[{"url":"#properties","title":"Properties"},{"url":"#number-mask-properties","title":"Number mask properties","items":[{"url":"#custom-number-mask-usage","title":"Custom number mask usage"}]},{"url":"#custom-mask-usage","title":"Custom mask usage"}]},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Properties\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Properties\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"mask\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" A mask can be define both as a \", mdx(\"a\", _extends({\n    parentName: \"td\"\n  }, {\n    \"href\": \"https://github.com/text-mask/text-mask/blob/master/componentDocumentation.md#readme\"\n  }), \"RegExp style of characters\"), \" or a callback function. Example below.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number_mask\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" Set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" to enable the default numbers formatting or give an \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"object\"), \" containing the number mask properties. More details below. Can be a JSON string as well, containing the number mask properties. Is disabled by default.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"currency_mask\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" Set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" or set the \", mdx(\"em\", {\n    parentName: \"td\"\n  }, \"valuta\"), \" (currency_mask=\\\"kr\\\") to enable the a custom currency mask give an \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"object\"), \" containing the number mask properties. More details below. Can be a JSON string as well, containing the number mask properties. Is disabled by default. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"kr\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"show_mask\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" Show mask when input is empty and has no focus. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"show_guide\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" When guide is \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \", input-masked doesn't print out placeholder characters and only adds mask characters when the user reaches them as they're typing. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"placeholder_char\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" The placeholder character represents the fillable spot in the mask. Defaults to underscore \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"_\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"keep_char_positions\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" When \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", adding or deleting characters will not affect the positions of existing characters. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"a\", _extends({\n    parentName: \"td\"\n  }, {\n    \"href\": \"/uilib/components/input/properties\"\n  }), \"Input\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" all \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Input\"), \" properties are supported.\")))), mdx(\"h2\", null, \"Number mask properties\"), mdx(\"p\", null, \"Defaults to Norwegian number format:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Properties\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"prefix\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"(string): What to display before the amount. Defaults to empty string.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"suffix\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"(string): What to display after the amount. Defaults to empty string.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"includeThousandsSeparator\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"(boolean): Whether or not to separate thousands. Defaults to to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"thousandsSeparatorSymbol\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"(string): Character with which to separate thousands. Default to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"' '\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"allowDecimal\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"(boolean): Whether or not to allow the user to enter a fraction with the amount. Default to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"decimalSymbol\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"(string): Character that will act as a decimal point. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"','\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"decimalLimit\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"(number): How many digits to allow after the decimal. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"2\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"integerLimit\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"(number): Limit the length of the integer number. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"null\"), \" for unlimited.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"requireDecimal\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"(boolean): Whether or not to always include a decimal point and placeholder for decimal digits after the integer. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"allowNegative\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"(boolean): Whether or not to allow negative numbers. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"allowLeadingZeroes\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"(boolean): Whether or not to allow leading zeroes. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \".\")))), mdx(\"h3\", null, \"Custom number mask usage\"), mdx(\"p\", null, \"The number mask is included and can be set with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"number_mask\"), \" property.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"\\n// 1. Use the desired configurations\\nconst numberMask = {\\n  prefix: '',\\n  suffix: ',- kr.'\\n}\\n\\n// 2. Then pass 'numberMask' to the InputMasked component as the number_mask\\n<InputMasked number_mask={numberMask} ... />\\n\")), mdx(\"p\", null, \"But in case you have to create the mask by yourself, you can do so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import createNumberMask from 'dnb-ui-lib/components/input-masked/addons/createNumberMask'\\n\\n// 1. Create the 'numberMask' with your desired configurations\\nconst numberMask = createNumberMask({\\n  prefix: '',\\n  suffix: ',- kr.'\\n})\\n\\n// 2. Then pass 'numberMask' to the InputMasked component as the mask\\n<InputMasked mask={numberMask} ... />\\n\")), mdx(\"h2\", null, \"Custom mask usage\"), mdx(\"p\", null, \"By now, you don't need to install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-text-mask\"), \" as it comes with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dnb-ui-lib\"), \". For other masks than the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"createNumberMask\"), \" you have to create or install custom masks. Read more on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/text-mask/text-mask/blob/master/addons/README.md\"\n  }), \"how to use the addons\"), \".\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Install the needed dependencies:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm i text-mask-addons\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create and use the mask:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import emailMask from 'text-mask-addons/dist/emailMask'\\n\\n// or import it from the dnb-ui-lib\\nimport emailMask from 'dnb-ui-lib/components/input-masked/addons/emailMask'\\n\\nrender(\\n  <InputMasked\\n    label=\\\"Email:\\\"\\n    mask={emailMask}\\n    placeholder=\\\"@.\\\"\\n    keep_placeholder=\\\"true\\\"\\n  />\\n)\\n\")), mdx(\"p\", null, \"Read more about the details \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/text-mask/text-mask\"\n  }), \"on the open source project\")));\n}\n;\nMDXContent.isMDXComponent = true;","children":[{"__typename":"Mdx","fields":{"slug":"uilib"},"frontmatter":{"title":"UI Library","menuTitle":null,"showTabs":null,"tabs":null,"hideTabs":null}},{"__typename":"Mdx","fields":{"slug":"uilib/components/input-masked"},"frontmatter":{"title":"InputMasked","menuTitle":null,"showTabs":true,"tabs":null,"hideTabs":null}}]}},"pageContext":{"id":"11887ca6-3bd4-5895-88a2-f6ebb9dc1820","prev":{"id":"51603ac8-89b3-5430-9aa1-8932815077b0","fields":{"slug":"uilib/components/input-masked/info"}},"next":{"id":"fa9eda21-5381-55b1-b648-e16e3075437d","fields":{"slug":"uilib/components/input/properties"}}}},"staticQueryHashes":["2315317908","3433733815","786658678"]}