{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/components/input/events/","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"uilib/components/input/events","frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null},"tableOfContents":{"items":[{"url":"#events","title":"Events","items":[{"url":"#manipulate-the-input-value-during-typing","title":"Manipulate the input value during typing"},{"url":"#prevent-setting-a-new-value","title":"Prevent setting a new value"}]}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Events\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Events\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"on_change\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" will be called on value changes made by the user. Returns an object with the value as a string and the native event: \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"{ value, event }\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"on_focus\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" will be called on focus set by the user. Returns \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"{ value, event }\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"on_blur\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" will be called on blur set by the user. Returns \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"{ value, event }\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"on_submit\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" will be called on submit button click. Returns \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"{ value, event }\"), \".\")))), mdx(\"h3\", null, \"Manipulate the input value during typing\"), mdx(\"p\", null, \"You have two possibilities to manipulate the value while a user is typing. Either you handle the value with your own state, or you return a modified value in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"on_change\"), \" event listener:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { format } from '@dnb/eufemia/components/number-format/NumberUtils'\\n\\nfunction Component() {\\n  const onChangeHandler = ({ value }) => {\\n    return format(value)\\n  }\\n\\n  return <Input on_change={onChangeHandler} />\\n}\\n\")), mdx(\"h3\", null, \"Prevent setting a new value\"), mdx(\"p\", null, \"You can use e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"event.preventDefault()\"), \" during \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onKeyDown\"), \", or return false during \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \". They are not 100% the same user experience, but can both be useful in different use cases.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"function Component() {\\n  const onKeyDownHandler = ({ event }) => {\\n    event.preventDefault()\\n  }\\n  const onChangeHandler = ({ value }) => {\\n    return false\\n  }\\n\\n  return <Input onKeyDown={onKeyDownHandler} onChange={onChangeHandler} />\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"uilib/components/input","frontmatter":{"menuTitle":null,"title":"Input","description":"The input component is an umbrella component for all inputs which share the same style as the classic text input field.","fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null}},{"slug":"uilib/components","frontmatter":{"menuTitle":null,"title":"Components","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"uilib","frontmatter":{"menuTitle":null,"title":"UI Library","description":"Buttons, dropdowns, input fields, components etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"c58d38d0-5a9a-57cb-a33e-21f59a6983a0","slug":"uilib/components/input/events","prev":{"id":"6f526d0e-ef93-5cf9-b4bf-82b2c89191d0","slug":"uilib/components/input/demos"},"next":{"id":"58b38460-fede-5e97-a14e-f0ea48cece88","slug":"uilib/components/input/info"}}},"staticQueryHashes":["2315317908","3001307379","3001504130","573224243"]}