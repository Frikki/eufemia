{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/components/modal/demos","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true},"tableOfContents":{"items":[{"url":"#demos","title":"Demos","items":[{"url":"#triggered-by-the-help-button","title":"Triggered by the help button"},{"url":"#help-button-and-suffix","title":"Help button and suffix"},{"url":"#drawer-mode","title":"Drawer mode"},{"url":"#fullscreen-modal-triggered-by-a-tertiary-button","title":"Fullscreen Modal, triggered by a tertiary button"},{"url":"#hide-the-close-button-and-prevent-close-for-1sec","title":"Hide the Close Button and Prevent Close for 1sec"},{"url":"#open-modal-by-state-only","title":"Open Modal by state only"},{"url":"#close-modal-by-handlers","title":"Close Modal by handlers"},{"url":"#progressindicator-inside-a-modal","title":"ProgressIndicator inside a Modal"}]}]},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Demos\"), mdx(\"h3\", null, \"Triggered by the help button\"), mdx(ComponentBox, {\n    \"data-visual-test\": \"modal-trigger-default\",\n    mdxType: \"ComponentBox\"\n  },\n  /* @jsx */\n  \"\\n<Modal title=\\\"Modal Title\\\">\\n  <Modal.Inner spacing style_type=\\\"mint-green\\\">\\n    <P>This is the modal text. Triggered by the help button.</P>\\n  </Modal.Inner>\\n</Modal>\\n\\t\"), mdx(\"h3\", null, \"Help button and suffix\"), mdx(\"p\", null, \"Most of the components do have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"suffix\"), \" property you can make use of.\"), mdx(ComponentBox, {\n    \"data-visual-test\": \"modal-help-button\",\n    mdxType: \"ComponentBox\"\n  },\n  /* @jsx */\n  \"\\n<Input\\n  label=\\\"Input\\\"\\n  placeholder=\\\"Placeholder ...\\\"\\n  suffix={\\n    <Modal>\\n      <Modal.Inner spacing style_type=\\\"pistachio\\\">\\n        <P>Help text</P>\\n      </Modal.Inner>\\n    </Modal>\\n  }\\n/>\\n\\t\"), mdx(\"h3\", null, \"Drawer mode\"), mdx(\"p\", null, \"With placement on the left side.\"), mdx(ComponentBox, {\n    \"data-visual-test\": \"modal-drawer\",\n    mdxType: \"ComponentBox\"\n  },\n  /* @jsx */\n  \"\\n<Modal\\n  mode=\\\"drawer\\\"\\n  title=\\\"Drawer Title\\\"\\n  trigger_text=\\\"Open Drawer\\\"\\n  trigger_title=\\\"Click me\\\"\\n>\\n  <Modal.Inner>\\n    <P>This is a left aligned Drawer content.</P>\\n  </Modal.Inner>\\n</Modal>\\n\\t\"), mdx(\"h3\", null, \"Fullscreen Modal, triggered by a tertiary button\"), mdx(ComponentBox, {\n    \"data-visual-test\": \"modal-fullscreen\",\n    mdxType: \"ComponentBox\"\n  },\n  /* @jsx */\n  \"\\n<Modal\\n  title={<span className=\\\"dnb-sr-only\\\">\\\"Hidden\\\" Modal title</span>}\\n  fullscreen=\\\"true\\\"\\n  trigger_variant=\\\"tertiary\\\"\\n  trigger_text=\\\"Click me\\\"\\n  trigger_icon=\\\"bell\\\"\\n  modal_content=\\\"This is the modal text. Triggered by a tertiary button.\\\"\\n/>\\n\\t\"), mdx(\"h3\", null, \"Hide the Close Button and Prevent Close for 1sec\"), mdx(ComponentBox, {\n    mdxType: \"ComponentBox\"\n  },\n  /* @jsx */\n  \"\\n<Modal\\n  title=\\\"1s close delay\\\"\\n  trigger_text=\\\"Click me\\\"\\n  focus_selector=\\\".dnb-input__input:first-of-type\\\"\\n  prevent_close=\\\"true\\\"\\n  hide_close_button=\\\"true\\\"\\n  on_open={(e) => console.log('on_open', e)}\\n  on_close={(e) => console.log('on_close', e)}\\n  on_close_prevent={({ close, triggeredBy }) => {\\n    console.log('triggeredBy', triggeredBy)\\n    const timeout = setTimeout(close, 1e3)\\n    return () => clearTimeout(timeout) // clear timeout on unmount\\n  }}\\n>\\n  <P>This is a Modal Window with no close button.</P>\\n  <P>Click outside me, and I will be closed within 1 second.</P>\\n  <Section top spacing style_type=\\\"divider\\\">\\n    <Input label=\\\"Focus:\\\">Focus me with Tab key</Input>\\n  </Section>\\n</Modal>\\n\\t\"), mdx(\"h3\", null, \"Open Modal by state only\"), mdx(\"p\", null, \"While the trigger button is not used anymore by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"trigger_hidden\"), \".\"), mdx(ComponentBox, {\n    mdxType: \"ComponentBox\"\n  },\n  /* @jsx */\n  \"\\n<Button\\n  id=\\\"custom-triggerer\\\"\\n  text=\\\"Custom trigger Button\\\"\\n  on_click={() => (\\n    <Modal\\n      title=\\\"Modal Title\\\"\\n      trigger_hidden\\n      open_state=\\\"opened\\\"\\n      //labelled_by=\\\"custom-triggerer\\\"\\n    >\\n      <Section spacing style_type=\\\"divider\\\">\\n        <P>This Modal was opened by a custom trigger button.</P>\\n      </Section>\\n    </Modal>\\n  )}\\n/>\\n\\t\"), mdx(\"h3\", null, \"Close Modal by handlers\"), mdx(\"p\", null, \"With a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"max_width\"), \" of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"40rem\"), \".\"), mdx(ComponentBox, {\n    mdxType: \"ComponentBox\"\n  },\n  /* @jsx */\n  \"\\n<Modal\\n  title=\\\"Auto close\\\"\\n  trigger_text=\\\"Click me\\\"\\n  align_content=\\\"center\\\"\\n  max_width=\\\"40rem\\\"\\n  close_modal={close => {\\n    const timeout = setTimeout(close, 3e3)\\n    return () => clearTimeout(timeout) // clear timeout on unmount\\n  }}\\n>\\n  <Section spacing style_type=\\\"emerald-green\\\">\\n    <P>This Modal will close in 3 seconds.</P>\\n  </Section>\\n</Modal>\\n\\t\"), mdx(\"h3\", null, \"ProgressIndicator inside a Modal\"), mdx(\"p\", null, \"Also, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fullscreen\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spacing\"), \" is disabled and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"align_content\"), \" is centered.\"), mdx(ComponentBox, {\n    \"data-visual-test\": \"modal-no-spacing\",\n    mdxType: \"ComponentBox\"\n  },\n  /* @jsx */\n  \"\\n<Modal\\n  spacing={false}\\n  fullscreen={false}\\n  align_content=\\\"centered\\\"\\n  hide_close_button\\n  trigger_text=\\\"Show\\\"\\n  prevent_close={false}\\n  max_width=\\\"20rem\\\"\\n>\\n  <ProgressIndicator\\n    show_label\\n    label_direction=\\\"vertical\\\"\\n    top=\\\"large\\\"\\n    bottom=\\\"large\\\"\\n    size=\\\"large\\\"\\n  />\\n</Modal>\\n\\t\"));\n}\n;\nMDXContent.isMDXComponent = true;","children":[{"__typename":"Mdx","fields":{"slug":"uilib"},"frontmatter":{"title":"UI Library","menuTitle":null,"showTabs":null,"tabs":null,"hideTabs":null}},{"__typename":"Mdx","fields":{"slug":"uilib/components/modal"},"frontmatter":{"title":"Modal / Drawer","menuTitle":null,"showTabs":true,"tabs":null,"hideTabs":null}}]}},"pageContext":{"id":"2c948ecf-9669-5d0d-9dfb-d3f90db0adb2","prev":{"id":"4fdd81d5-d39b-5ce0-bb4e-4f815b843053","fields":{"slug":"uilib/components/logo/info"}},"next":{"id":"b2412cbf-684a-5850-9983-ef6915ba34af","fields":{"slug":"uilib/components/logo/properties"}}}},"staticQueryHashes":["2315317908","3433733815","786658678"]}