{
    "componentChunkName": "component---src-templates-mdx-js",
    "path": "/uilib/components/modal/info",
    "result": {"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"uilib/components/modal/info","frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null},"tableOfContents":{"items":[{"url":"#description","title":"Description","items":[{"url":"#behavior","title":"Behavior"},{"url":"#help-button","title":"Help button"},{"url":"#accessibility","title":"Accessibility"},{"url":"#structure-and-content","title":"Structure and content"},{"url":"#what-is-it","title":"What is it"},{"url":"#disadvantages-of-modal-dialogs","title":"Disadvantages of modal Dialogs"},{"url":"#guidelines","title":"Guidelines","items":[{"url":"#nested-modals","title":"Nested modals"}]},{"url":"#design-patterns","title":"Design Patterns"}]},{"url":"#root-element","title":"Root Element","items":[{"url":"#z-index","title":"Z-index"},{"url":"#data-dnb-modal-active","title":"data-dnb-modal-active"}]},{"url":"#the-drawer-mode","title":"The Drawer mode","items":[{"url":"#drawer-content-wrapper","title":"Drawer content wrapper"},{"url":"#drawer-bar-and-header","title":"Drawer bar and header"}]},{"url":"#sizing-and-spacing","title":"Sizing and spacing"}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Description\"), mdx(\"p\", null, \"NB! Modal dialogs interrupt users and demand an action. They are appropriate when user\\u2019s attention needs to be directed toward important information.\"), mdx(\"h3\", null, \"Behavior\"), mdx(\"p\", null, \"The modal can be triggered from either a button or by using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"open_state\"), \" property. Triggering a modal will activate the opaque overlay and display the contents.\"), mdx(\"h3\", null, \"Help button\"), mdx(\"p\", null, \"As the Modal is very often used in combination with other components and often as a enhancement of contextual content, it comes with a trigger button (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/help-button\"\n  }, \"HelpButton\"), \") with a question mark icon by default. You can for sure disable that behavior by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"trigger_hidden=\\\"true\\\"\"), \".\"), mdx(\"p\", null, \"You can also used the broadly available \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"suffix\"), \" property, like so:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Input\\n  label=\\\"Input\\\"\\n  placeholder=\\\"Placeholder ...\\\"\\n  suffix={<HelpButton>Help text</HelpButton>}\\n/>\\n\")), mdx(\"h3\", null, \"Accessibility\"), mdx(\"p\", null, \"In order to make modals accessible, a lot of things are considered.\"), mdx(\"p\", null, \"Entering a Modal / Drawer will:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Set focus on the heading or close button.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Enable escape key listener.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Invalidate every DOM element outside of the Modal / Drawer, so they are not accessible to keyboard and screen reader users. For doing that, there is a \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/uilib/helpers/functions#interactioninvalidation-example\"\n  }, \"helper function\"), \" to be used in your application as well.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Disable the body scroll possibility.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Make the Modal / Drawer scrollable if needed.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Dim the body / background with an overlay\")), mdx(\"h3\", null, \"Structure and content\"), mdx(\"p\", null, \"Typically an opaque cover over the main content (fullscreen) and a small centered box containing information and interactive elements (buttons, forms etc.)\"), mdx(\"h3\", null, \"What is it\"), mdx(\"p\", null, \"Modal dialogs appear on top of the main content changing the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"mode\"), \" of the system into a special mode requiring user interaction. The main content is disabled until the user interacts with the modal dialog.\"), mdx(\"h3\", null, \"Disadvantages of modal Dialogs\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"They require immediate attention\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"They interrupt users\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"They cause users to forget what they were doing\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"They add extra goals - reading, interacting and closing the Modal\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"They block the content in the background\")), mdx(\"h3\", null, \"Guidelines\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use for important warnings as a way to prevent or correct critical errors.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Do not use for unessential information that is not related to the users current workflow.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use for requesting the user to enter information critical to the current process.\")), mdx(\"h4\", null, \"Nested modals\"), mdx(\"p\", null, \"While it is possible to nest a Modal within another Modal, You as a developer has to ensure the Browsers back-button (alongside with the URL path), does take care of the nested Modal situation. Because a user should still be able to use the back button as expected and return to the last visited \\\"page\\\".\"), mdx(\"h3\", null, \"Design Patterns\"), mdx(InlineImg, {\n    src: ModalExample,\n    caption: \"Modal with header, text and close button (spacing suggestions in blue and pink)\",\n    alt: \"Image showing Modal with header\",\n    mdxType: \"InlineImg\"\n  }), mdx(InlineImg, {\n    src: ModalExampleButtons,\n    caption: \"Modal with header, text, buttons and close button\",\n    alt: \"Image showing Modal with header and close button\",\n    mdxType: \"InlineImg\"\n  }), mdx(\"h2\", null, \"Root Element\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NB:\"), \" If the wrapper is not set manually, a wrapper is inserted automatically as a child node to the body.\"), mdx(\"p\", null, \"To make sure the HTML structure is decoupled from all the page content, You can optionally define a wrapper div like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<div class=\\\"dnb-modal-root\\\" />\"), \".\"), mdx(\"p\", null, \"Just place this as a sibling of Your App root HTML element. This ensures that we always can stack the modal content above the App Content.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<body>\\n  <div id=\\\"app\\\" />\\n  <div id=\\\"dnb-modal-root\\\" />\\n</body>\\n\")), mdx(\"h3\", null, \"Z-index\"), mdx(\"p\", null, \"The Modal component is using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"3000\"), \" as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"z-index\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \":root {\\n  --modal-z-index: 3000;\\n}\\n\")), mdx(\"h3\", null, \"data-dnb-modal-active\"), mdx(\"p\", null, \"When a Modal / Drawer is open, it will set a HTML attribute on the main HTML Element called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data-dnb-modal-active\"), \". The attribute value will be the ID of the current Modal / Drawer.\"), mdx(\"p\", null, \"This can be used to handle z-index issues from within CSS only:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \"html[data-dnb-modal-active='MODAL-ID'] {\\n  /* Your css */\\n}\\n\")), mdx(\"h2\", null, \"The Drawer mode\"), mdx(\"p\", null, \"The modal comes with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"drawer\"), \" mode. The drawer is made to be used in different content usage than the modal. Typically in context interactions.\"), mdx(\"h3\", null, \"Drawer content wrapper\"), mdx(\"p\", null, \"In order to make it easier to have another colored area below the title, you can make use of the extra wrapper \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Modal.Content>\"), \". Underneath, the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/section\"\n  }, \"Section\"), \" is used, but with the color \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"black-3\"), \" as default. This extra \\\"section\\\" is also customized to work together with the Modal and Drawer component.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Modal mode=\\\"drawer\\\">\\n  <Modal.Content>Drawer Content</Modal.Content>\\n</Modal>\\n\")), mdx(\"h3\", null, \"Drawer bar and header\"), mdx(\"p\", null, \"You can provide a custom content to both the drawer bar and header. You can provide it either as a React property (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bar_content\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"header_content\"), \"), or by markup.\"), mdx(\"p\", null, \"You may want to provide the title heading as a property. But if you need to, you can also provide a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<H1 />\"), \" Eufemia Component inside the header.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Modal mode=\\\"drawer\\\" title=\\\"Heading title\\\">\\n  <Modal.Bar>Drawer Bar Content</Modal.Bar>\\n  <Modal.Header>Drawer Header Content</Modal.Header>\\n  <Modal.Content>Drawer Content</Modal.Content>\\n</Modal>\\n\")), mdx(\"p\", null, \"See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/modal#drawer-mode-with-custom-header\"\n  }, \"demo\"), \" for more details.\"), mdx(\"h2\", null, \"Sizing and spacing\"), mdx(\"p\", null, \"You have the properties \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"min_width\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"max_width\"), \". But by using these, the width styles get injected inline, which normal circumstances works fine. But in case you want to set it by CSS, you can do so:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \"/* Change the Modal size  */\\n.dnb-modal__content__inner {\\n  min-width: 20vw;\\n  max-width: 40rem;\\n}\\n\\n/* Change the Modal spacing  */\\n:root {\\n  /* Defaults to --spacing-large */\\n  --modal-spacing: var(--spacing-small);\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"uilib/components/modal","frontmatter":{"menuTitle":null,"title":"Modal / Drawer","description":"Modal dialogs appear on top of the main content changing the mode of the system into a special mode requiring user interaction","fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null}},{"slug":"uilib/components","frontmatter":{"menuTitle":null,"title":"Components","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"uilib","frontmatter":{"menuTitle":null,"title":"UI Library","description":"Buttons, dropdowns, input fields, components etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"b0b7f996-aee0-5b5e-a26c-b70325c9bb71","slug":"uilib/components/modal/info","prev":{"id":"4487caaf-fc5c-5b83-89e5-c2820c8c12a0","slug":"uilib/components/modal/events"},"next":{"id":"78d7cf7d-dd71-518f-84e6-aaac6083beb8","slug":"uilib/components/modal/properties"}}},
    "staticQueryHashes": ["2315317908","3001307379","573224243"]}