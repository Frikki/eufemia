{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/components/modal/info/","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"uilib/components/modal/info","frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null},"tableOfContents":{"items":[{"url":"#description","title":"Description","items":[{"url":"#behavior","title":"Behavior"},{"url":"#help-button","title":"Help button"},{"url":"#accessibility","title":"Accessibility"},{"url":"#structure-and-content","title":"Structure and content"},{"url":"#what-is-it","title":"What is it"},{"url":"#disadvantages-of-modal","title":"Disadvantages of Modal"},{"url":"#guidelines","title":"Guidelines","items":[{"url":"#nested-modals","title":"Nested modals"}]}]},{"url":"#root-element","title":"Root Element","items":[{"url":"#z-index","title":"Z-index"},{"url":"#data-dnb-modal-active","title":"data-dnb-modal-active"}]}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Description\"), mdx(\"p\", null, \"Modal is the root component for \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/drawer\"\n  }, \"Drawer\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/dialog\"\n  }, \"Dialog\"), \". If one of these satisfy your needs, you probably want to use those rather than directly using Modal. It is possible to implement other modal variants using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mode=\\\"custom\\\"\"), \". The new Modal is backward compatible with the previous Modal version using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mode=\\\"dialog\\\"\"), \" (default) or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mode=\\\"drawer\\\"\"), \". The old documentation for Modal can be viewed in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/modal/modal-v1\"\n  }, \"Previous Modal (v1)\"), \".\"), mdx(\"p\", null, \"NB! Modal dialogs interrupt users and demand an action. They are appropriate when the user\\u2019s attention needs to be directed toward important information.\"), mdx(\"h3\", null, \"Behavior\"), mdx(\"p\", null, \"The modal can be triggered from either a button or by using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"open_state\"), \" property. Triggering a modal will activate the opaque overlay and display the contents.\"), mdx(\"h3\", null, \"Help button\"), mdx(\"p\", null, \"As the Modal is very often used in combination with other components and often as an enhancement of contextual content, it comes with a trigger button (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/help-button\"\n  }, \"HelpButton\"), \") with a question mark icon by default. You can for sure disable that behavior by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"omitTriggerButton={true}\"), \".\"), mdx(\"p\", null, \"You can also used the broadly available \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"suffix\"), \" property, like so:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Input\\n  label=\\\"Input\\\"\\n  placeholder=\\\"Placeholder ...\\\"\\n  suffix={<HelpButton>Help text</HelpButton>}\\n/>\\n\")), mdx(\"h3\", null, \"Accessibility\"), mdx(\"p\", null, \"In order to make modals accessible, a lot of things are considered.\"), mdx(\"p\", null, \"Entering a Modal (all variants) will:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Set focus on the heading or close button.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Enable escape key listener.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Invalidate every DOM element outside of the Modal / Drawer, so they are not accessible to keyboard and screen reader users. For doing that, there is a \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/uilib/helpers/functions#interactioninvalidation-example\"\n  }, \"helper function\"), \" to be used in your application as well.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Disable the body scroll possibility.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Make the Modal / Drawer scrollable if needed.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Dim the body / background with an overlay\")), mdx(\"h3\", null, \"Structure and content\"), mdx(\"p\", null, \"Typically an opaque cover over the main content (fullscreen) and a small centered box containing information and interactive elements (buttons, forms etc.)\"), mdx(\"h3\", null, \"What is it\"), mdx(\"p\", null, \"Modal dialogs appear on top of the main content changing the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"mode\"), \" of the system into a special mode requiring user interaction. The main content is disabled until the user interacts with the modal dialog.\"), mdx(\"h3\", null, \"Disadvantages of Modal\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"They require immediate attention\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"They interrupt users\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"They cause users to forget what they were doing\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"They add extra goals - reading, interacting, and closing the Modal\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"They block the content in the background\")), mdx(\"h3\", null, \"Guidelines\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use for important warnings as a way to prevent or correct critical errors.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Do not use for unessential information that is not related to the user's current workflow.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use for requesting the user to enter information critical to the current process.\")), mdx(\"h4\", null, \"Nested modals\"), mdx(\"p\", null, \"While it is possible to nest a Modal within another Modal, you as a developer have to ensure the Browsers back-button (alongside the URL path), does take care of the nested Modal situation. Because a user should still be able to use the back button as expected and return to the last visited \\\"page\\\".\"), mdx(\"h2\", null, \"Root Element\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NB:\"), \" If the wrapper is not set manually, a wrapper is inserted automatically as a child node to the body.\"), mdx(\"p\", null, \"To make sure the HTML structure is decoupled from all the page content, you can optionally define a wrapper div like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<div class=\\\"dnb-modal-root\\\" />\"), \".\"), mdx(\"p\", null, \"Just place this as a sibling of your app root HTML element. This ensures that we always can stack the modal content above the App Content.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<body>\\n  <div id=\\\"app\\\" />\\n  <div id=\\\"dnb-modal-root\\\" />\\n</body>\\n\")), mdx(\"h3\", null, \"Z-index\"), mdx(\"p\", null, \"The Modal component is using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"3000\"), \" as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"z-index\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \":root {\\n  --modal-z-index: 3000;\\n}\\n\")), mdx(\"h3\", null, \"data-dnb-modal-active\"), mdx(\"p\", null, \"When a Modal / Drawer is open, it will set an HTML attribute on the main HTML Element called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data-dnb-modal-active\"), \". The attribute value will be the ID of the current Modal / Drawer.\"), mdx(\"p\", null, \"This can be used to handle z-index issues from within CSS only:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \"html[data-dnb-modal-active='MODAL-ID'] {\\n  /* Your css */\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"uilib/components/modal","frontmatter":{"menuTitle":null,"title":"Modal","description":"Modal dialogs appear on top of the main content changing the mode of the system into a special mode requiring user interaction.","fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null}},{"slug":"uilib/components","frontmatter":{"menuTitle":null,"title":"Components","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"uilib","frontmatter":{"menuTitle":null,"title":"UI Library","description":"Buttons, dropdowns, input fields, components etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"b0b7f996-aee0-5b5e-a26c-b70325c9bb71","slug":"uilib/components/modal/info","prev":{"id":"9e7207e2-ba7f-56f1-bf2d-eb17d7878626","slug":"uilib/components/modal/modal-v1","frontmatter":{"title":"Modal V1","description":null}},"next":{"id":"4487caaf-fc5c-5b83-89e5-c2820c8c12a0","slug":"uilib/components/modal/events","frontmatter":{"title":"","description":null}}}},"staticQueryHashes":["2315317908","3001504130","573224243"]}