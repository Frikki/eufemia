{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/components/modal/modal-info-details","result":{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"","description":null,"fullscreen":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"draft\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\n\nvar MDXLayout = function MDXLayout(_ref) {\n  var children = _ref.children;\n  return !(typeof window !== 'undefined' && window.IS_TEST) && children || mdx(React.Fragment, null);\n};\n\nreturn function MDXContent(_ref2) {\n  var components = _ref2.components,\n      props = _objectWithoutProperties(_ref2, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Description\"), mdx(\"p\", null, \"NB! Modal dialogs interrupt users and demand an action. They are appropriate when user\\u2019s attention needs to be directed toward important information.\"), mdx(\"h3\", null, \"Behavior\"), mdx(\"p\", null, \"The modal can be triggered from either a button or by using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"open_state\"), \" property. Triggering a modal will activate the opaque overlay and display the contents.\"), mdx(\"h3\", null, \"Structure and content\"), mdx(\"p\", null, \"Typically an opaque cover over the main content (fullscreen) and a small centered box containing information and interactive elements (buttons, forms etc.)\"), mdx(\"h3\", null, \"What is it\"), mdx(\"p\", null, \"Modal dialogs appear on top of the main content changing the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"mode\"), \" of the system into a special mode requiring user interaction. The main content is disabled until the user interacts with the modal dialog.\"), mdx(\"h3\", null, \"Disadvantages of modal Dialogs\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"They require immediate attention\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"They interrupt users\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"They cause users to forget what they were doing\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"They add extra goals - reading, interacting and closing the Modal\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"They block the content in the background\")), mdx(\"h3\", null, \"Guidelines\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use for important warnings as a way to prevent or correct critical errors.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Do not use for unessential information that is not related to the users current workflow.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use for requesting the user to enter information critical to the current process.\")), mdx(\"h3\", null, \"Design Patterns\"), mdx(Img, {\n    src: ModalExample,\n    caption: \"Modal with header, text and close button (spacing suggestions in blue and pink)\",\n    alt: \"Image showing Modal with header\",\n    mdxType: \"Img\"\n  }), mdx(Img, {\n    src: ModalExampleButtons,\n    caption: \"Modal with header, text, buttons and close button\",\n    alt: \"Image showing Modal with header and clsoe button\",\n    mdxType: \"Img\"\n  }), mdx(\"h2\", null, \"Root Element\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NB:\"), \" If the wrapper is not set manually, a wrapper is inserted automatically as a child node to the body.\"), mdx(\"p\", null, \"To make sure the HTML structure is decoupled from all the page content, You can optionally define a wrapper div like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<div class=\\\"dnb-modal-root\\\" />\"), \".\"), mdx(\"p\", null, \"Just place this as a sibling of Your App root HTML element. This ensures that we always can stack the modal content above the App Content.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<body>\\n  <div id=\\\"app\\\" />\\n  <div id=\\\"dnb-modal-root\\\" />\\n</body>\\n\")), mdx(\"h3\", null, \"Z-index\"), mdx(\"p\", null, \"The Modal component is using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"3000\"), \" as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"z-index\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \":root {\\n  --modal-z-index: 3000;\\n}\\n\")), mdx(\"h2\", null, \"Sizing and spacing\"), mdx(\"p\", null, \"You have the properties \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"min_width\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"max_width\"), \". But by using these, the width styles get injected inline, witch normal circumstances works fine. But in case you want to set it by CSS, you can do so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"/* Change the Modal size  */\\n.dnb-modal__content__inner {\\n  min-width: 20vw;\\n  max-width: 40rem;\\n}\\n/* Change the Modal spacing  */\\n:root {\\n  /* Defaults to --spacing-large */\\n  --modal-spacing: var(--spacing-small);\\n}\\n\")), mdx(\"h2\", null, \"Styles and \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"dnb-core-style\")), mdx(\"p\", null, \"The Modal component comes with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dnb-core-style\"), \" class predefined by default. If you don't want this behavior because of e.g. CSS specificity, you can opt out by setting this property \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prevent_core_style=\\\"true\\\"\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/* The CSS class is set by default */\\n<Modal className=\\\"dnb-core-style\\\">...</Modal>\\n\\n/* You have the option to set it like this as well */\\n<body>\\n  <div id=\\\"app\\\" />\\n  <div id=\\\"dnb-modal-root\\\" class=\\\"dnb-core-style\\\" />\\n</body>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"c3a08b2d-ea96-59cf-a356-2e8c78131fb9","prev":{"id":"327d8e51-0690-5d64-bff3-95677515337e","fields":{"slug":"uilib/components/modal/modal-properties"}},"next":{"id":"a7355e49-be47-528e-a071-d8a40df4b634","fields":{"slug":"uilib/components/number/number-examples"}}}}}