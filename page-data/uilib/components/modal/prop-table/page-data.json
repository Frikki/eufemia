{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/components/modal/prop-table/","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"uilib/components/modal/prop-table","frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null},"tableOfContents":{},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Properties\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"id\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" The id used internal for the trigger button and Modal component.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"rootId\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"root_id\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" The id used internal in the modal root element. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"root\"), \", so the element id will be \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"dnb-modal-root\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"contentId\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"content_id\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" Defines an unique identifier to a modal. Use it in case you have to refer in some way to the modal content.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"labelledBy\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"labelled_by\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" The ID of the trigger component, describing the modal content. Defaults to the internal \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"trigger\"), \", so make sure You define the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"title\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"triggerAttributes\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"children\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" the content which will appear when triggering open the modal. Make sure you set \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"mode=\\\"custom\\\"\"), \" to enable custom modal content. If mode is not set, the children will be sent to the \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/uilib/components/dialog\"\n  }, \"Dialog\"), \" component.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"fullscreen\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" If set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" then the modal content will be shown as fullscreen, without showing the original content behind. Can be set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \" to omit the auto fullscreen. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"auto\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"openState\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"open_state\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" use this prop to control the open/close state by setting either: \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"opened\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"closed\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"openDelay\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"open_delay\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" forces the modal to delay the opening. The delay is given in \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ms\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"disabled\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" Will disable the trigger button\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"noAnimation\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"no_animation\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" if set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", no open/close animation will be shown. Defaults to false.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"noAnimationOnMobile\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"no_animation_on_mobile\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" same as \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"noAnimation\"), \", but gets triggered only if the viewport width is less than \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"40em\"), \". Defaults to false.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"animationDuration\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"animation_duration\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" Duration of animation open/close in ms. Defaults to 300ms.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"preventClose\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"prevent_close\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" if set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" (boolean or string), then the user can't close the modal.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"preventOverlayClose\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"prevent_overlay_close\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" Disable clicking the background overlay to close the modal. PS! Pressing \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"esc\"), \" key will still close the modal.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"openModal\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"open_modal\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" set a function to call the callback function, once the modal should open: \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"open_modal={(open) => open()}\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"closeModal\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"close_modal\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" set a function to call the callback function, once the modal should close: \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"close_modal={(close) => close()}\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"focusSelector\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"focus_selector\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" The Modal handles the first focus \\u2013 automatically. However, you can define a custom focus selector the will be used instead \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"focusSelector=\\\".css-selector\\\"\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"overlayClass\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"overlay_class\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" give the page overlay a custom class name (maps to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"dnb-modal__overlay\"), \").\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"contentClass\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"content_class\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" give the content wrapper a custom class name (maps to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"dnb-modal__content\"), \").\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"omitTriggerButton\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"omit_trigger_button\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" omits default showing trigger button.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"trigger\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" provide a custom trigger component. Like \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"trigger={<Anchor href=\\\"/\\\" />}\"), \". It will set the focus on it when the modal gets closed.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"triggerAttributes\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"trigger_attributes\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" send along with custom HTML attributes or properties to the trigger button.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"dialogTitle\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"dialog_title\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" The aria label of the dialog when no labelled_by and no title is given. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Vindu\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"directDomReturn\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"direct_dom_return\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" If truthy, the modal will not open in a new DOM but directly in current DOM. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \". Be aware of the side effects of setting this property to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"bypassInvalidationSelectors\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"bypass_invalidation_selectors\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" Define an array with HTML class selectors (\", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"['.element-selector']\"), \") which should not get invalidated when the modal opens/closes. Use this in order to let some parts of your site still be accessible by screen readers.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"scrollRef\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" To get the scroll Element, pass in your own React ref.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"contentRef\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" To get the inner content Element, pass in your own React ref.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/uilib/components/space/properties\"\n  }, \"Space\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" spacing properties like \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"top\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"bottom\"), \" are supported.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"mode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(deprecated/optional)\"), \" the modal mode. Can be set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"dialog\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"drawer\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"custom\"), \". Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"dialog\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"spacing\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(deprecated/optional)\"), \" if set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \" then the modal content will be shown without any spacing. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"closeTitle\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"close_title\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(deprecated/optional)\"), \" the title of the close button. Defaults to \", mdx(\"em\", {\n    parentName: \"td\"\n  }, \"Lukk\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"hideCloseButton\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(deprecated/optional)\"), \" if truthy, the close button will not be shown.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"closeButtonAttributes\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(deprecated/optional)\"), \" define any valid Eufemia Button property or HTML attribute inside an object.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"class\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(deprecated/optional)\"), \" give the inner content wrapper a class name (maps to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"dnb-modal__content__inner\"), \").\")))));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"uilib/components/modal","frontmatter":{"menuTitle":null,"title":"Modal","description":"Modal dialogs appear on top of the main content changing the mode of the system into a special mode requiring user interaction.","fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null}},{"slug":"uilib/components","frontmatter":{"menuTitle":null,"title":"Components","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"uilib","frontmatter":{"menuTitle":null,"title":"UI Library","description":"Buttons, dropdowns, input fields, components etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"b7ea1806-86e7-573a-a809-704b8fcd5570","slug":"uilib/components/modal/prop-table","prev":{"id":"e786eda8-9560-5535-b32c-89f1f91011a8","slug":"uilib/components/number-format/demos","frontmatter":{"title":"","description":null}},"next":{"id":"78d7cf7d-dd71-518f-84e6-aaac6083beb8","slug":"uilib/components/modal/properties","frontmatter":{"title":"","description":null}}}},"staticQueryHashes":["2315317908","3001504130","573224243"]}