{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/components/number-format/info","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true},"tableOfContents":{"items":[{"url":"#description","title":"Description","items":[{"url":"#supported-formats","title":"Supported formats"},{"url":"#defaults","title":"Defaults"},{"url":"#element-and-style","title":"Element and style"},{"url":"#sources","title":"Sources"}]},{"url":"#decimals","title":"Decimals"},{"url":"#details","title":"Details"},{"url":"#accessibility","title":"Accessibility"},{"url":"#formatting-only","title":"Formatting only"},{"url":"#using-number-helpers-like-cleannumber","title":"Using number helpers, like cleanNumber"},{"url":"#nodejs-and-ssr-usage","title":"Node.js and SSR usage"},{"url":"#provider","title":"Provider"},{"url":"#known-issues","title":"Known issues"}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true,\n  \"redirect_from\": [\"/uilib/components/number/info\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Description\"), mdx(\"p\", null, \"A ready to use DNB number formatter. Use it where over you have to display a number, a currency value, phone number etc.\"), mdx(\"p\", null, \"Good reasons for why we have this is to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"uniform the formation of numbers for all DNB applications.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"and make numbers accessible to screen readers.\")), mdx(\"h3\", null, \"Supported formats\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Numbers in general e.g. \", mdx(\"pre\", {\n    className: \"dnb-code\"\n  }, mdx(NumberFormat, {\n    value: \"12345678.90\",\n    mdxType: \"NumberFormat\"\n  }))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Currency e.g. \", mdx(\"pre\", {\n    className: \"dnb-code\"\n  }, mdx(NumberFormat, {\n    currency: true,\n    value: \"12345678.90\",\n    mdxType: \"NumberFormat\"\n  }))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Percentage e.g. \", mdx(\"pre\", {\n    className: \"dnb-code\"\n  }, mdx(NumberFormat, {\n    percent: true,\n    value: \"12.34\",\n    mdxType: \"NumberFormat\"\n  }))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Phone numbers e.g. \", mdx(\"pre\", {\n    className: \"dnb-code\"\n  }, mdx(NumberFormat, {\n    phone: true,\n    value: \"004799999999\",\n    mdxType: \"NumberFormat\"\n  }))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Bank account number e.g. \", mdx(\"pre\", {\n    className: \"dnb-code\"\n  }, mdx(NumberFormat, {\n    ban: true,\n    value: \"20001234567\",\n    mdxType: \"NumberFormat\"\n  }))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"National identification number e.g. \", mdx(\"pre\", {\n    className: \"dnb-code\"\n  }, mdx(NumberFormat, {\n    nin: true,\n    value: \"18089212345\",\n    mdxType: \"NumberFormat\"\n  }))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Organization number e.g. \", mdx(\"pre\", {\n    className: \"dnb-code\"\n  }, mdx(NumberFormat, {\n    org: true,\n    value: \"123456789\",\n    mdxType: \"NumberFormat\"\n  })))), mdx(\"h3\", null, \"Defaults\"), mdx(\"p\", null, \"It uses the browser APIs \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"number.toLocaleString\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Intl.NumberFormat.format\"), \" under the hood. As well as some custom formatter. The locale defaults to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Locale: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nb-NO\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Currency: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"NOK\"))), mdx(\"h3\", null, \"Element and style\"), mdx(\"p\", null, \"The number component is style independent, so it has no visual styles. By default a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<span>\"), \" is used (with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/speak-as\"\n  }, \"speak-as: numbers\"), \", even the support is very low). But you can easily change the element type by providing something else to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"element=\\\"div\\\"\"), \" property.\"), mdx(\"h3\", null, \"Sources\"), mdx(\"p\", null, \"Eufemia is basing their number formats on both the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://lovdata.no/forskrift/2004-02-16-426/%C2%A716\"\n  }, \"Norwegian authority\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.sprakradet.no/sprakhjelp/Skriveregler/Dato\"\n  }, \"Spr\\xE5kradet\"), \". Wikipedia has more info on world wide \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Decimal_separator\"\n  }, \"decimal separator\"), \" usage.\"), mdx(\"p\", null, \"For international number formatting, we use the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ec.europa.eu/info/sites/default/files/styleguide_english_dgt_en.pdf\"\n  }, \"EU Style Guide\"), \".\"), mdx(\"h2\", null, \"Decimals\"), mdx(\"p\", null, \"When the amount of wanted \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"decimals\"), \" is set as a property, but the given value contains decimals which exceeds the wanted \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"decimals\"), \", the output value will get round up or down. Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"omit_rounding\"), \" if you need to hard-cut decimals from the displayed value.\"), mdx(\"h2\", null, \"Details\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Screen readers requires numbers to be formatted properly in order to be read as numbers. The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NumberFormat\"), \" component will help to achieve this requirement.\")), mdx(\"p\", null, \"So, numbers are formatted differently for screen readers than the visual number. And numbers also gets assigned a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lang\"), \" attribute, so the screen reader knows what language (locale) should be used on the particular number, even if the text around not corresponds to the same language.\"), mdx(\"h2\", null, \"Accessibility\"), mdx(\"p\", null, \"To enhance the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Copy & Paste\"), \" experience of copying numbers into other applications, the NumberFormat component automatically changes the number formatting to be without thousand separator and to have a dot, instead of a coma for the decimal separator.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NVDA\"), \" has also \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/nvaccess/nvda/issues/8874\"\n  }, \"issues\"), \" on reconciling the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lang\"), \" attribute, this makes it hard to have a solid and good working solution for reading numbers. VoiceOver on desktop makes a perfect job there.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"VoiceOver\"), \" on mobile devices (iOS) only supports numbers read out properly to a maximum of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"99,999.00\"), \". On amounts above this value, VO reads numbers digit by digit.\"), mdx(\"h2\", null, \"Formatting only\"), mdx(\"p\", null, \"You can use the formatting without using the Component. Have a look at the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/number-format/properties\"\n  }, \"available properties\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import { format } from '@dnb/eufemia/components/number-format/NumberUtils'\\n\\nconst value = 12345678.9\\n\\n// basic formatting\\nconst number = format(value)\\n\\n// by using returnAria you get an object\\nconst { number, aria } = format(value, {\\n  locale: 'nb-NO', // also inherited from the Provider\\n  currency: true,\\n  returnAria: true,\\n})\\n\")), mdx(\"h2\", null, \"Using number helpers, like cleanNumber\"), mdx(\"p\", null, \"You can use the clean helpers without using the Component. Have a look at the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/number-format/properties\"\n  }, \"available properties\"), \". Also, you may check out the related tests \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NumberFormat > cleanNumber\"), \" in the source code to find more examples.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import { cleanNumber } from '@dnb/eufemia/components/number-format/NumberUtils'\\n\\nconst string = cleanNumber('prefix -12 345,678 suffix') // returns -12345.678\\nconst string = cleanNumber('prefix -12.345,678 suffix') // returns -12345.678\\n\")), mdx(\"h2\", null, \"Node.js and SSR usage\"), mdx(\"p\", null, \"If you run the component or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"format\"), \" function in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://nodejs.org\"\n  }, \"Node.js\"), \" you have to include \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://nodejs.org/api/intl.html\"\n  }, \"ICU\"), \" data in order to display other locales than en-GB. You can do this by:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"installing \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"npm i full-icu\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"and call node (or jest) with an environment variable pointing to the package: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"NODE_ICU_DATA=./node_modules/full-icu node ...\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"after a Node.js version upgrade you may have to run \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"npm rebuild\"))), mdx(\"h2\", null, \"Provider\"), mdx(\"p\", null, \"You can send down the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"locale\"), \" as an application wide property (Context). More info about the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/number-format/provider\"\n  }, \"provider and locale usage\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import Provider from '@dnb/eufemia/shared/Provider'\\n\\nrender(\\n  <Provider locale=\\\"en-GB\\\" NumberFormat={{ currency_display: 'code' }}>\\n    <MyApp>\\n      text <NumberFormat>123</NumberFormat> table etc.\\n    </MyApp>\\n  </Provider>\\n)\\n\")), mdx(\"h2\", null, \"Known issues\"), mdx(\"p\", null, \"Edge Browser on Windows 10 is converting numbers automatically to followable links. This makes the experience on NVDA bad, as it reads also the new, unformatted link number.\"), mdx(\"p\", null, \"You can \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/x-ms-format-detection\"\n  }, \"disable this behavior\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<html x-ms-format-detection=\\\"none\\\">\\n  ...\\n</html>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","children":[{"fields":{"slug":"uilib"},"frontmatter":{"title":"UI Library","menuTitle":null,"showTabs":null,"tabs":null,"hideTabs":null}},{"fields":{"slug":"uilib/components/number-format"},"frontmatter":{"title":"NumberFormat","menuTitle":null,"showTabs":true,"tabs":[{"title":"Info","key":"/uilib/components/number-format/info$1"},{"title":"Demos","key":"/uilib/components/number-format/demos$1"},{"title":"Properties","key":"/uilib/components/number-format/properties$1"},{"title":"Provider","key":"/uilib/components/number-format/provider$1"}],"hideTabs":null}}]}},"pageContext":{"id":"29b3d8b4-500d-50ca-a4f8-722429ebb728","prev":{"id":"01d8ef85-d2ac-5b38-b171-e2180ae27c03","fields":{"slug":"uilib/components/modal/info"}},"next":{"id":"ee802411-29f3-55be-b5f6-e383412640e1","fields":{"slug":"uilib/components/number-format/demos"}}}},"staticQueryHashes":["2315317908","3433733815","786658678"]}