{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/components/pagination/events","result":{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Events\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Events\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"on_change\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" will be called for every page change, regardless if the mode is \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"mode=\\\"infinity\\\"\"), \" or not. Returns an object with number of useful properties and methods. Se below for more details.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"on_startup\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" Only on \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"infinity\"), \" mode. Will be called once the component is ready for interaction. Returns an object with number of useful properties and methods. Se below for more details. \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"NB:\"), \" Will be called again as soon as we reset the content by calling \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"resetContent()\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"on_load\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" Only on \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"infinity\"), \" mode. Will be called on every page interaction, also on the very first interaction. Returns an object with number of useful properties and methods. Se below for more details.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"on_end\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" Only on \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"infinity\"), \" mode. Will be called once \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"page_count\"), \" is reached or \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"endInfinity\"), \" was colled.\")))), mdx(\"h2\", null, \"Returned object\"), mdx(\"p\", null, \"Events has a number of useful methods to change / manipulate the content.\"), mdx(\"h3\", null, \"Pagination mode\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Pagination\\n  on_change={({ page, ...methods }) => {\\n    // ...\\n  }}\\n/>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"page\"), \" the current page number\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setContent\"), \" use it to add update a page including content: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setContent(pageNo, ReactComponent)\"))), mdx(\"h3\", null, \"Infinity mode\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Pagination\\n  mode=\\\"infinity\\\"\\n  on_change={({ page, ...methods }) => {\\n    // ...\\n  }}\\n/>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"page\"), \" the current page number\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setContent\"), \" use it to add update a page including content: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setContent(pageNo, ReactComponent, position = 'after')\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"endInfinity\"), \" use it to tell the infinity pagination to end the infinity scrolling interaction. Use this handler to end the infinity scrolling procedure, in case the page_count is unknown: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"endInfinity(pageNo)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"resetContent\"), \" use it to invalidate all internal pages: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"resetContent()\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"resetInfinity\"), \" use it to reset the internal pagination states: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"resetInfinity(pageNo = startup_page)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"items\"), \" internal stored pages\")));\n}\n;\nMDXContent.isMDXComponent = true;","children":[{"__typename":"Mdx","fields":{"slug":"uilib"},"frontmatter":{"title":"UI Library","menuTitle":null,"showTabs":null,"tabs":null,"hideTabs":null}},{"__typename":"Mdx","fields":{"slug":"uilib/components/pagination"},"frontmatter":{"title":"Pagination","menuTitle":null,"showTabs":true,"tabs":null,"hideTabs":null}}]}},"pageContext":{"id":"9906b9b9-bca6-5a73-81b4-2074d6e2deb4","prev":{"id":"4660afb6-12f3-504f-b609-2ef8c8e7104f","fields":{"slug":"uilib/components/pagination/demos"}},"next":{"id":"bbad45dc-f7f6-5afa-8270-68e52f530e1e","fields":{"slug":"uilib/components/progress-indicator/demos"}}}}}