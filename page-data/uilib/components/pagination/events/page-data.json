{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/components/pagination/events/","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"uilib/components/pagination/events","frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null},"tableOfContents":{"items":[{"url":"#events","title":"Events"},{"url":"#returned-object","title":"Returned object","items":[{"url":"#pagination-mode","title":"Pagination mode"},{"url":"#infinity-mode","title":"Infinity mode"}]}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Events\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Events\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"on_change\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" will be called for every page change, regardless if the mode is \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"mode=\\\"infinity\\\"\"), \" or not. Returns an object with number of useful properties and methods. See below for more details.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"on_startup\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" Only on \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"infinity\"), \" mode. Will be called once the component is ready for interaction. Returns an object with number of useful properties and methods. See below for more details. \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"NB:\"), \" Will be called again as soon as we reset the content by calling \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"resetContent()\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"on_load\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" Only on \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"infinity\"), \" mode. Will be called on every page interaction, also on the very first interaction. Returns an object with number of useful properties and methods. See below for more details.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"on_end\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" Only on \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"infinity\"), \" mode. Will be called once \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"page_count\"), \" is reached or \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"endInfinity\"), \" was called.\")))), mdx(\"h2\", null, \"Returned object\"), mdx(\"p\", null, \"Events have several useful methods to change / manipulate the content.\"), mdx(\"h3\", null, \"Pagination mode\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Pagination\\n  on_change={({ page, ...methods }) => {\\n    // ...\\n  }}\\n/>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"page\"), \" the current page number\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setContent\"), \" use it to add update a page including content: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setContent(pageNumber, ReactComponent)\"))), mdx(\"h3\", null, \"Infinity mode\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Pagination\\n  mode=\\\"infinity\\\"\\n  on_change={({ page, ...methods }) => {\\n    // ...\\n  }}\\n/>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"page\"), \" the current page number\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setContent\"), \" use it to add update a page including content: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setContent(pageNumber, ReactComponent, position = 'after')\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"endInfinity\"), \" use it to tell the infinity pagination to end the infinity scrolling interaction. Use this handler to end the infinity scrolling procedure, in case the page_count is unknown: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"endInfinity(pageNumber)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"resetContent\"), \" use it to invalidate all internal pages: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"resetContent()\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"resetInfinity\"), \" use it to reset the internal pagination states: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"resetInfinity(pageNumber = startup_page)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"items\"), \" internal stored pages\")));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"uilib/components/pagination","frontmatter":{"menuTitle":null,"title":"Pagination","description":"The Pagination component supports both classical pagination and infinity scrolling.","fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null}},{"slug":"uilib/components","frontmatter":{"menuTitle":null,"title":"Components","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"uilib","frontmatter":{"menuTitle":null,"title":"UI Library","description":"Buttons, dropdowns, input fields, components etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"8a2221c6-3ea3-574f-8ad0-23d0a8d8b472","slug":"uilib/components/pagination/events","prev":{"id":"914cda23-7b3b-5c59-a804-f321deb672f4","slug":"uilib/components/pagination/infinity-scroller","frontmatter":{"title":"InfinityScroller","description":"The InfinityScroller component is a mode of the Pagination component which loads content continuously as the user scrolls down the page."}},"next":{"id":"3006458d-e41e-532b-8432-2647e717210d","slug":"uilib/components/pagination/info","frontmatter":{"title":"","description":null}}}},"staticQueryHashes":["2315317908","3001504130","573224243"]}