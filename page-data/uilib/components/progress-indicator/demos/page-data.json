{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/components/progress-indicator/demos","result":{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Demos\"), mdx(\"h3\", null, \"Default Circular ProgressIndicator\"), mdx(ComponentBox, {\n    mdxType: \"ComponentBox\"\n  },\n  /* @jsx */\n  \"\\n<ProgressIndicator />\\n\\t\"), mdx(\"h3\", null, \"Circular ProgressIndicator with a label\"), mdx(ComponentBox, {\n    mdxType: \"ComponentBox\"\n  },\n  /* @jsx */\n  \"\\n<ProgressIndicator\\n  // label=\\\"Custom label ...\\\"\\n  show_label=\\\"true\\\"\\n  label_direction=\\\"horizontal\\\"\\n/>\\n\\t\"), mdx(\"h3\", null, \"Shows a large Circular ProgressIndicator with a static 50% in progress\"), mdx(ComponentBox, {\n    \"data-visual-test\": \"progress-indicator-circular--primary\",\n    mdxType: \"ComponentBox\"\n  },\n  /* @jsx */\n  \"\\n<ProgressIndicator\\n  type=\\\"circular\\\"\\n  progress=\\\"50\\\"\\n  size=\\\"large\\\"\\n  no_animation\\n/>\\n\\t\"), mdx(\"h3\", null, \"ProgressIndicator with random value\"), mdx(ComponentBox, {\n    useRender: true,\n    mdxType: \"ComponentBox\"\n  },\n  /* @jsx */\n  \"\\nconst ChangeValue = () => {\\n\\tconst [value, setValue] = React.useState(50)\\n\\treturn (\\n\\t\\t<FormRow centered>\\n\\t\\t\\t<ProgressIndicator\\n\\t\\t\\t\\tprogress={value}\\n\\t\\t\\t\\tshow_label\\n\\t\\t\\t\\tno_animation\\n\\t\\t\\t/>\\n\\t\\t\\t<Button\\n\\t\\t\\t\\tleft\\n\\t\\t\\t\\tsize=\\\"small\\\"\\n\\t\\t\\t\\tvariant=\\\"secondary\\\"\\n\\t\\t\\t\\tonClick={() => setValue(Math.random()*100)}\\n\\t\\t\\t>\\n\\t\\t\\t\\tChange\\n\\t\\t\\t</Button>\\n\\t\\t</FormRow>\\n\\t)\\n}\\nrender(<ChangeValue />)\\n\\t\"), mdx(\"h3\", null, \"ProgressIndicator with random progress value to show the transition\"), mdx(ComponentBox, {\n    noFragments: false,\n    mdxType: \"ComponentBox\"\n  },\n  /* @jsx */\n  \"\\n() => {\\n  const random = (min, max) => (Math.floor( Math.random () * (max - min + 1)) + min)\\n  const [progress, setProgressIndicator] = React.useState(random(1, 100))\\n  React.useEffect(() => {\\n    const timer = setInterval(() => setProgressIndicator(random(1, 100)), 1e3)\\n    return () => clearInterval(timer)\\n  })\\n  return (\\n    <ProgressIndicator\\n      size=\\\"large\\\"\\n      progress={progress}\\n    />\\n  )\\n}\\n\\t\"), mdx(\"h3\", null, \"ProgressIndicator with random \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"on_complete\"), \" callback\"), mdx(ComponentBox, {\n    noFragments: false,\n    mdxType: \"ComponentBox\"\n  },\n  /* @jsx */\n  \"\\n() => {\\n  const random = (min, max) => (Math.floor( Math.random () * (max - min + 1)) + min)\\n  const [visible, setVisibe] = React.useState(true)\\n  React.useEffect(() => {\\n    const timer = setInterval(() => setVisibe(!visible), random(2400, 4200))\\n    return () => clearTimeout(timer)\\n  })\\n  return (\\n    <ProgressIndicator\\n      size=\\\"large\\\"\\n      visible={visible}\\n      on_complete={() => {\\n        console.log('on_complete')\\n      }}\\n    />\\n  )\\n}\\n\\t\"), mdx(\"h3\", null, \"ProgressIndicator inside a Modal\"), mdx(ComponentBox, {\n    mdxType: \"ComponentBox\"\n  },\n  /* @jsx */\n  \"\\n<Modal\\n  spacing={false}\\n  max_width=\\\"12rem\\\"\\n  fullscreen={false}\\n  align_content=\\\"centered\\\"\\n  hide_close_button\\n  trigger_text=\\\"Show\\\"\\n  prevent_close={false}\\n>\\n  <ProgressIndicator\\n    show_label\\n    label_direction=\\\"vertical\\\"\\n    top=\\\"large\\\"\\n    bottom=\\\"large\\\"\\n    size=\\\"large\\\"\\n  />\\n</Modal>\\n\\t\"));\n}\n;\nMDXContent.isMDXComponent = true;","children":[{"__typename":"Mdx","fields":{"slug":"uilib"},"frontmatter":{"title":"UI Library","menuTitle":null,"showTabs":null,"tabs":null,"hideTabs":null}},{"__typename":"Mdx","fields":{"slug":"uilib/components/progress-indicator"},"frontmatter":{"title":"ProgressIndicator","menuTitle":null,"showTabs":true,"tabs":null,"hideTabs":null}}]}},"pageContext":{"id":"bbad45dc-f7f6-5afa-8270-68e52f530e1e","prev":{"id":"f30ab88f-2b8b-5cf3-8648-d14eaafd5d80","fields":{"slug":"uilib/components/pagination/properties"}},"next":{"id":"324f73ce-90cc-501a-ae02-4938e57801e6","fields":{"slug":"uilib/components/progress-indicator/properties"}}}},"staticQueryHashes":["2315317908","3433733815","786658678"]}