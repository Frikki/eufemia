{
    "componentChunkName": "component---src-templates-mdx-js",
    "path": "/uilib/components/skeleton/demos",
    "result": {"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"uilib/components/skeleton/demos","frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null},"tableOfContents":{"items":[{"url":"#demos","title":"Demos"},{"url":"#input-with-skeleton","title":"Input with Skeleton"},{"url":"#toggle-skeleton-onoff","title":"Toggle skeleton on/off"},{"url":"#skeleton-wrapper","title":"Skeleton wrapper"},{"url":"#skeleton-using-eufemia-provider","title":"Skeleton using Eufemia Provider"},{"url":"#skeleton-figures","title":"Skeleton figures"}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar SkeletonVisualTests = function SkeletonVisualTests() {\n  if (!(typeof window !== 'undefined' && window.IS_TEST)) {\n    return mdx(React.Fragment, null);\n  }\n\n  return mdx(React.Fragment, null, mdx(ComponentBox, {\n    \"data-visual-test\": \"skeleton-all-horizontal\",\n    scope: {\n      AllComponents: AllComponents\n    },\n    mdxType: \"ComponentBox\"\n  }, \"\\n\\t\\t\\t<FormRow>\\n\\t\\t\\t\\t<Skeleton show no_animation>\\n\\t\\t\\t\\t\\t<AllComponents />\\n\\t\\t\\t\\t</Skeleton>\\n\\t\\t\\t</FormRow>\\n\\t\\t\\t\"), mdx(ComponentBox, {\n    \"data-visual-test\": \"skeleton-all-vertical\",\n    scope: {\n      AllComponents: AllComponents\n    },\n    mdxType: \"ComponentBox\"\n  }, \"\\n\\t\\t\\t<FormRow vertical=\\\"true\\\">\\n\\t\\t\\t\\t<Skeleton show no_animation>\\n\\t\\t\\t\\t\\t<AllComponents />\\n\\t\\t\\t\\t</Skeleton>\\n\\t\\t\\t</FormRow>\\n\\t\\t\\t\"));\n};\n\nvar _frontmatter = {\n  \"showTabs\": true\n};\nvar layoutProps = {\n  SkeletonVisualTests: SkeletonVisualTests,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Demos\"), mdx(PortalSkeleton, {\n    mdxType: \"PortalSkeleton\"\n  }), mdx(\"h2\", null, \"Input with Skeleton\"), mdx(ComponentBox, {\n    mdxType: \"ComponentBox\"\n  }, \"\\n<Input label=\\\"Input\\\" skeleton />\\n\"), mdx(\"h2\", null, \"Toggle skeleton on/off\"), mdx(ComponentBox, {\n    \"data-visual-test\": \"skeleton-exclude\",\n    useRender: true,\n    mdxType: \"ComponentBox\"\n  }, \"\\nconst UserData = () => {\\n\\tconst [state, setState] = React.useState(true)\\n\\treturn (\\n\\t\\t<Skeleton show={state}>\\n\\t\\t\\t<H2 top bottom>Heading</H2>\\n\\t\\t\\t<P top bottom>Paragraph Non habitasse ut nisi dictum laoreet ridiculus dui.</P>\\n\\t\\t\\t<Input label_direction=\\\"vertical\\\" label=\\\"Input\\\" />\\n\\t\\t\\t<Skeleton.Exclude>\\n\\t\\t\\t\\t<ToggleButton checked={state} on_change={({ checked }) => setState(checked)} top=\\\"large\\\">Toggle</ToggleButton>\\n\\t\\t\\t</Skeleton.Exclude>\\n\\t\\t</Skeleton>\\n\\t)\\n}\\nrender(<UserData />)\\n\"), mdx(\"h2\", null, \"Skeleton wrapper\"), mdx(ComponentBox, {\n    mdxType: \"ComponentBox\"\n  }, \"\\n<Skeleton show>\\n\\t<H2 top bottom>Heading</H2>\\n\\t<P top bottom>Paragraph Non habitasse ut nisi dictum laoreet ridiculus dui.</P>\\n\\t<Button>Button</Button>\\n</Skeleton>\\n\"), mdx(\"h2\", null, \"Skeleton using Eufemia Provider\"), mdx(\"p\", null, \"You can also use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FormRow={{ skeleton: true }}\"), \".\"), mdx(ComponentBox, {\n    scope: {\n      Provider: Provider\n    },\n    mdxType: \"ComponentBox\"\n  }, \"\\n<Provider\\n\\tskeleton={true}\\n>\\n\\t<H2 top bottom>Heading</H2>\\n\\t<P top bottom>Paragraph Non habitasse ut nisi dictum laoreet ridiculus dui.</P>\\n\\t<Button>Button</Button>\\n</Provider>\\n\"), mdx(\"h2\", null, \"Skeleton figures\"), mdx(\"p\", null, \"You may import a given figure, or create your own.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { Article } from '@dnb/eufemia/components/skeleton/figures'\\n\")), mdx(ComponentBox, {\n    scope: {\n      Article: Article\n    },\n    \"data-visual-test\": \"skeleton-figure-article\",\n    mdxType: \"ComponentBox\"\n  }, \"\\n<Skeleton\\n\\tshow\\n\\tfigure={<Article rows={5} />}\\n>\\n\\thidden content\\n</Skeleton>\\n\"), mdx(SkeletonVisualTests, {\n    mdxType: \"SkeletonVisualTests\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"uilib/components/skeleton","frontmatter":{"menuTitle":null,"title":"Skeleton","description":"The Skeleton component is a visual building block helper.","fullscreen":null,"showTabs":true,"hideTabs":[{"title":"Events"}],"tabs":null}},{"slug":"uilib/components","frontmatter":{"menuTitle":null,"title":"Components","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"uilib","frontmatter":{"menuTitle":null,"title":"UI Library","description":"Buttons, dropdowns, input fields, components etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"03b911d1-e99c-5fd9-807a-d16bfc6439cb","slug":"uilib/components/skeleton/demos","prev":{"id":"611151c6-53f5-503f-93d0-3332647c2994","slug":"uilib/components/section/properties"},"next":{"id":"695279f7-d098-5edd-8061-65cb5810d766","slug":"uilib/components/skeleton/properties"}}},
    "staticQueryHashes": ["2315317908","3001307379","573224243"]}