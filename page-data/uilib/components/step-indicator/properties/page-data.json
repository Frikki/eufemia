{
    "componentChunkName": "component---src-templates-mdx-js",
    "path": "/uilib/components/step-indicator/properties",
    "result": {"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true},"tableOfContents":{"items":[{"url":"#component-properties","title":"Component Properties"},{"url":"#steps-parameters","title":"Steps Parameters"},{"url":"#steps-example","title":"Steps example"}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Component Properties\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Properties\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"mode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(mandatory)\"), \" defines how the StepIndicator should work. Use \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"static\"), \" for non-interactive steps. Use \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"strict\"), \" for a chronological step order, also, the user can navigate between visited steps. Use \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"loose\"), \" if the user should be able to navigate freely.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"data\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(mandatory)\"), \" defines the data/steps showing up in a JavaScript Array or JSON format like \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"[{title,is_current}]\"), \". See parameters and example above.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"sidebar_id\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(mandatory)\"), \" an unique string based ID in order to bind together the main component and the sidebar (\", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"<StepIndicator.Sidebar />\"), \"). Both have to get the same ID.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"current_step\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" defines the active number marked step starting by 0. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"hide_numbers\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" define whether to show automatically counted numbers or not. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"no_animation\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" if set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the height animation on the step items and the drawer button will be omitted. Defaults to false.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"on_item_render\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" callback function to manipulate or wrap every item. Has to return a React Node. You receive an object you can use in your custom HOC \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"{ StepItem, element, attributes, props, context }\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"del\", {\n    parentName: \"td\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"del\"\n  }, \"use_navigation\"))), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(deprecated)\"), \" use \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"mode=\\\"static\\\"\"), \" instead \\u2013 if set to true, every achieved step (and the current step) has an item with a \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/uilib/components/button\"\n  }, \"Button\"), \" so the user can navigate back and forth.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"del\", {\n    parentName: \"td\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"del\"\n  }, \"active_item\"))), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(deprecated)\"), \" defines the active number marked step starting by 0. Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"del\", {\n    parentName: \"td\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"del\"\n  }, \"active_url\"))), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(deprecated)\"), \" defines the active url marked step.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/uilib/components/space/properties\"\n  }, \"Space\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" spacing properties like \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"top\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"bottom\"), \" are supported.\")))), mdx(\"h2\", null, \"Steps Parameters\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Parameters\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"title\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(mandatory)\"), \" the title as a string or React element.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"is_current\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" if set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", this item step will be set as the current current selected step. This can be used instead of \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"current_step\"), \" on the component itself.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"inactive\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" if set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", this item step will be handled as an inactive step and will not be clickable. Defaults to false.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"disabled\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" if set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", this item step will be visible as an disabled button and will not be clickable. Defaults to false.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"status\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" a status text.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"status_state\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" In case the status state should be \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"info\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"error\"), \". Defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"warn\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"on_render\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" callback function to manipulate or wrap a certain item. Has to return a React Node.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"on_click\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(optional)\"), \" event function that gets invoked once the users clicks on the active item.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"del\", {\n    parentName: \"td\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"del\"\n  }, \"is_active\"))), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(deprecated)\"), \" if set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"is_active\"), \": true, this item step will be handled as an active (activated) step and may be clickable .\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"del\", {\n    parentName: \"td\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"del\"\n  }, \"url\"))), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(deprecated)\"), \" sets the url, showing on every step, if not \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"url_future\"), \" is set.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"del\", {\n    parentName: \"td\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"del\"\n  }, \"url_future\"))), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(deprecated)\"), \" sets the url, showing only on the future steps. Can be used to \", mdx(\"em\", {\n    parentName: \"td\"\n  }, \"reset\"), \" the future steps individually.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"del\", {\n    parentName: \"td\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"del\"\n  }, \"url_passed\"))), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"td\"\n  }, \"(deprecated)\"), \" sets the url, showing only on the passed steps. Can be used to \", mdx(\"em\", {\n    parentName: \"td\"\n  }, \"reset\"), \" the passed steps individually.\")))), mdx(\"h2\", null, \"Steps example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const steps = [\\n  { title: 'Active' },\\n  { title: 'Active and marked as current', is_current: true },\\n  { title: 'Not active', inactive: true },\\n  { title: 'Disabled', disabled: true },\\n  {\\n    title: 'Active item with status text',\\n    status: 'Status text',\\n    status_state: 'warn', // defaults to warning\\n  },\\n]\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","children":[{"fields":{"slug":"uilib"},"frontmatter":{"title":"UI Library","menuTitle":null,"showTabs":null,"tabs":null,"hideTabs":null}},{"fields":{"slug":"uilib/components/step-indicator"},"frontmatter":{"title":"StepIndicator","menuTitle":null,"showTabs":true,"tabs":null,"hideTabs":null}}]}},"pageContext":{"id":"051f5061-c354-544b-9358-050e14fafc8f","prev":{"id":"9b3677ab-97b1-5705-8b57-3c4d7946cf5d","fields":{"slug":"uilib/components/step-indicator/info"}},"next":{"id":"e367a280-d6c3-5730-bf26-ea06a5446cf1","fields":{"slug":"uilib/components/step-indicator/demos"}}}},
    "staticQueryHashes": ["2315317908","3433733815","786658678"]}