{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/components/switch/info/","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"uilib/components/switch/info","frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null},"tableOfContents":{"items":[{"url":"#description","title":"Description"},{"url":"#how-it-should-work","title":"How it should work","items":[{"url":"#when-not-to-use-it","title":"When not to use it"}]},{"url":"#good-practices","title":"Good practices"}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Description\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Also known as a toggle switch or a toggle.\")), mdx(\"p\", null, \"The Switch component (toggle) is a digital on/off switch.\\nToggle switches are best used for changing the state of system functionalities and preferences. \\\"Toggles may replace two radio buttons or a single checkbox to allow users to choose between two opposing states.\\\" - \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.nngroup.com/articles/toggle-switch-guidelines/\"\n  }, \"Source\")), mdx(\"p\", null, \"May may also check out the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/checkbox\"\n  }, \"Checkbox\"), \" component.\"), mdx(\"h2\", null, \"How it \", mdx(\"strong\", {\n    parentName: \"h2\"\n  }, \"should\"), \" work\"), mdx(\"p\", null, \"\\\"Toggle switches should take immediate effect and should not require the user to click Save or Submit to apply the new state. As always, we should strive to match the system to the real world.\\\" - \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.nngroup.com/articles/toggle-switch-guidelines/\"\n  }, \"Source\")), mdx(\"h3\", null, \"When not to use it\"), mdx(\"p\", null, \"Don't use it if the user is required to click save or update to apply the new state.\"), mdx(\"h2\", null, \"Good practices\"), mdx(\"p\", null, \"\\\"The toggle labels should describe what the control will do when the switch is on; they should not be neutral or ambiguous. When in doubt, say the label aloud and append \\u201Con/off\\u201D to the end. If it doesn\\u2019t make sense, then rewrite the label\\\" - \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.nngroup.com/articles/toggle-switch-guidelines/\"\n  }, \"Source\")), mdx(\"p\", null, \"The label should describe what the toggle will do when the switch is on.\"));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"uilib/components/switch","frontmatter":{"menuTitle":null,"title":"Switch","description":null,"fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null}},{"slug":"uilib/components","frontmatter":{"menuTitle":null,"title":"Components","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"uilib","frontmatter":{"menuTitle":null,"title":"UI Library","description":"Buttons, dropdowns, input fields, components etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"c2bc330d-b035-5d9e-8373-30637b0c0b21","slug":"uilib/components/switch/info","prev":{"id":"37118184-4148-5a7d-9c33-1ad218a5868d","slug":"uilib/components/switch/events","frontmatter":{"title":"","description":null}},"next":{"id":"1a28943e-2565-578b-b665-e649c1936e1f","slug":"uilib/components/switch/properties","frontmatter":{"title":"","description":null}}}},"staticQueryHashes":["2315317908","2480288490","3000541721","3001504130","573224243"]}