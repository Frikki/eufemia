{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/components/table/info/","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"uilib/components/table/info","frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null},"tableOfContents":{"items":[{"url":"#tables","title":"Tables","items":[{"url":"#accessibility","title":"Accessibility"},{"url":"#table-header-components","title":"Table header components"},{"url":"#alignment","title":"Alignment"},{"url":"#fixed-layout","title":"Fixed layout"},{"url":"#scrollable","title":"Scrollable"},{"url":"#sticky-header","title":"Sticky header"},{"url":"#sortable-table","title":"Sortable table"}]}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Tables\"), mdx(\"p\", null, \"The following table has a default style. But in future, there will be several extensions and styles to choose from.\"), mdx(\"h2\", null, \"Accessibility\"), mdx(\"p\", null, \"Tables do both serve as a way of navigation for screen readers and other assertive technologies. But they also help to give data an ordered structure.\"), mdx(\"p\", null, \"Use the documentation from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table\"\n  }, \"MDN \\u2013 The Table element\"), \" for more information on making semantic correct tables, including \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scope\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"align\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colSpan\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rowSpan\"), \".\"), mdx(\"p\", null, \"Here is a list of things you may follow along in order to ensure your coded tables still are accessible:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Keep a semantic correct structure.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Let tables align the column width, when possible.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do not use CSS \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"display\"), \" property on any table element.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do not overwrite styles in general, but rather get in touch with DNB UX.\")), mdx(\"h2\", null, \"Table header components\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Th.SortButton />\"), \" to be used for additional sorting functionality.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Th.HelpButton />\"), \" to be used for help related content.\")), mdx(\"h2\", null, \"Alignment\"), mdx(\"p\", null, \"Use e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"align=\\\"right\\\"\"), \" on a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Th>\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Td>\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Tr>\"), \" to align a table header or a table data element.\"), mdx(\"h2\", null, \"Fixed layout\"), mdx(\"p\", null, \"You may consider using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"table-layout: fixed;\"), \". You can use the modifier property \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fixed\"), \" for doing so and combine it with CSS e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"width: 40%\"), \" on specific table headers.\"), mdx(\"h2\", null, \"Scrollable\"), mdx(\"p\", null, \"Depending on your situation, you may want to wrap your Table within \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Table.ScrollView\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { Table } from '@dnb/eufemia'\\n\\nrender(\\n  <Table.ScrollView>\\n    <Table />\\n  </Table.ScrollView>\\n)\\n\")), mdx(\"h2\", null, \"Sticky header\"), mdx(\"p\", null, \"You have two options (both have their downsides):\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sticky={true}\"), \". It works even when using a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Table.ScrollView\"), \" or a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"overflow: hidden;\"), \" is used on any parent elements. And it works inside a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/drawer\"\n  }, \"Drawer\"), \" as well. The downside is, that it uses JavaScript and the browser may drop some frames, which results in a potential flickering during scrolling.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sticky=\\\"css-position\\\"\"), \" for using the CSS \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"position: sticky;\"), \" method. It is super smooth. But then you can not use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"overflow: hidden;\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"overflow: auto;\"), \" on any parent elements. This is a know issue happening on every modern browser.\"))), mdx(\"p\", null, \"Method no. 2 should be used when a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"max-height\"), \" is set to the wrapping \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Table.ScrollView\"), \" e.g.:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Table.ScrollView style={{ maxHeight: '20rem' }}>\\n  <Table sticky=\\\"css-position\\\" />\\n</Table.ScrollView>\\n\")), mdx(\"p\", null, \"Have a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/table/demos/#table-with-a-max-height\"\n  }, \"look at this example\"), \".\"), mdx(\"h2\", null, \"Sortable table\"), mdx(\"p\", null, \"Optionally, make use of the following React Hook to handle the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Th.SortButton\"), \" directions.\"), mdx(\"p\", null, \"It can be used as a \\\"controller\\\" for your own sorting logic of your data.\"), mdx(\"p\", null, \"By default, it will cycle trough three stages \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"['asc', 'desc', 'off']\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { useHandleSortState } from '@dnb/eufemia/components/table'\\n\\n// You can also provide a default that will be used as the fallback e.g.\\nconst defaultOptions = { direction: 'asc', modes: ['asc', 'desc', 'off'] }\\n\\nexport const YourComponent = () => {\\n  const { sortState, sortHandler, activeSortName } = useHandleSortState(\\n    {\\n      // Defiend your column names with options (optional)\\n      column1: { active: true }, //\\n      column2: { direction: 'desc', modes: ['asc', 'desc'] }, // overwrite the defaultOptions\\n      column3: { modes: ['asc', 'off'] }, // will only allow one direciton\\n      column4: {}, // etc.\\n    },\\n    defaultOptions\\n  )\\n\\n  // Use these properties for your custom sorting logic\\n  console.log(sortState.column1.direction) // returns either \\\"asc\\\", \\\"desc\\\" or \\\"off\\\"\\n  console.log(activeSortName) // returns the current active one: \\\"column1\\\" (returns null when nothing is active)\\n\\n  return (\\n    <Table>\\n      <thead>\\n        <Tr>\\n          <Th\\n            sortable\\n            active={sortState.column1.active}\\n            reversed={sortState.column1.reversed}\\n          >\\n            <Th.SortButton\\n              text=\\\"Column 1\\\"\\n              title=\\\"Sort this column\\\"\\n              on_click={sortHandler.column1}\\n            />\\n          </Th>\\n        </Tr>\\n      </thead>\\n    </Table>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"uilib/components/table","frontmatter":{"menuTitle":null,"title":"Table","description":"Enhanced HTML Table element.","fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null}},{"slug":"uilib/components","frontmatter":{"menuTitle":null,"title":"Components","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"uilib","frontmatter":{"menuTitle":null,"title":"UI Library","description":"Buttons, dropdowns, input fields, components etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"68cbce75-b484-5657-ac1a-f08c21a3df89","slug":"uilib/components/table/info","prev":{"id":"c3d210bd-862f-5bfc-bc4c-3a77fdcc23f8","slug":"uilib/components/table/properties","frontmatter":{"title":"","description":null}},"next":{"id":"4dd039a6-3e04-5de8-8e8e-8041ccdef349","slug":"uilib/components/tabs/demos","frontmatter":{"title":"","description":null}}}},"staticQueryHashes":["2315317908","3001504130","573224243"]}