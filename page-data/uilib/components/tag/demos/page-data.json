{
    "componentChunkName": "component---src-templates-mdx-js",
    "path": "/uilib/components/tag/demos",
    "result": {"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"uilib/components/tag/demos","frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null},"tableOfContents":{"items":[{"url":"#demos","title":"Demos","items":[{"items":[{"url":"#tag","title":"Tag"},{"url":"#tag-with-icon","title":"Tag with icon"},{"url":"#clickable-tag","title":"Clickable Tag"},{"url":"#removable-tag","title":"Removable tag"},{"url":"#multiple-removable-tags","title":"Multiple removable tags"},{"url":"#tag-used-inside-text","title":"Tag used inside text"}]}]}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Demos\"), mdx(\"h4\", null, \"Tag\"), mdx(\"p\", null, \"To ensure the correct use of the Tags, we require using a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tag.Group\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tag\"), \"-components as children. \", mdx(\"br\", null), \"\\nThe required \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"label\"), \"-property in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tag.Group\"), \" will ensure the correct use of accessibility for screen readers. \", mdx(\"br\", null), \"\\nSee more examples below.\"), mdx(TagDefault, {\n    mdxType: \"TagDefault\"\n  }), mdx(\"h4\", null, \"Tag with icon\"), mdx(TagWithIcon, {\n    mdxType: \"TagWithIcon\"\n  }), mdx(\"h4\", null, \"Clickable Tag\"), mdx(TagClickable, {\n    mdxType: \"TagClickable\"\n  }), mdx(\"h4\", null, \"Removable tag\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onDelete\"), \"-prop to make a tag removable. A removable tag supports adds a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \"-event to the underlying \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Button\"), \"-component. \", mdx(\"br\", null), \"\\nRemovable tags will not support the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"icon\"), \"-prop and will also be ignored if a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \"-prop is defined.\"), mdx(TagRemovable, {\n    mdxType: \"TagRemovable\"\n  }), mdx(\"h4\", null, \"Multiple removable tags\"), mdx(\"p\", null, \"Removable tags can for example be used in filter lists. This example simple example on how to implement a filter list using removable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tags\"), \".\", mdx(\"br\", null), \" When a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tag\"), \" is focused (e.g. when tabbing) releasing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Backspace\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Delete\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"keyup\"), \" event) will call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onDelete\"), \"-handler. This behavior can be omitted by setting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"omitOnKeyUpDeleteEvent\"), \"-prop to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \".\"), mdx(TagMultipleRemovable, {\n    mdxType: \"TagMultipleRemovable\"\n  }), mdx(\"h4\", null, \"Tag used inside text\"), mdx(TagInline, {\n    mdxType: \"TagInline\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"uilib/components/tag","frontmatter":{"menuTitle":null,"title":"Tag","description":"The Tag component","fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null}},{"slug":"uilib/components","frontmatter":{"menuTitle":null,"title":"Components","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"uilib","frontmatter":{"menuTitle":null,"title":"UI Library","description":"Buttons, dropdowns, input fields, components etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"f951ce8a-087b-50c0-ba2a-9bd27192e431","slug":"uilib/components/tag/demos","prev":{"id":"524eefb1-4462-5cec-92e6-e48913eaa8de","slug":"uilib/components/tag/events"},"next":{"id":"01b54cde-a2a5-57fa-af26-307580d1593c","slug":"uilib/components/tag/info"}}},
    "staticQueryHashes": ["2315317908","3001307379","573224243"]}