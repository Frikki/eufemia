{
    "componentChunkName": "component---src-templates-mdx-js",
    "path": "/uilib/components/toggle-button/info",
    "result": {"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"uilib/components/toggle-button/info","frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null},"tableOfContents":{"items":[{"url":"#description","title":"Description"},{"url":"#how-to-use","title":"How to use","items":[{"url":"#multi-select","title":"Multi select"}]}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Description\"), mdx(\"p\", null, \"The ToggleButton component should be used to toggle on or off a limited number of choices.\"), mdx(\"p\", null, \"You can use the React component \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ToggleButton.Group>\"), \" to wrap several \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ToggleButton\"), \". This makes it more easy to handle the event \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"on_change\"), \" on a higher level - as well as several other \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"uilib/components/toggle-button/properties\"\n  }, \"context related properties\"), \".\"), mdx(\"p\", null, \"By default the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ToggleButton.Group\"), \" is single-select, like a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/radio\"\n  }, \"Radio\"), \" button. But You can easily enable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"multiselect\"), \" as well.\"), mdx(\"h2\", null, \"How to use\"), mdx(\"p\", null, \"You can use the ToggleButton in different modes. Either as a stand alone component, or together with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ToggleButton.Group\"), \" context.\"), mdx(\"h3\", null, \"Multi select\"), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"multiselect\"), \" is enabled on the group, several items can be enabled/disabled by the user.\"), mdx(\"p\", null, \"You would have to decide if you want to track the state by yourself by using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"checked\"), \" property, or you want just to listen to the internal state with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"on_change(({ values } => console.log(values)))\"), \". You have then to give every item also a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" property.\"));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"uilib/components/toggle-button","frontmatter":{"menuTitle":null,"title":"ToggleButton","description":"The ToggleButton component should be used to toggle on or off a limited number of choices.","fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null}},{"slug":"uilib/components","frontmatter":{"menuTitle":null,"title":"Components","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"uilib","frontmatter":{"menuTitle":null,"title":"UI Library","description":"Buttons, dropdowns, input fields, components etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"f50ccc99-e5c7-50fd-9c00-cb8cc3d072d8","slug":"uilib/components/toggle-button/info","prev":{"id":"64640cee-da60-5c26-8c23-7ae839742eee","slug":"uilib/components/toggle-button/events"},"next":{"id":"9fa6eb87-cae2-5a27-a7cc-004c786c9294","slug":"uilib/components/toggle-button/properties"}}},
    "staticQueryHashes": ["2315317908","4227086163","573224243"]}