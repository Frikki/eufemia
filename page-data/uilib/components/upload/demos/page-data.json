{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/components/upload/demos/","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"uilib/components/upload/demos","frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null},"tableOfContents":{"items":[{"url":"#demos","title":"Demos","items":[{"url":"#upload-default","title":"Upload (default)"},{"url":"#useupload-react-hook","title":"'useUpload' React Hook"},{"url":"#upload-single-filefixed-amount-of-files","title":"Upload single file/fixed amount of files"},{"url":"#upload-loading-state","title":"Upload loading state"},{"url":"#upload-error-message","title":"Upload error message"},{"url":"#upload-specific-accepted-file-formats","title":"Upload specific accepted file formats"},{"url":"#upload-with-prefilled-error","title":"Upload with prefilled error"}]}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Demos\"), mdx(\"h3\", null, \"Upload (default)\"), mdx(UploadBasic, {\n    mdxType: \"UploadBasic\"\n  }), mdx(\"h3\", null, \"'useUpload' React Hook\"), mdx(\"p\", null, \"By using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Upload.useUpload\"), \" you can remove or add files or the status displayed in the component.\"), mdx(UploadRemoveFile, {\n    mdxType: \"UploadRemoveFile\"\n  }), mdx(\"h3\", null, \"Upload single file/fixed amount of files\"), mdx(UploadSingleFile, {\n    mdxType: \"UploadSingleFile\"\n  }), mdx(\"h3\", null, \"Upload loading state\"), mdx(\"p\", null, \"When uploading the file you can set the loading state of the request using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Upload.useUpload\"), \" hook and passing isLoading to the file that is being uploaded.\"), mdx(UploadIsLoading, {\n    mdxType: \"UploadIsLoading\"\n  }), mdx(\"h3\", null, \"Upload error message\"), mdx(\"p\", null, \"The only checks we do currently is for the file size and the file type. These errors are handled by the HTML element \\xB4input\\xB4 so they aren't selectable. If you want any other error messages you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Upload.useUpload\"), \" the same way as with the loading state.\"), mdx(UploadErrorMessage, {\n    mdxType: \"UploadErrorMessage\"\n  }), mdx(\"h3\", null, \"Upload specific accepted file formats\"), mdx(\"p\", null, \"You can pass the file formats as a string array. This will restrict which files that can be selected.\"), mdx(UploadAcceptedFormats, {\n    mdxType: \"UploadAcceptedFormats\"\n  }), mdx(\"h3\", null, \"Upload with prefilled error\"), mdx(UploadPrefilledFileList, {\n    mdxType: \"UploadPrefilledFileList\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"uilib/components/upload","frontmatter":{"menuTitle":null,"title":"Upload","description":"The Upload widget should be used in scenarios where the user has to upload files. Files can be uploaded by clicking button. You also have the opportunity to add descriptive texts below the title where you could put max file size, allowed fileformats etc.","fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null}},{"slug":"uilib/components","frontmatter":{"menuTitle":null,"title":"Components","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"uilib","frontmatter":{"menuTitle":null,"title":"UI Library","description":"Buttons, dropdowns, input fields, components etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"912121f1-c274-5c4d-b14a-85019b7964cd","slug":"uilib/components/upload/demos","prev":{"id":"063d9c13-b648-5c46-9bf9-b65044dda94b","slug":"uilib/components/dialog/prop-table","frontmatter":{"title":"","description":null}},"next":{"id":"64a6b320-7b0d-5def-9ade-e770614bdc33","slug":"uilib/components/upload/events","frontmatter":{"title":"","description":null}}}},"staticQueryHashes":["2315317908","3001504130","573224243"]}