{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/components/upload/info/","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"uilib/components/upload/info","frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null},"tableOfContents":{"items":[{"url":"#description","title":"Description"},{"url":"#how-to-use-the-upload-component","title":"How to use the Upload component"},{"url":"#backend-integration","title":"Backend integration"},{"url":"#limit-the-amount-of-files","title":"Limit the amount of files"},{"url":"#page-wide-drop-support","title":"Page wide drop support"}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"showTabs\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Description\"), mdx(\"p\", null, \"The Upload component should be used in scenarios where the user has to upload any kind of files.\"), mdx(\"h2\", null, \"How to use the Upload component\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Files selected by the user should be uploaded immediately (temporary location).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The user should be able to remove them (files) during the session.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the Upload component is shown in a submit form, then a \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/uilib/components/global-status\"\n  }, \"GlobalStatus\"), \" should be a part of the form.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Validation messages coming from the \\\"backend\\\" should be displayed for each file via the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useUpload\"), \" hook. See \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/uilib/components/upload/#upload-error-message\"\n  }, \"example\"), \" below.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useUpload\"), \" hook can be placed on any location in your application, and does not need to be where the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Upload\"), \" component is used.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"function YourComponent() {\\n  const { files, setFiles } = Upload.useUpload('unique-id')\\n\\n  React.useEffect(() => {\\n    setFiles(\\n      files.map((fileItem) => {\\n        if (fileItem.file.name === fileNameFromBackend) {\\n          fileItem.errorMessage = 'Your message from the backend'\\n        }\\n        return fileItem\\n      })\\n    )\\n  }, [fileNameFromBackend])\\n\\n  return <Upload id=\\\"unique-id\\\" />\\n}\\n\")), mdx(\"h2\", null, \"Backend integration\"), mdx(\"p\", null, \"The \\\"backend\\\" receiving the files is decoupled and can be any existing or new system.\"), mdx(\"h2\", null, \"Limit the amount of files\"), mdx(\"p\", null, \"By default, the Upload component accepts multiple files. You can use the prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filesAmountLimit={1}\"), \" to make the component accept only one file.\"), mdx(\"h2\", null, \"Page wide drop support\"), mdx(\"p\", null, \"Once the Upload component mounts, it also adds support for dropping files to the entire browser body.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NB:\"), \" When you have several mounted components, only the first Upload component will receive the dropped files.\"));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"uilib/components/upload","frontmatter":{"menuTitle":null,"title":"Upload","description":"The Upload widget should be used in scenarios where the user has to upload files. Files can be uploaded by clicking button. You also have the opportunity to add descriptive texts below the title where you could put max file size, allowed fileformats etc.","fullscreen":null,"showTabs":true,"hideTabs":null,"tabs":null}},{"slug":"uilib/components","frontmatter":{"menuTitle":null,"title":"Components","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"uilib","frontmatter":{"menuTitle":null,"title":"UI Library","description":"Buttons, dropdowns, input fields, components etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"c3b623d1-2972-5f07-aabb-d070780f9602","slug":"uilib/components/upload/info","prev":{"id":"64a6b320-7b0d-5def-9ade-e770614bdc33","slug":"uilib/components/upload/events","frontmatter":{"title":"","description":null}},"next":{"id":"35c7d625-4b1b-5d2c-87b0-21966c522bc8","slug":"uilib/components/upload/properties","frontmatter":{"title":"","description":null}}}},"staticQueryHashes":["2315317908","3001504130","573224243"]}