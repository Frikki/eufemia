{
    "componentChunkName": "component---src-templates-mdx-js",
    "path": "/uilib/development/commit",
    "result": {"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"Commit","description":null,"fullscreen":null,"showTabs":null},"tableOfContents":{"items":[{"url":"#commit","title":"Commit","items":[{"url":"#commit-messages","title":"Commit Messages"},{"url":"#committing-changes","title":"Committing changes"}]}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Commit\",\n  \"draft\": true,\n  \"order\": 2\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Commit\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Make sure You follow \", mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"https://semver.org\"\n  }, \"Semantic Versioning\"))), mdx(\"p\", null, \"Version numbers are handled automatically by using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/semantic-release/semantic-release#readme\"\n  }, \"semantic-release\"), \".\"), mdx(\"h2\", null, \"Commit Messages\"), mdx(\"p\", null, \"Make sure to decorate Your \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"commit messages\"), \" with either \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/semantic-release/semantic-release#commit-message-format\"\n  }, \"commit message format\"), \" or simply use the following three methods:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fix: an example fix message\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"feat: this is a new feature\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"break: breaking change in API\"))), mdx(\"p\", null, \"You can use these synonyms as well:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"patch: an example fix message\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"minor: this is a new feature\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"major: breaking change in API\"))), mdx(\"p\", null, \"Read more about \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/bahmutov/simple-commit-message\"\n  }, \"simple-commit-message\"), \".\"), mdx(\"h2\", null, \"Committing changes\"), mdx(\"p\", null, \"During a commit (locally), your commit content (code) will be tested with both Static and Integration tests. You may run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn test\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn test:update\"), \" before you try to commit. You may also write new tests for your code before committing.\"), mdx(\"p\", null, \"The Code Base is based on several Static Tests to help the code to be uniform:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Prettier\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ESLint\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"StyleLint\")), mdx(\"p\", null, \"You may consider to install plugins for your editor of choice - to visualize and run the code formatters and linters based on the given config files. This way you can immediately see how the code will and have to consist.\"));\n}\n;\nMDXContent.isMDXComponent = true;","children":[{"fields":{"slug":"uilib"},"frontmatter":{"title":"UI Library","menuTitle":null,"showTabs":null,"tabs":null,"hideTabs":null}}]}},"pageContext":{"id":"249e15d2-d439-5b28-bccf-69544f1350fb","prev":{"id":"073d4417-2343-53ab-98d9-d779ed699a8e","fields":{"slug":"uilib/elements/anchor/properties"}},"next":{"id":"813e1f7b-e94a-54e1-b680-fe7e73988ca8","fields":{"slug":"uilib/development/changes"}}}},
    "staticQueryHashes": ["2315317908","3433733815","786658678"]}