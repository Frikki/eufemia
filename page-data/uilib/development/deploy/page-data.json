{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/development/deploy","result":{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"Deploy","description":null,"fullscreen":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Deploy\",\n  \"status\": \"imp\",\n  \"draft\": true,\n  \"order\": 3\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Deploy\"), mdx(\"p\", null, \"Publishing new versions to the NPM Package (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dnb-ui-lib\"), \") is handled by a Deploy Server.\"), mdx(\"h2\", null, \"CI Structure\"), mdx(\"p\", null, \"Actually, both the Portal (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dnb-design-system-portal\"), \") and the NPM Package (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dnb-ui-lib\"), \") are deployed and build by a Continuous Integration (CI) Server.\"), mdx(\"p\", null, \"Once You push Your branch \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ftr/your-feature\"), \" (or what ever) to remote \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"origin\"), \", all tests will be run against Your latest pushes.\"), mdx(\"p\", null, \"Merges from a Pull Request and other pushes to the development branch \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"origin/develop\"), \", will trigger a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"test build\"), \" of the Portal. This way me make sure that a new Portal version can be build, before we actually publish a new build.\"), mdx(\"h3\", null, \"The Release Branch\"), mdx(\"p\", null, \"Make sure You only make Pull Request from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"origin/develop\"), \" into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"origin/release\"), \".\\nThe Release Branch is more kind of a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"slave branch\"), \". It reflects the latest version, but is actually only used to publish new versions and to make builds for the Portal.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TODO:\"), \" GitFlow and CI structure graphics\"), mdx(\"h3\", null, \"Steps to follow\"), mdx(\"p\", null, \"The steps, from code changes to production builds are:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Make Your changes and write tests and test the codebase\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Update eventually snapshots (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"yarn test:update\"), \")\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Commit Your changes with the correct \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"/uilib/development/commit\"\n  }), \"message decoration\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Push or make a Pull Request to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"origin/develop\"), \" branch\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Wait until the CI Server has validated the commits\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Make a \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/dnbexperience/eufemia/compare/release...develop?expand=1\"\n  }), \"Pull Request\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Once the Pull Request will be approved by one of the authored \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/dnbexperience/eufemia/graphs/contributors\"\n  }), \"repo contributors\"), \",\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The CI Server will deploy the Portal and NPM builds\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"5ed1cea5-98f5-5ae0-abcf-a790f18d9b36","prev":{"id":"24af35a6-458c-5710-99c3-304b0cdf798f","fields":{"slug":"uilib/development/commit"}},"next":{"id":"df95681a-17fc-5bf2-94a9-1d452c49816d","fields":{"slug":"uilib/development/naming"}}}}}