{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/development/icons","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"Icons Library development","description":null,"fullscreen":null,"showTabs":null},"tableOfContents":{"items":[{"url":"#icons-library-development","title":"Icons Library development","items":[{"url":"#icons-cicd-process-description","title":"Icons CI/CD process description"},{"url":"#access-denied","title":"Access denied"}]}]},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Icons Library development\",\n  \"draft\": true,\n  \"order\": 6\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Icons Library development\"), mdx(\"p\", null, \"To fetch new icons from the Figma Icons file, you have to:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"re-branch \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"develop\"), \", and name it \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"eufemia-icons\"), \" (it needs to include icons in the name): \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git checkout develop && git pull origin develop && git checkout -b eufemia-icons && git push -u origin eufemia-icons\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"after the CI/CD process and finished, make a PR back to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"develop\"), \", review and squash merge it.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"depending on the icons updated, you may have to pull the changes down locally, and run all tests, to eventually update broken visual snapshots. But ideally, all of that should be handled during the CI/CD process.\")), mdx(\"h2\", null, \"Icons CI/CD process description\"), mdx(\"p\", null, \"This is a description on what happens during adding new icons to the icons library.\"), mdx(\"p\", null, \"Icons are getting added mor or less automatically by extracting them from Figma. Heres how the process is tied together.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The connection happens on CI.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Checks if a new Figma Icons library version is available.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Download the Figma file (JSON) by a stream basis, and cache that.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Store the new version, in a version file.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Parse the json Figma file for valid icon IDs.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For PDF only: unpack the existing zip file with icons.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Checks if an icon file (SVG or PDF) exists in the repo.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If no, download it.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Details about the icon file are getting stored in a \\\"lock\\\" file, so we can compare it next time against.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For PDF only: pack the icon files to a zip (tar) and delete the files.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For SVG only: store a meta data file, so the portal can display more relevant data about the icons.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For SVG only: optimize the SVG file for a lower size.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For SVG only: Create a JSX component.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For SVG only: run integration and visual tests.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Commit the extracted / generated files back to the repo.\")), mdx(\"h2\", null, \"Access denied\"), mdx(\"p\", null, \"If you get a access denied request from the Figma API \\u2013 while streaming down by the GET image endpoint, you may reset the URLs from inside the icons.lock file by running this command: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn figma:reset\"), \" and commit the re-generated files. Image URL's expires after 30 days.\"));\n}\n;\nMDXContent.isMDXComponent = true;","children":[{"__typename":"Mdx","fields":{"slug":"uilib"},"frontmatter":{"title":"UI Library","menuTitle":null,"showTabs":null,"tabs":null,"hideTabs":null}}]}},"pageContext":{"id":"58955a7e-1bea-5e35-8c80-ab786e7bb8cf","prev":{"id":"a324ebce-1a29-5e87-905e-4f0eb9b08c5a","fields":{"slug":"uilib/development/ui-lib"}},"next":{"id":"d34f7f48-94be-57e5-b2ec-eabc054325eb","fields":{"slug":"uilib/elements/code"}}}},"staticQueryHashes":["2315317908","3433733815","786658678"]}