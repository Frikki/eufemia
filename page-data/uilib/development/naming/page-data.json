{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/development/naming","result":{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"Naming conventions","description":null,"fullscreen":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Naming conventions\",\n  \"draft\": false,\n  \"order\": 6\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Naming conventions\"), mdx(\"p\", null, \"The DNB Design System Eufemia uses the following naming conventions.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Formatting styles\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"pascal case\"), \" also known as \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"upper camel case\"), \". Every word upper case. Example: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PascalCase\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"camel case\"), \" also known as \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"lower camel case\"), \". First word lower case. Example: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"camelCase\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"lisp case\"), \" also known as \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"kebab case\"), \". Only lower case letters. Example: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"lisp-case\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"snake case\"), \". Only lower case letters. Example: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"snake_case\"))), mdx(\"h2\", null, \"React components\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"React Components, both as files and as components use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"pascal case\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The folder containing the component uses \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"lisp case\"), \".\")), mdx(\"h2\", null, \"Web components\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Web components use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"lisp case\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"They are prefixed with: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dnb-\"))), mdx(\"h2\", null, \"CSS / SCSS\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CSS classes and the files containing the styles use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"lisp case\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CSS classes are prefixed with: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dnb-\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CSS \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Custom Properties\"), \" (CSS Variables) use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"lisp case\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SCSS Mixins use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"camel case\"), \".\")), mdx(\"h2\", null, \"Javascript\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Functions\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Variables\"), \" use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"camel case\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Classes\"), \" use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"pascal case\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Other Javascript files use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"lisp case\"), \".\")), mdx(\"h2\", null, \"Events and Properties\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Event names use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"snake case\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"They have to describe what they are aiming to do. Like: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"on_click\"))), mdx(\"h2\", null, \"Icons\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Icon names use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"snake case\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"They have to describe what they are aiming to meant for. Like: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"chevron_right\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sizes are added as a postfix. Like: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"chevron_right_medium\"))), mdx(\"h2\", null, \"Documentation\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Pages\"), \" and directories use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"lisp case\"), \".\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Why \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"snake_case\")), mdx(\"p\", null, \"The decision to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"snake_case\"), \" was made to not just adopt React terms (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PascalCase\"), \"), because we wanted to be open for future changes in the front end world.\"), mdx(\"p\", null, \"But also the technical limitation that \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Web Components\"), \" do not support \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PascalCase\"), \" made us more confident to use another case style.\"), mdx(\"p\", null, \"HTML attributes uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lisp-case\"), \", so we needed something between.\"), mdx(\"p\", null, \"The aspect to distinguish between case styles will also make code easier to read and support future code changes and refactoring we assume.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Component aria-hidden=\\\"true\\\" myReactProp={...} on_click={} />\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"df95681a-17fc-5bf2-94a9-1d452c49816d","prev":{"id":"11a1366e-348a-5e73-a4a2-ce8bb964b765","fields":{"slug":"uilib/development/changes"}},"next":{"id":"383ceed3-097b-5dc0-b5dc-330bd2947858","fields":{"slug":"uilib/development/portal"}}}}}