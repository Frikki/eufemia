{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/development","result":{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"Development","description":null,"fullscreen":null,"showTabs":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Development\",\n  \"icon\": \"development\",\n  \"order\": 10\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Development\"), mdx(\"p\", null, \"For more development details you may have a look at the confluence pages about \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"confluence.tech.dnb.no/display/EDS/\"\n  }), \"development details\"), \".\"), mdx(\"h2\", null, \"Development environment and defaults\"), mdx(\"p\", null, \"Many defaults are given by the linting and prettier configurations. But to keep the code base consistent and clean, we have set a certain set of rules:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://volta.sh/\"\n  }), \"Volta\"), \" for \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://nodejs.org/\"\n  }), \"Node.js\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://yarnpkg.com/\"\n  }), \"yarn\"), \" version handling.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use only \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/components-and-props.html#function-and-class-components\"\n  }), \"Function and Class Components\"), \" for components, elements, fragments and patterns - no \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/hooks-overview.html\"\n  }), \"Hooks\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use strictly the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/uilib/development/naming\"\n  }), \"naming conventions\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use correct \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/uilib/development/commit\"\n  }), \"message decoration\"), \" to insure correct versioning.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use best practices for \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/uilib/usage/best-practices/for-styling#structure\"\n  }), \"CSS style structures\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://medium.com/@andrew_barnes/bem-and-sass-a-perfect-match-5e48d9bc3894\"\n  }), \"nested CSS class selectors\"), \" with SASS (SCSS) and BEM (Block Element Modifier).\")), mdx(\"h2\", null, \"How to publish a new version to NPM?\"), mdx(\"p\", null, \"Create a Fork, make your changes and create a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Pull Request\"), \") - or commit your changes to a new branch. From there an admin will create a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Pull Request\"), \" into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"origin/develop\"), \" branch. Once Your commits got approved on CI, we will create a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Pull Request\"), \" to merge the changes in to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"origin/release\"), \" branch.\"), mdx(\"p\", null, \"As soon as the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Pull Request\"), \" gets merged into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"origin/release\"), \", a CI/CD server will check all commits and figure out the new NPM \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Version Number\"), \" and publish a new version based on the message decorations.\"));\n}\n;\nMDXContent.isMDXComponent = true;","children":[{"__typename":"Mdx","fields":{"slug":"uilib"},"frontmatter":{"title":"UI Library","menuTitle":null,"showTabs":null,"tabs":null,"hideTabs":null}}]}},"pageContext":{"id":"8d0e5487-7e4f-5c57-add7-e63cd8b1aa7d","prev":{"id":"fbbccb71-a27a-5140-b83a-041c7495fd8a","fields":{"slug":"uilib/helpers"}},"next":{"id":"8bb08cea-60af-5896-bea1-26f4816d11a8","fields":{"slug":"uilib/components"}}}},"staticQueryHashes":["2315317908","3433733815","786658678"]}