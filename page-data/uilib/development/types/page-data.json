{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/development/types","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"TypeScript Types","description":null,"fullscreen":null,"showTabs":null},"tableOfContents":{"items":[{"url":"#typescript-types","title":"TypeScript Types","items":[{"url":"#about-the-build-process","title":"About the build process"},{"url":"#manual-type-definitions","title":"Manual type definitions"},{"url":"#sharing-proptypes-between-components","title":"Sharing PropTypes between components"},{"url":"#shared-properties-docs","title":"Shared Properties docs"},{"url":"#local-development","title":"Local development"}]}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"TypeScript Types\",\n  \"draft\": true,\n  \"order\": 7\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"TypeScript Types\"), mdx(\"p\", null, \"As of now, the TypeScript types are mainly generated during the package build step on the CI.\"), mdx(\"h2\", null, \"About the build process\"), mdx(\"p\", null, \"The two main purposes of delivering TypeScript types are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Inline property documentation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Property validation and type safety\")), mdx(\"p\", null, \"While the documentation, including the property tables, have to be kept in Markdown Tables, they get extracted, parsed and inserted in the type definition files.\"), mdx(\"h2\", null, \"Manual type definitions\"), mdx(\"p\", null, \"If a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*.d.ts\"), \" file is included in the source code, it will not be overwritten. But the documentation part about property types will still be inserted during the build.\"), mdx(\"h2\", null, \"Sharing PropTypes between components\"), mdx(\"p\", null, \"There are a couple of components doing so. You may have a look at:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Input\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"InputMasked\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Icon\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"IconPrimary\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Also the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SpacingHelper\"), \" shares \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"spacingPropTypes\"), \" with almost every component\")), mdx(\"p\", null, \"So, You can share PropTypes between files. But you may have to spread the objects, instead of only referencing them.\"), mdx(\"h2\", null, \"Shared Properties docs\"), mdx(\"p\", null, \"If you have one \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/properties.md\"), \" file, but e.g. two components shares most or all of the properties. Like a component and a provider for that component (Accordion and AccordionProvider) \\u2013 then you can define din the markdown table header name both of the components: You can then provide a second table with more specific table for a second component.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-md\"\n  }, \"## Properties\\n\\n| Accordion and AccordionProvider Properties  | Description                                                           |\\n| ------------------------------------------- | --------------------------------------------------------------------- |\\n| `id`                                        | _(optional)_ docs.                                                    |\\n| [Space](/uilib/components/space/properties) | _(optional)_ spacing properties like `top` or `bottom` are supported. |\\n\\n| AccordionProvider Properties | Description                    |\\n| ---------------------------- | ------------------------------ |\\n| `expanded_id`                | _(optional)_ expanded_id docs. |\\n\")), mdx(\"h2\", null, \"Local development\"), mdx(\"p\", null, \"You can either run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn build:types\"), \" to generate type for all files, or use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn build:types:dev\"), \" to only build a certain and custom defined amount of files. Have a look at the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const isOfInterest = ...\"), \" part in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"generateTypes.js\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","children":[{"fields":{"slug":"uilib"},"frontmatter":{"title":"UI Library","menuTitle":null,"showTabs":null,"tabs":null,"hideTabs":null}}]}},"pageContext":{"id":"a4d7176c-3729-5f9a-8caf-286edbb21a4c","prev":{"id":"383ceed3-097b-5dc0-b5dc-330bd2947858","fields":{"slug":"uilib/development/portal"}},"next":{"id":"6df621f9-a8f3-599a-8951-16b7e83b1c7a","fields":{"slug":"uilib/elements/anchor"}}}},"staticQueryHashes":["2315317908","3433733815","786658678"]}