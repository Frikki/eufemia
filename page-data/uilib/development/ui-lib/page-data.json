{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/development/ui-lib","result":{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"NPM Library","description":null,"fullscreen":null,"showTabs":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"NPM Library\",\n  \"draft\": true,\n  \"order\": 4\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"NPM Library\"), mdx(\"p\", null, \"These folders/files will be a part of the npm \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://unpkg.com/dnb-ui-lib@latest/\"\n  }), \"package\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"/assets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"/components\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"/elements\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"/patterns\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"/icons\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"/style\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"/es\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"/umd\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"/shared\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"/web-components\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"index.js\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"package.json\")), mdx(\"h2\", null, \"How to publish a new version to NPM?\"), mdx(\"p\", null, \"Make sure You use a correct \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"/uilib/development/commit\"\n  }), \"message decoration\")), \" to insure correct versioning.\"), mdx(\"p\", null, \"You have to commit (or Pull Request merge) your changes to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"origin/develop\"), \" branch. Once Your commits gets approved by the CI Server, You can make a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Pull Request\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"origin/release\"), \".\"), mdx(\"p\", null, \"As soon as the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Pull Request\"), \" gets merged into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"origin/release\"), \", the CI Server will check all commits and figure out the new NPM \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Version Number\"), \" and publish a new version based on the message decorations.\"));\n}\n;\nMDXContent.isMDXComponent = true;","children":[{"__typename":"Mdx","fields":{"slug":"uilib"},"frontmatter":{"title":"UI Library","menuTitle":null,"showTabs":null,"tabs":null,"hideTabs":null}}]}},"pageContext":{"id":"a324ebce-1a29-5e87-905e-4f0eb9b08c5a","prev":{"id":"5ed1cea5-98f5-5ae0-abcf-a790f18d9b36","fields":{"slug":"uilib/development/deploy"}},"next":{"id":"df95681a-17fc-5bf2-94a9-1d452c49816d","fields":{"slug":"uilib/development/naming"}}}}}