{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/usage/best-practices/for-javascript","result":{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"Best Practices for JavaScript and JSX","description":null,"fullscreen":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Best Practices for JavaScript and JSX\",\n  \"menuTitle\": \"for JS and JSX\",\n  \"draft\": false,\n  \"order\": 2\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"JavaScript and JSX\"), mdx(\"h2\", null, \"Clean Code\"), mdx(\"p\", null, \"Writing clean and readable code will in the end benefit also the end user by having better UX, because you as a developer can focus on what matters, the UI, and not spending unnecessary time on unclean code. Therefore we strongly recommend:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"following the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/ryanmcdermott/clean-code-javascript\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Clean Code JavaScript\"), \" principles\"))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NB:\"), \" Even they list \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"moment\"), \" as a date formatting tool, consider \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://date-fns.org\"\n  }), \"date-fns\"), \" because it has a couple of advantages over moment.\"), mdx(\"h2\", null, \"Dates\"), mdx(\"p\", null, \"Please prefer \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://date-fns.org\"\n  }), \"date-fns\"), \" over \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"moment\"), \" to handle your date calculations and formatting, because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"date-fns\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"functional approach\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"immutable structure\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"uses the browses native \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Date\"), \" object as the basis\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"strong and consistent API\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"very modular\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"good and flexible locales support\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"supports three shaking\")), mdx(\"h2\", null, \"React\"), mdx(\"h3\", null, \"Handling of React State\"), mdx(\"p\", null, \"Kent C. Dodds has a good \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kentcdodds.com/blog/state-colocation-will-make-your-react-app-faster\"\n  }), \"article on when and where to put React State\"), \" with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kentcdodds.com/static/d2b50fdb8371e7ec209faacac5363111/35838/where-to-put-state.png\",\n    \"title\": \"This chart shows the when and where to put React State\"\n  }), \"this chart\"), \".\"), mdx(\"p\", null, \"Please avoid having logic in your JSX syntax. Even it is possible to have a lot of logic in JSX because of the functional architecture, rather enforce using React Context to hide logic.\"), mdx(\"h3\", null, \"Readable JSX\"), mdx(\"p\", null, \"Small components are readable regardless. But once a Component gets large, things changes. Therefore I (Tobias H\\xF8egh) thought a lot about how to make larger components readable. So here is my approach:\"), mdx(\"p\", null, \"Think of laying out your markup like reading a book. Yes, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"reading a book\"), \".\\nYou have your;\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"intro\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"content\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"summary\")), mdx(\"p\", null, \"So, what if you put your main markup on top? following by the content, and as a settlement to the content, we follow up with the logic? Then we get these three topics.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Main component\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Sub components\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Logic\")), mdx(\"p\", null, \"The good thing about this is, we get quickly an overview what the component contains. Here is an example using a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"form\"), \" as our basis:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// 1. Readable markup\\nconst App = () => (\\n  <FormLogic>\\n    <FormOne />\\n    <FormTwo />\\n    ...\\n  </FormLogic>\\n)\\n\\n// 2. One of the forms\\nconst FormOne = () => {\\n  // using the extendable Context\\n  const { clickHandler } = React.useContext(FormContext)\\n\\n  return <Button on_click={clickHandler} />\\n}\\n\\n// 3. And the logic, providing the Context\\nconst FormLogic = props => {\\n  // Here we have our logic\\n  function clickHandler() {}\\n\\n  // Our context we use for state handling etc.\\n  const formContext = {\\n    clickHandler\\n  }\\n\\n  return <FormContext.Provider value={formContext} {...props} />\\n}\\nconst FormContext = React.createContext({})\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"26efa077-414b-5f2e-bcbc-163eb4090696","prev":{"id":"1f3e1c2a-4c01-55dd-a99a-0b2859dac6db","fields":{"slug":"uilib/usage/accessibility/screenreader"}},"next":{"id":"d95f33e5-82c3-5c72-81d4-b430be516ee8","fields":{"slug":"uilib/usage/best-practices/for-styling"}}}}}