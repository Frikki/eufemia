{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/usage/customisation/component-properties","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"Component Properties","description":null,"fullscreen":null,"showTabs":null},"tableOfContents":{"items":[{"url":"#component-properties","title":"Component Properties","items":[{"url":"#naming","title":"Naming"},{"url":"#large-buttons--icons","title":"Large Buttons & Icons"},{"url":"#extended-example","title":"Extended example"},{"url":"#web-components-and-properties","title":"Web Components and properties"}]}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Component Properties\",\n  \"order\": 1\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Component Properties\"), mdx(\"p\", null, \"Every \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components\"\n  }, \"Component\"), \" has its own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"properties\"), \" to make them work for a variety of cases. You may have a look at the table describing all the possibilities. Check out for example the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/components/button/properties\"\n  }, \"Button Properties\"), \".\"), mdx(\"h2\", null, \"Naming\"), mdx(\"p\", null, \"Both the properties- and event names are using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"snake case\"), \" to support a universal \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/development/naming\"\n  }, \"naming convention\"), \", with a background and requirement on supporting \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/usage/first-steps/web-components\"\n  }, \"Web Components\"), \".\"), mdx(\"h2\", null, \"Large Buttons & Icons\"), mdx(\"p\", null, \"Below are some examples. You can even modify them right away in the Browser.\"), mdx(ComponentBox, {\n    mdxType: \"ComponentBox\"\n  }, \"\\n<Button\\n  variant=\\\"secondary\\\"\\n  text=\\\"Secondary Button\\\"\\n  icon=\\\"chevron_right_medium\\\"\\n  size=\\\"large\\\"\\n/>\\n<Button\\n  icon=\\\"chevron_right\\\"\\n  icon_size=\\\"medium\\\"\\n  size=\\\"large\\\"\\n/>\\n\"), mdx(\"h2\", null, \"Extended example\"), mdx(ComponentBox, {\n    scope: {\n      hamburgerIcon: hamburgerIcon\n    },\n    useRender: true,\n    mdxType: \"ComponentBox\"\n  }, \"\\nconst Wrapper = styled.div`\\n  .dnb-button {\\n    --button-width: 4rem;\\n    --button-height: 4rem;\\n    --button-border-radius: 2rem;\\n    svg {\\n      color: fuchsia;\\n    }\\n  }\\n`\\nconst myHandler = () => alert('Hello')\\nrender(\\n  <Wrapper>\\n    <Button\\n      variant=\\\"secondary\\\"\\n      icon={hamburgerIcon}\\n      size=\\\"default\\\"\\n      on_click={myHandler}\\n    />\\n    <Button\\n      variant=\\\"secondary\\\"\\n      size=\\\"default\\\"\\n      on_click={myHandler}\\n    >\\n      <Icon icon={hamburgerIcon} />\\n    </Button>\\n  </Wrapper>\\n)\\n\"), mdx(\"h2\", null, \"Web Components and properties\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"What if a property has to change at runtime?\")), mdx(\"p\", null, \"Changing a property (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props\"), \") at runtime is a common thing in React. But also \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@dnb/eufemia\"), \" web components support \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prop\"), \" changes.\\nKeep in mind that not all components are tested to the last detail.\\nSo, if you come over some special use cases, please contribute back and make a pull request.\"), mdx(ComponentBox, {\n    useRender: true,\n    mdxType: \"ComponentBox\"\n  }, \"\\nconst Component = () => {\\n  const time = new Date().toLocaleTimeString()\\n  React.useEffect(() => {\\n    Button.enableWebComponent()\\n  }, [])\\n  return (\\n    <dnb-input\\n      label=\\\"Web Component property updates:\\\"\\n      value={time}\\n    ></dnb-input>\\n  )\\n}\\nconst RenderHelper = () => {\\n  React.useEffect(() => {\\n    const timer = setInterval(() => render(<RenderHelper />), 1e3)\\n    return () => clearInterval(timer)\\n  }, [])\\n  return <Component />\\n}\\nrender(<RenderHelper />)\\n\"));\n}\n;\nMDXContent.isMDXComponent = true;","children":[{"fields":{"slug":"uilib"},"frontmatter":{"title":"UI Library","menuTitle":null,"showTabs":null,"tabs":null,"hideTabs":null}}]}},"pageContext":{"id":"a97e0042-a3c6-5344-885a-306dfc9ed52b","prev":{"id":"9266f901-24cf-5f05-a072-5a6152515983","fields":{"slug":"uilib/usage/best-practices/for-typography"}},"next":{"id":"f439cdf2-69bf-563b-8c0a-0bd753803ed9","fields":{"slug":"uilib/usage/customisation/event-handling"}}}},"staticQueryHashes":["2315317908","3433733815","786658678"]}