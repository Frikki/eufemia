{
    "componentChunkName": "component---src-templates-mdx-js",
    "path": "/uilib/usage/customisation/event-handling",
    "result": {"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"Event Handling","description":null,"fullscreen":null,"showTabs":null},"tableOfContents":{"items":[{"url":"#event-handling","title":"Event Handling","items":[{"url":"#react","title":"React","items":[{"url":"#stateless-component","title":"Stateless Component"},{"url":"#lifecycle-component","title":"Lifecycle Component","items":[{"url":"#declarative","title":"Declarative"},{"url":"#imperative","title":"Imperative"}]}]},{"url":"#vue","title":"Vue","items":[{"url":"#declarative-1","title":"Declarative"},{"url":"#imperative-1","title":"Imperative"}]},{"url":"#html--es5","title":"HTML & ES5"},{"url":"#dispatch-imperative-event","title":"Dispatch Imperative Event"},{"url":"#example","title":"Example"}]}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Event Handling\",\n  \"order\": 2\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Event Handling\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@dnb/eufemia\"), \" offers a couple of different ways to handling events:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"the declarative way to set and handle events (the way we SET the event is declarative)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"the imperative way to set and handle events\")), mdx(\"p\", null, \"Have a look at the following basic examples:\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@dnb/eufemia\"), \" uses \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"snake case\"), \" (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"snake_case\"), \") to define the event name property (e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"on_click\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"on_change\"), \"). Read more about the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"uilib/development/naming\"\n  }, \"naming conventions\"), \".\"), mdx(\"h2\", null, \"React\"), mdx(\"p\", null, \"Some of the most basic event handling in React.\"), mdx(\"h3\", null, \"Stateless Component\"), mdx(ComponentBox, {\n    useRender: true,\n    mdxType: \"ComponentBox\"\n  }, \"\\nconst myHandler = () => alert('Hello')\\nrender(<Button text=\\\"Declarative\\\" on_click={myHandler} />)\\n\"), mdx(\"h3\", null, \"Lifecycle Component\"), mdx(\"p\", null, \"This example requires also support for class properties.\"), mdx(\"h4\", null, \"Declarative\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { Button } from '@dnb/eufemia'\\n\\nexport default class MyComponent extends React.Component {\\n  myHandler = (event) => {}\\n  render() {\\n    return <Button text=\\\"Declarative\\\" on_click={this.myHandler} />\\n  }\\n}\\n\")), mdx(\"h4\", null, \"Imperative\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"export default class MyComponent extends React.Component {\\n  constructor(props) {\\n    super(props)\\n    this._ref = React.createRef()\\n  }\\n  componentDidMount() {\\n    const eventId = this._ref.current.addEvent('on_change', (event) => {})\\n    this._ref.current.removeEvent(eventId)\\n  }\\n  render() {\\n    return <Button text=\\\"Imperative\\\" ref={this._ref} />\\n  }\\n}\\n\")), mdx(\"h2\", null, \"Vue\"), mdx(\"p\", null, \"Use either the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@click\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"v-on:click\"), \" event binding property.\\nOr else you could also use the imperative \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ref\"), \" method.\"), mdx(\"h3\", null, \"Declarative\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// Template\\n<dnb-button @click=\\\"handleClick\\\">Declarative</dnb-button>\\n\\n// JS\\nimport dnb from '@dnb/eufemia/components/vue'\\nconst components = dnb.getComponents(Vue)\\n...\\nmethods: {\\n  handleClick: e => {}\\n},\\ncomponents\\n...\\n\")), mdx(\"h3\", null, \"Imperative\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// Template\\n<dnb-button ref=\\\"my_button\\\">Imperative</dnb-button>\\n\\n// JS\\nimport dnb from '@dnb/eufemia/components/vue'\\nconst components = dnb.getComponents(Vue)\\n...\\nmethods: {\\n  handleClick: e => {}\\n},\\nmounted() {\\n  this.$refs.my_button.addEvent('on_click', this.handleClick)\\n},\\ncomponents\\n...\\n\")), mdx(\"h2\", null, \"HTML & ES5\"), mdx(\"p\", null, \"You may also take a look at the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/dnbexperience/eufemia-examples/tree/main/packages/example-html\"\n  }, \"example-html\"), \" project:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<!-- Declarative -->\\n<dnb-button text=\\\"Declarative\\\" on_click=\\\"clickHandler\\\" />\\n<dnb-button text=\\\"Declarative\\\" on_click=\\\"myScope.on_click\\\" />\\n<script>\\n  // Global scope\\n  function clickHandler() {}\\n\\n  // Class scope\\n  function MyClass() {}\\n  MyClass.prototype.on_click = function (event) {}\\n  window.myScope = new MyClass()\\n</script>\\n\\n<!-- Imperative -->\\n<dnb-button text=\\\"Imperative\\\" />\\n<script>\\n  const elem = document.querySelector('dnb-button[text=Imperative]')\\n  const eventId = elem.addEvent('on_click', function (event) {})\\n  elem.removeEvent(eventId)\\n</script>\\n\\n<!-- Imperative by using setProps -->\\n<dnb-button text=\\\"Imperative\\\" />\\n<script>\\n  const elem = document.querySelector('dnb-button[text=Imperative]')\\n  elem.setProps('on_click', function (event) {})\\n</script>\\n\")), mdx(\"h2\", null, \"Dispatch Imperative Event\"), mdx(\"p\", null, \"Besides the event handler methods, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"addEvent\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"removeEvent\"), \", there is also a method to dispatch an event:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"element.fireEvent('on_click', { value: 'Custom Value' })\\n\")), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"This working example uses React to handle the setup (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \"). But, keep in mind, this is only for demonstration purposes. It works for sure without React on the outer scope.\"), mdx(ComponentBox, {\n    noFragments: false,\n    mdxType: \"ComponentBox\"\n  }, \"\\n() => {\\n  React.useEffect(() => {\\n    Button.enableWebComponent()\\n  })\\n  function MyClass() {}\\n  MyClass.prototype.on_click = function(event) {\\n    console.log(event)\\n  }\\n  if(typeof window !== 'undefined'){\\n    window.myScope = new MyClass()\\n  }\\n  return (<dnb-button icon=\\\"chevron_right\\\" text=\\\"Click me\\\" on_click=\\\"myScope.on_click\\\" />)\\n}\\n\"));\n}\n;\nMDXContent.isMDXComponent = true;","children":[{"fields":{"slug":"uilib"},"frontmatter":{"title":"UI Library","menuTitle":null,"showTabs":null,"tabs":null,"hideTabs":null}}]}},"pageContext":{"id":"f439cdf2-69bf-563b-8c0a-0bd753803ed9","prev":{"id":"a97e0042-a3c6-5344-885a-306dfc9ed52b","fields":{"slug":"uilib/usage/customisation/component-properties"}},"next":{"id":"12ffd304-f312-51d6-b26d-aba18cc5cb7d","fields":{"slug":"uilib/usage/customisation/provider-info"}}}},
    "staticQueryHashes": ["2315317908","3433733815","786658678"]}