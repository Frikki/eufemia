{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/usage/customisation/localization","result":{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"Locale / Translation","description":null,"fullscreen":null,"showTabs":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Locale / Translation\",\n  \"order\": 8\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Localization\"), mdx(\"p\", null, \"The default constants are defined in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/shared/defaults.js\"), \" file.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The default locale of all components texts is: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nb-NO\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The default currency is: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"NOK\"))), mdx(\"h2\", null, \"How set the locale\"), mdx(\"p\", null, \"In React based apps, use the shared provider:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import Provider from 'dnb-ui-lib/shared/Provider'\\n\\nrender(\\n  <Provider locale=\\\"en-US\\\">\\n    <MyApp>Eufemia components</MyApp>\\n  </Provider>\\n)\\n\")), mdx(\"h2\", null, \"How change the locale\"), mdx(\"p\", null, \"You can even change the locale during runtime. Find more info in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/uilib/usage/customisation/provider\"\n  }), \"Provider docs\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import Provider from 'dnb-ui-lib/shared/Provider'\\nimport Context from 'dnb-ui-lib/shared/Context'\\n\\nconst ChangeLocale = () => {\\n  const { setLocale, locale } = React.useContext(Context)\\n\\n  return <Dropdown\\n    value={locale}\\n    data={{ 'en-US': 'English', 'nb-NO': 'Norsk' }}\\n    on_change={({ data: { selected_key } }) => {\\n      setLocale(selected_key)\\n    }}\\n  />\\n}\\n\\nrender(\\n  <Provider ...>\\n    <MyApp>\\n      ...\\n      <ChangeLocale />\\n      ...\\n    </MyApp>\\n  </Provider>\\n)\\n\")), mdx(\"h2\", null, \"How add your own strings\"), mdx(\"p\", null, \"It is possible to use the Eufemia shared Provider for your own project / App localization.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import Provider from 'dnb-ui-lib/shared/Provider'\\nimport enUS from 'dnb-ui-lib/shared/locales/en-US''\\n\\nconst myLocale = {\\n  ...enUS,\\n\\n  // and extend the translation\\n  'en-US': {\\n    myString: 'Custom string'\\n    myGroup: {\\n      subString: 'Second string'\\n    }\\n  }\\n}\\n\\nrender(\\n  <Provider locales={myLocale} locale=\\\"en-US\\\">\\n    <MyApp>\\n      <MyComponent />\\n    </MyApp>\\n  </Provider>\\n)\\n\")), mdx(\"p\", null, \"... and consume the strings in your components, like \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MyComponent\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import Context from 'dnb-ui-lib/shared/Context'\\n\\nexport default function MyComponent() {\\n  const { translation } = React.useContext(Context)\\n  return <>{translation.myString}</>\\n}\\n\")), mdx(\"h2\", null, \"How to handle locales\"), mdx(\"p\", null, \"Create a new file containing all the strings:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"export default {\\n  'sv-SE': {\\n    DatePicker: {\\n      submit_button_text: 'OK'\\n    },\\n    Modal: {\\n      close_title: 'St\\xE4nga'\\n    },\\n    Logo: {\\n      alt: 'DNB Logo'\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"And add the file, like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import Provider from 'dnb-ui-lib/shared/Provider'\\nimport myLocale from './locales/sv-SE'\\n\\nrender(\\n  <Provider locales={myLocale}>\\n    <MyApp>Eufemia components</MyApp>\\n  </Provider>\\n)\\n\")), mdx(\"p\", null, \"or add it on the fly:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import Provider from 'dnb-ui-lib/shared/Provider'\\nimport Context from 'dnb-ui-lib/shared/Context'\\n\\nimport myLocale from './locales/sv-SE'\\n\\nconst ChangeLocale = () => {\\n  const { update, locale } = React.useContext(Context)\\n\\n  // Add new locales\\n  update({ locales: myLocale, locale: 'sv-SE' })\\n\\n  return locale\\n}\\n\\nrender(\\n  <Provider>\\n    <MyApp>\\n      ...\\n      <ChangeLocale />\\n      ...\\n    </MyApp>\\n  </Provider>\\n)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","children":[{"__typename":"Mdx","fields":{"slug":"uilib"},"frontmatter":{"title":"UI Library","menuTitle":null,"showTabs":null,"tabs":null,"hideTabs":null}}]}},"pageContext":{"id":"b441d037-329b-5c5b-b9c3-f70db60aad65","prev":{"id":"a97e0042-a3c6-5344-885a-306dfc9ed52b","fields":{"slug":"uilib/usage/customisation/component-properties"}},"next":{"id":"f439cdf2-69bf-563b-8c0a-0bd753803ed9","fields":{"slug":"uilib/usage/customisation/event-handling"}}}},"staticQueryHashes":["2315317908","3433733815","786658678"]}