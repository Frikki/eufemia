{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/usage/customisation/localization/","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"uilib/usage/customisation/localization","frontmatter":{"title":"Locale / Translation","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null},"tableOfContents":{"items":[{"url":"#localization","title":"Localization","items":[{"url":"#supported-component-translations","title":"Supported component translations"},{"url":"#how-set-the-locale","title":"How set the locale"},{"url":"#how-set-locale-progressively","title":"How set locale progressively"},{"url":"#how-change-the-locale-during-runtime","title":"How change the locale during runtime"},{"url":"#how-to-combine-with-other-tools","title":"How to combine with other tools"},{"url":"#how-to-use-your-own-translation-strings","title":"How to use your own translation strings","items":[{"url":"#the-usetranslation-hook","title":"The useTranslation Hook"}]},{"url":"#get-the-strings-from-context","title":"Get the strings from Context"},{"url":"#how-add-new-locales","title":"How add new locales"}]}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Locale / Translation\",\n  \"order\": 8\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Localization\"), mdx(\"p\", null, \"The default constants are defined in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/shared/defaults.js\"), \" file.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The default locale of all components texts is: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nb-NO\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The default currency is: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"NOK\"))), mdx(\"h2\", null, \"Supported component translations\"), mdx(\"p\", null, \"Eufemia components comes with a set of default translated strings.\"), mdx(\"p\", null, \"You can easily change one, some or all of them by using a React provider \\u2013 the Eufemia Provider.\"), mdx(\"p\", null, \"Here are the default strings located:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import enGB from '@dnb/eufemia/shared/locales/en-GB'\\nimport nbNO from '@dnb/eufemia/shared/locales/nb-NO'\\n\")), mdx(\"h2\", null, \"How set the locale\"), mdx(\"p\", null, \"In React based apps, use the shared Eufemia provider:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import Provider from '@dnb/eufemia/shared/Provider'\\n\\nconst myLocale = 'en-GB'\\n\\nrender(\\n  <Provider locale={myLocale}>\\n    <MyApp>Eufemia components</MyApp>\\n  </Provider>\\n)\\n\")), mdx(\"p\", null, \"For component based locale, you can also make use of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lang\"), \" attribute \\u2013 if really needed:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import Provider from '@dnb/eufemia/shared/Provider'\\n\\nrender(\\n  <Provider locale=\\\"en-GB\\\">\\n    <MyApp>\\n      <HelpButton lang=\\\"nb-NO\\\" />\\n    </MyApp>\\n  </Provider>\\n)\\n\")), mdx(\"h2\", null, \"How set locale progressively\"), mdx(\"p\", null, \"You can easily enhance or change translated strings progressively:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import Provider from '@dnb/eufemia/shared/Provider'\\n\\nrender(\\n  <Provider\\n    locale=\\\"nb-NO\\\"\\n    locales={{\\n      'nb-NO': {\\n        Modal: { close_title: 'Something' },\\n      },\\n    }}\\n  >\\n    <MyApp>Eufemia components</MyApp>\\n  </Provider>\\n)\\n\")), mdx(\"h2\", null, \"How change the locale during runtime\"), mdx(\"p\", null, \"You can even change the locale during runtime. Find more info in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/usage/customisation/provider\"\n  }, \"Provider docs\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import Provider from '@dnb/eufemia/shared/Provider'\\nimport Context from '@dnb/eufemia/shared/Context'\\n\\nconst ChangeLocale = () => {\\n  const { setLocale, locale } = React.useContext(Context)\\n\\n  return <Dropdown\\n    value={locale}\\n    data={{ 'nb-NO': 'Norsk', 'en-GB': 'English' }}\\n    on_change={({ data: { value } }) => {\\n      setLocale(value)\\n    }}\\n  />\\n}\\n\\nrender(\\n  <Provider ...>\\n    <MyApp>\\n      ...\\n      <ChangeLocale />\\n      ...\\n    </MyApp>\\n  </Provider>\\n)\\n\")), mdx(\"h2\", null, \"How to combine with other tools\"), mdx(\"p\", null, \"You can easily combine the locales support it with other translation tools, like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-intl\"), \".\"), mdx(\"p\", null, \"Like, having the Eufemia components strings inside a JSON object/file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"en.json\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"Modal.close_title\\\": \\\"Overwrite\\\",\\n  \\\"other.string\\\": \\\"{foo} ({bar} of {max})\\\"\\n}\\n\")), mdx(\"p\", null, \"and use it like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import EufemiaProvider from '@dnb/eufemia/shared/Provider'\\nimport nb from './nb.json' // Has to be an JavaScript object\\n\\nrender(\\n  <EufemiaProvider\\n    locale=\\\"nb-NO\\\"\\n    locales={{\\n      'nb-NO': nb,\\n    }}\\n  >\\n    <MyApp>Eufemia components</MyApp>\\n  </EufemiaProvider>\\n)\\n\")), mdx(\"h2\", null, \"How to use your own translation strings\"), mdx(\"p\", null, \"You have even the option to extend the strings with your own and use it as an internationalization tool replacement for e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-intl\"), \".\"), mdx(\"h3\", null, \"The useTranslation Hook\"), mdx(\"p\", null, \"Now, lets say you have your translation files as JSON object/files \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"en.json\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"Modal.close_title\\\": \\\"Overwrite\\\",\\n  \\\"my.string\\\": \\\"string {foo}\\\"\\n}\\n\")), mdx(\"p\", null, \"and use it like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import EufemiaProvider from '@dnb/eufemia/shared/Provider'\\nimport useTranslation, {\\n  Translation,\\n} from '@dnb/eufemia/shared/useTranslation'\\nimport nb from './nb.json'\\nimport en from './en.json'\\n\\nconst Component = () => {\\n  const str = useTranslation('my.string', {\\n    foo: 'bar',\\n  })\\n\\n  return str\\n}\\n\\nrender(\\n  <EufemiaProvider\\n    locale=\\\"nb-NO\\\"\\n    locales={{\\n      'nb-NO': nb,\\n      'en-GB': en,\\n    }}\\n  >\\n    <Component />\\n    <Translation id=\\\"my.string\\\" foo=\\\"bar\\\" />\\n  </EufemiaProvider>\\n)\\n\")), mdx(\"h2\", null, \"Get the strings from Context\"), mdx(\"p\", null, \"It is possible to use the Eufemia shared Provider for your own project / App localization.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import Provider from '@dnb/eufemia/shared/Provider'\\n\\nconst customTranslation = {\\n  // extend the translation\\n  'en-GB': {\\n    myString: 'Custom string'\\n    myGroup: {\\n      subString: 'Second string'\\n    }\\n  }\\n}\\n\\nrender(\\n  <Provider locales={customTranslation} locale=\\\"en-GB\\\">\\n    <MyApp>\\n      <MyComponent />\\n    </MyApp>\\n  </Provider>\\n)\\n\")), mdx(\"p\", null, \"... and consume the strings in your components, like \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MyComponent\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import Context from '@dnb/eufemia/shared/Context'\\n\\nexport default function MyComponent() {\\n  const { translation } = React.useContext(Context)\\n  return <>{translation.myString}</>\\n}\\n\")), mdx(\"h2\", null, \"How add new locales\"), mdx(\"p\", null, \"Create a new file (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sv-SE.js\"), \") containing all the strings:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"export default {\\n  'sv-SE': {\\n    DatePicker: {\\n      submit_button_text: 'OK',\\n    },\\n    Modal: {\\n      close_title: 'St\\xE4nga',\\n    },\\n    Logo: {\\n      alt: 'DNB Logo',\\n    },\\n  },\\n}\\n\")), mdx(\"p\", null, \"And add the file, like so:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import Provider from '@dnb/eufemia/shared/Provider'\\nimport customTranslation from './locales/sv-SE'\\n\\nrender(\\n  <Provider locales={customTranslation}>\\n    <MyApp>Eufemia components</MyApp>\\n  </Provider>\\n)\\n\")), mdx(\"p\", null, \"or add/update the locales during runtime:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import Provider from '@dnb/eufemia/shared/Provider'\\nimport Context from '@dnb/eufemia/shared/Context'\\n\\nimport customTranslation from './locales/sv-SE'\\n\\nconst ChangeLocale = () => {\\n  const { update, locale } = React.useContext(Context)\\n\\n  // Add new locales\\n  update({ locales: customTranslation, locale: 'sv-SE' })\\n\\n  return locale\\n}\\n\\nrender(\\n  <Provider>\\n    <MyApp>\\n      ...\\n      <ChangeLocale />\\n      ...\\n    </MyApp>\\n  </Provider>\\n)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"uilib/usage/customisation","frontmatter":{"menuTitle":null,"title":"Customization","description":"Customization and tools is a section dedicated to how to use and customize Eufemia in various situations.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"uilib/usage","frontmatter":{"menuTitle":null,"title":"Usage","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"uilib","frontmatter":{"menuTitle":null,"title":"UI Library","description":"Buttons, dropdowns, input fields, components etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"6a8b2d82-cbb9-561f-9440-aa49da3e271f","slug":"uilib/usage/customisation/localization","prev":{"id":"e12d8bee-5c1c-5c5d-9946-62968ca7af48","slug":"uilib/usage/customisation/event-handling","frontmatter":{"title":"Event Handling","description":null}},"next":{"id":"bf7ac07d-628f-5111-aede-16d43e7fe84c","slug":"uilib/usage/customisation/provider-info","frontmatter":{"title":"","description":null}}}},"staticQueryHashes":["2315317908","3001504130","573224243"]}