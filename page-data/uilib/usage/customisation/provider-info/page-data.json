{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/usage/customisation/provider-info","result":{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"draft\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Changing locale or currency\"), mdx(\"p\", null, \"You can either set the locale as a properly e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Provider locale=\\\"en-US\\\" ...\"), \" and handle the change from the app root, or change it inside the app, respective Context:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import Provider from 'dnb-ui-lib/shared/Provider'\\nimport Context from 'dnb-ui-lib/shared/Context'\\n\\nconst ChangeLocale = () => {\\n  const { setLocale, update, locale } = React.useContext(Context)\\n\\n  React.useEffect(() => {\\n    // Change the locale\\n    update({ locale: 'en-US' })\\n\\n    // Change the default currency\\n    update({ currency: 'USD' })\\n  }, [])\\n\\n  return (\\n    <Dropdown\\n      value={locale}\\n      data={{ 'en-US': 'English', 'nb-NO': 'Norsk' }}\\n      on_change={({ data: { selected_key } }) => {\\n        setLocale(selected_key)\\n      }}\\n    />\\n  )\\n}\\n\\nrender(\\n  <Provider>\\n    <MyApp>\\n      <ChangeLocale />\\n      text <Number>123</Number> table etc.\\n    </MyApp>\\n  </Provider>\\n)\\n\")), mdx(\"h2\", null, \"Nested Providers\"), mdx(\"p\", null, \"Yes, it's possible to have nested providers.\"), mdx(\"p\", null, \"You have then to decide what you need to update.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import Provider from 'dnb-ui-lib/shared/Provider'\\nimport Context from 'dnb-ui-lib/shared/Context'\\n\\nconst ChangeLocale = () => {\\n  const { setCurrentLocale, updateCurrent, locale } = React.useContext(\\n    Context\\n  )\\n\\n  React.useEffect(() => {\\n    // Change the locale\\n    updateCurrent({ locale: 'en-US' })\\n\\n    // Change the default currency\\n    updateCurrent({ currency: 'USD' })\\n  }, [])\\n\\n  return (\\n    <Dropdown\\n      value={locale}\\n      data={{ 'en-US': 'English', 'nb-NO': 'Norsk' }}\\n      on_change={({ data: { selected_key } }) => {\\n        setCurrentLocale(selected_key)\\n      }}\\n    />\\n  )\\n}\\n\\nrender(\\n  <Provider locale=\\\"en-US\\\">\\n    <MyApp>\\n      <Provider locale=\\\"nb-NO\\\">\\n        Norsk <Number>1234</Number>\\n        <ChangeLocale />\\n      </Provider>\\n      English <Number>1234</Number>\\n    </MyApp>\\n  </Provider>\\n)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","children":[{"__typename":"Mdx","fields":{"slug":"uilib"},"frontmatter":{"title":"UI Library","menuTitle":null,"showTabs":null,"tabs":null,"hideTabs":null}}]}},"pageContext":{"id":"12ffd304-f312-51d6-b26d-aba18cc5cb7d","prev":{"id":"8f5fcc65-1792-5713-9916-8245a7368813","fields":{"slug":"uilib/usage/customisation/styling"}},"next":{"id":"6ea29a9a-a127-57f3-ae35-92af295f12af","fields":{"slug":"uilib/usage/customisation/theming"}}}}}