{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/usage/customisation/provider-info/","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"uilib/usage/customisation/provider-info","frontmatter":{"title":"","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null},"tableOfContents":{"items":[{"url":"#send-down-component-props","title":"Send down component props"},{"url":"#changing-locale-or-currency","title":"Changing locale or currency"},{"url":"#nested-providers","title":"Nested Providers"},{"url":"#provider-and-context-troubleshooting","title":"Provider and context troubleshooting"}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"draft\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Send down component props\"), mdx(\"p\", null, \"You can use the Provider to send down component props. And because providers can be nested, it's a really powerful tool to handle generally properties used often by a component.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import Provider from '@dnb/eufemia/shared/Provider'\\n\\nrender(\\n  <MyApp>\\n    ...\\n    <Provider Button={{ size: 'large' }}>\\n      ...\\n      <Button>Large button</Button>\\n    </Provider>\\n  </MyApp>\\n)\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NB:\"), \" If you use TypeScript, you may rather use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" prop to spread the component properties along:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Provider\\n  value={{\\n    Button: { size: 'large' },\\n  }}\\n>\\n  ...\\n  <Button>Large button</Button>\\n</Provider>\\n\")), mdx(\"h2\", null, \"Changing locale or currency\"), mdx(\"p\", null, \"You can either set the locale as a properly e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Provider locale=\\\"en-GB\\\" ...\"), \" and handle the change from the app root, or change it inside the app, respective Context:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import Provider from '@dnb/eufemia/shared/Provider'\\nimport Context from '@dnb/eufemia/shared/Context'\\n\\nconst ChangeLocale = () => {\\n  const { setLocale, update, locale } = React.useContext(Context)\\n\\n  React.useEffect(() => {\\n    // Change the locale\\n    update({ locale: 'en-GB' })\\n\\n    // Change the default currency\\n    update({ currency: 'USD' })\\n  }, [])\\n\\n  return (\\n    <Dropdown\\n      value={locale}\\n      data={{ 'en-GB': 'English', 'nb-NO': 'Norsk' }}\\n      on_change={({ data: { value } }) => {\\n        setLocale(value)\\n      }}\\n    />\\n  )\\n}\\n\\nrender(\\n  <Provider>\\n    <MyApp>\\n      <ChangeLocale />\\n      text <NumberFormat>123</NumberFormat> table etc.\\n    </MyApp>\\n  </Provider>\\n)\\n\")), mdx(\"h2\", null, \"Nested Providers\"), mdx(\"p\", null, \"Yes, it's possible to have nested providers.\"), mdx(\"p\", null, \"You have then to decide what you need to update.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import Provider from '@dnb/eufemia/shared/Provider'\\nimport Context from '@dnb/eufemia/shared/Context'\\n\\nconst ChangeLocale = () => {\\n  const { setCurrentLocale, updateCurrent, locale } =\\n    React.useContext(Context)\\n\\n  React.useEffect(() => {\\n    // Change the locale\\n    updateCurrent({ locale: 'en-GB' })\\n\\n    // Change the default currency\\n    updateCurrent({ currency: 'USD' })\\n  }, [])\\n\\n  return (\\n    <Dropdown\\n      value={locale}\\n      data={{ 'en-GB': 'English', 'nb-NO': 'Norsk' }}\\n      on_change={({ data }) => data && setCurrentLocale(data.selected_key)}\\n    />\\n  )\\n}\\n\\nrender(\\n  <Provider locale=\\\"en-GB\\\">\\n    <MyApp>\\n      <Provider locale=\\\"nb-NO\\\">\\n        Norsk <NumberFormat>1234</NumberFormat>\\n        <ChangeLocale />\\n      </Provider>\\n      English <NumberFormat>1234</NumberFormat>\\n    </MyApp>\\n  </Provider>\\n)\\n\")), mdx(\"h2\", null, \"Provider and context troubleshooting\"), mdx(\"p\", null, \"If there is a module format deviation, components do not share anymore the same provider and context. So, make sure you have a consistent import routine, not like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// NB: Example of deviant module formats\\nimport Provider from '@dnb/eufemia/shared/Provider' // like /esm\\nimport { Button } from '@dnb/eufemia/es'\\nimport { NumberFormat } from '@dnb/eufemia/cjs/components'\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"uilib/usage/customisation","frontmatter":{"menuTitle":null,"title":"Customization","description":"Customization and tools is a section dedicated to how to use and customize Eufemia in various situations.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"uilib/usage","frontmatter":{"menuTitle":null,"title":"Usage","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"uilib","frontmatter":{"menuTitle":null,"title":"UI Library","description":"Buttons, dropdowns, input fields, components etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"bf7ac07d-628f-5111-aede-16d43e7fe84c","slug":"uilib/usage/customisation/provider-info","prev":{"id":"6a8b2d82-cbb9-561f-9440-aa49da3e271f","slug":"uilib/usage/customisation/localization","frontmatter":{"title":"Locale / Translation","description":null}},"next":{"id":"23a95694-fe90-5caf-9494-01916c33aad4","slug":"uilib/usage/customisation/provider","frontmatter":{"title":"Provider / Context","description":null}}}},"staticQueryHashes":["2315317908","3001504130","573224243"]}