{"componentChunkName":"component---src-templates-mdx-js","path":"/uilib/usage/layout/media-queries/","result":{"data":{"site":{"siteMetadata":{"title":"Eufemia - DNB Design System","description":"Eufemia Design System is the go to place for all who has to design, develop and make digital WEB applications for DNB."}},"mdx":{"slug":"uilib/usage/layout/media-queries","frontmatter":{"title":"Media Queries","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null},"tableOfContents":{"items":[{"url":"#media-queries-and-breakpoints","title":"Media Queries and Breakpoints","items":[{"url":"#media-queries-properties-table","title":"Media Queries Properties Table"},{"url":"#mediaquery-component-and-react-hooks","title":"MediaQuery component and React Hooks","items":[{"url":"#re-render-and-performance","title":"Re-render and performance"},{"url":"#css-similarity","title":"CSS similarity"},{"url":"#properties","title":"Properties"},{"url":"#ssr","title":"SSR"},{"url":"#units","title":"Units"},{"url":"#usemedia-hook-usage","title":"useMedia hook usage"},{"url":"#usemediaquery-hook-usage","title":"useMediaQuery hook usage"},{"url":"#live-example","title":"Live example"},{"url":"#mediaquery-component","title":"MediaQuery component","items":[{"url":"#interceptor-on-change-listener","title":"Interceptor on change listener"}]},{"url":"#use-different-breakpoints","title":"Use different breakpoints"},{"url":"#import-breakpoints-into-javascript","title":"Import breakpoints into JavaScript"}]},{"url":"#sass--scss-mixins","title":"SASS / SCSS mixins"},{"url":"#media-queries-examples","title":"Media Queries Examples"},{"url":"#how-to-deal-with-jest","title":"How to deal with Jest"}]}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Media Queries\",\n  \"order\": 2\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Media Queries and Breakpoints\"), mdx(\"p\", null, \"In order to make it as declarative and easy to handle media queries from JavaScript, you may be interested to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/usage/layout/media-queries#mediaquery-component-and-the-usemediaquery-hook\"\n  }, \"use both\"), \" the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MediaQuery\"), \" React component and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useMediaQuery\"), \" React hook.\"), mdx(\"h2\", null, \"Media Queries Properties Table\"), mdx(\"p\", null, \"UX designers are using a 12 column system during their design processes.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Pixel\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Rem\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Custom Property\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Comments\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"640\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"small\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"40em\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"--layout-small\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Mobile\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"800\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"medium\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"50em\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"--layout-medium\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"960\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"large\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"60em\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"--layout-large\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"DNB default\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1152\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"x-large\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"72em\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"--layout-x-large\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1280\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"xx-large\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"80em\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"--layout-xx-large\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })))), mdx(\"h2\", null, \"MediaQuery component and React Hooks\"), mdx(\"p\", null, \"Both the component and the React Hooks uses the JavaScript API \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\"\n  }, \"matchMedia\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/uilib/usage/layout/media-queries/#usemedia-hook-usage\"\n  }, \"useMedia\"), \" React Hook for screen width only.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/uilib/usage/layout/media-queries/#usemediaquery-hook-usage\"\n  }, \"useMediaQuery\"), \" React Hook for all kinds of media queries.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/uilib/usage/layout/media-queries/#mediaquery-component\"\n  }, \"MediaQuery\"), \" Component for all kinds of media queries.\")), mdx(\"h3\", null, \"Re-render and performance\"), mdx(\"p\", null, \"By using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"matchMedia\"), \" we only render when the requested media query actually changes. So we do not need to listen to e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window.addEventListener('resize', ...)\"), \" which is a performance waste, even with a debounce helper.\"), mdx(\"h3\", null, \"CSS similarity\"), mdx(\"p\", null, \"It uses the same query API as CSS uses. You are able to provide your query also raw, by using e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"query=\\\"(min-width: 50em)\\\"\"), \". But your custom queries will quickly grow and mess up your application code unnecessarily.\"), mdx(\"h3\", null, \"Properties\"), mdx(\"p\", null, \"You can both use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"min\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"max\"), \", they are equivalent to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"minWidth\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"maxWidth\"), \".\"), mdx(\"p\", null, \"CamelCase properties will be converted to kebab-case.\"), mdx(\"h3\", null, \"SSR\"), mdx(\"p\", null, \"During a SSR (Server Side Render) we do not have the clients \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window.matchMedia\"), \". In order to make the initial render to a positive match, you can set the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"matchOnSSR={true}\"), \" property.\"), mdx(\"h3\", null, \"Units\"), mdx(\"p\", null, \"Numeric values will be handled as an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"em\"), \" unit.\"), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"useMedia\"), \" hook usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import { useMedia } from '@dnb/eufemia/shared'\\n\\nfunction Component() {\\n  const { isSmall, isMedium, isLarge, isSSR } = useMedia()\\n\\n  return isSmall ? 'true' : 'false'\\n}\\n\")), mdx(\"p\", null, \"To lower the possibility of CLS (Cumulative Layout Shift) on larger screens \\u2013 you can make use of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isSSR\"), \" property. Try to use it in combination with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isLarge\"), \", because the negative CLS experience is most recoginzeable on larger screens:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import { useMedia } from '@dnb/eufemia/shared'\\n\\nfunction Component() {\\n  const { isSmall, isMedium, isLarge, isSSR } = useMedia()\\n\\n  return isLarge || isSSR ? 'true' : 'false'\\n}\\n\")), mdx(MediaQueryUseMedia, {\n    mdxType: \"MediaQueryUseMedia\"\n  }), mdx(\"p\", null, \"You can disable the usage of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window.matchMedia\"), \" by providing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useMedia({ disabled: true })\"), \".\"), mdx(\"p\", null, \"You can log the media query by providing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useMedia({ log: true })\"), \".\"), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"useMediaQuery\"), \" hook usage\"), mdx(\"p\", null, \"This React Hook is a more extended version, where you can define all sorts of Media Queries.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import { useMediaQuery } from '@dnb/eufemia/shared'\\n// or\\nimport useMediaQuery from '@dnb/eufemia/shared/useMediaQuery'\\n\\nfunction Component() {\\n  const match = useMediaQuery({\\n    matchOnSSR: true,\\n    when: { min: 'medium' },\\n  })\\n\\n  return match ? 'true' : 'false'\\n}\\n\")), mdx(\"p\", null, \"You can disable the usage of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window.matchMedia\"), \" by providing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useMedia({ disabled: true })\"), \".\"), mdx(\"h3\", null, \"Live example\"), mdx(\"p\", null, \"This example uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"not\"), \" property to reverse the behavior.\"), mdx(MediaQueryLiveExample, {\n    mdxType: \"MediaQueryLiveExample\"\n  }), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"MediaQuery\"), \" component\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import { MediaQuery } from '@dnb/eufemia/shared'\\n// or\\nimport MediaQuery from '@dnb/eufemia/shared/MediaQuery'\\n\")), mdx(\"p\", null, \"You have plenty of possibilities to mix and match:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<MediaQuery when={{ min: 'medium' }}>\\n  matches all above medium screens\\n</MediaQuery>\\n\\n<MediaQuery when={{ screen: true, orientation: 'landscape' }}>\\n  matches orientation landscape screens\\n</MediaQuery>\\n\\n<MediaQuery not when={{ min: 'large' }}>\\n  matches all, but beneath large screens\\n</MediaQuery>\\n\\n<MediaQuery matchOnSSR when={{ min: 'small', max: 'medium' }}>\\n  matches small and medium screens and during SSR\\n</MediaQuery>\\n\\n<MediaQuery when={[{ min: 'small', max: 'x-large' }, { print: true }]}>\\n  matches all between small and x-large screens or all print media\\n</MediaQuery>\\n\\n<MediaQuery when={{ max: '80em' }}>\\n  matches screens to a max of 80em\\n</MediaQuery>\\n\\n<MediaQuery query=\\\"(min-width: 40em) and (max-width: 72em)\\\">\\n  matches screens between 40em and 72em\\n</MediaQuery>\\n\")), mdx(\"p\", null, \"You find the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/shared/media-query/properties\"\n  }, \"properties on this page\"), \".\"), mdx(\"h4\", null, \"Interceptor on change listener\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { onMediaQueryChange } from '@dnb/eufemia/shared/MediaQuery'\\n\\nconst remove = onMediaQueryChange({ min: 'medium' }, (match, event) => {\\n  // callback\\n})\\n\\n// Will remove the listeners\\nremove()\\n\")), mdx(\"h3\", null, \"Use different breakpoints\"), mdx(\"p\", null, \"It is possible to change the used breakpoint types by providing them to the Eufemia Provider.\"), mdx(\"p\", null, \"Both the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MediaQuery\"), \" component and the hooks \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useMedia\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useMediaQuery\"), \" will merge and use these custom breakpoints.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NB:\"), \" It should be done only temporary, because DNB should align on one set of breakpoints for best UX and consistency.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { Provider } from '@dnb/eufemia/shared'\\n...\\n<Provider\\n  value={{\\n    breakpoints: {\\n      small: '40em',\\n      medium: '60em',\\n      large: '72em',\\n    },\\n  }}\\n>\\n  <App />\\n</Provider>\\n\")), mdx(\"h3\", null, \"Import breakpoints into JavaScript\"), mdx(\"p\", null, \"You get an object with the values and the types as the keys.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import { defaultBreakpoints } from '@dnb/eufemia/shared/MediaQueryUtils'\\n\")), mdx(\"h2\", null, \"SASS / SCSS mixins\"), mdx(\"p\", null, \"You can re-use the SASS mixins from Eufemia:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scss\"\n  }, \"@import '@dnb/eufemia/style/core/utilities.scss';\\n\\n@include allBelow(large) {\\n  /* Your CSS */\\n}\\n\\n@include allAbove(small) {\\n  /* Your CSS */\\n}\\n\")), mdx(\"h2\", null, \"Media Queries Examples\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \"@media screen and (max-width: 40em) {\\n  /* small (mobile) */\\n}\\n@media screen and (max-width: 50em) {\\n  /* medium */\\n}\\n@media screen and (max-width: 60em) {\\n  /* large (default) */\\n}\\n@media screen and (min-width: 60em) and (max-width: 72em) {\\n  /* x-large */\\n}\\n@media screen and (min-width: 70em) and (max-width: 80em) {\\n  /* xx-large */\\n}\\n\")), mdx(\"p\", null, \"Based of the findings of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://zellwk.com/blog/media-query-units/\"\n  }, \"this article\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://bugs.webkit.org/show_bug.cgi?id=156684\"\n  }, \"this webkit bug\"), \" Eufemia recommends to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"em\"), \" units for media query usage to meet the best overall browser support. Read \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/uilib/usage/best-practices/for-styling#units\"\n  }, \"more about units\"), \".\"), mdx(\"h2\", null, \"How to deal with Jest\"), mdx(\"p\", null, \"You can mock \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window.matchMedia\"), \" with e.g. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/jest-matchmedia-mock\"\n  }, \"jest-matchmedia-mock\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import MatchMediaMock from 'jest-matchmedia-mock'\\n\\nconst matchMedia = new MatchMediaMock()\\n\\nit('your test', () => {\\n  matchMedia.useMediaQuery('(min-width: 50em) and (max-width: 60em)')\\n  ...\\n})\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","siblings":[{"slug":"uilib/usage/layout","frontmatter":{"menuTitle":null,"title":"Layout","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"uilib/usage","frontmatter":{"menuTitle":null,"title":"Usage","description":null,"fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}},{"slug":"uilib","frontmatter":{"menuTitle":null,"title":"UI Library","description":"Buttons, dropdowns, input fields, components etc.","fullscreen":null,"showTabs":null,"hideTabs":null,"tabs":null}}]}},"pageContext":{"id":"391f23fc-6d44-5911-bf53-308f20e311bd","slug":"uilib/usage/layout/media-queries","prev":{"id":"87ecbdcf-a9e9-5d1f-9fb4-f121872f0b80","slug":"uilib/usage/layout/grid","frontmatter":{"title":"Grid","description":null}},"next":{"id":"d49b9368-2222-5d24-8740-3ffe9b2a5bd7","slug":"uilib/components/dialog/properties","frontmatter":{"title":"","description":null}}}},"staticQueryHashes":["2315317908","2480288490","3001504130","573224243"]}